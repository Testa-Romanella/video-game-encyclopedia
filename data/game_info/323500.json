{"id": 323500, "slug": "musichelper", "name": "MusicHelper", "name_original": "MusicHelper", "description": "MusicHelper\u00a0\u2013 a procedural\u00a0music\u00a0generator \r\nWhat is the MusicHelper\r\n<p>The MusicHelper is a funny tool I've created in order to help the musicians and composers to catch some fresh new musical ideas with the help of a procedural approach.</p>\n<p>It generates melodies with 8bit-inspired notes and a retro interface. The notes freely move from left to right, pulse on each beat (and a bit more for each first beat of a bar) then disappear. The color and shape of the notes are totally random, only their pitch correspond to their height.<br/></p>\n<p>My two inspirations for this tool are :</p>\n<ul><li>the recent Google Doodle about J.S. Bach with interesting machine-learning stuff (https://g.co/doodle/mq5877),</li><li>and this video on Ableton that introduces random generation as a viable tool to compose a melody (https://www.youtube.com/watch?v=kz-dswnHIb4).</li></ul>\n<p>However, you can freely use the MusicHelper :</p>\n<ol><li>as a helper for composition\u00a0;</li><li>as a artistic tool to drive your neighbours mad with repetitive cheap sounds\u00a0;</li><li>as a educational game to train yourself on rhythms (I don't recommand this though\u2026).</li></ol>\r\nHow to use the MusicHelper\r\n<p>The basic way to use the MusicHelper is to setup your preferred params, then to hit the <strong>Play</strong> button.<br/></p>\n<p>Here is the interface of the MusicHelper:</p>\n\n<p>From left to right, and top to bottom:</p>\n<ol><li><strong>Play/Stop button</strong>: begin or stop a new melody, or the loaded sound in playback mode ;</li><li><strong>Save button</strong>: save the last X seconds of the played melody.</li><li><strong>Seconds to save slider</strong>: how many seconds you wish to save. Lower values are usually better if you don't want to reconsider very ancient notes, especially on higher tempos.</li><li><strong>Load button</strong>: load the very last audio clip saved on your system (if available).</li><li><strong>Scale drop-down</strong>: set the scale and mode of your melody.</li><li><strong>Volume slider</strong>: self explanatory.</li><li><strong>BPM slider</strong>: <em>Beat per minute</em>. Corresponds to the global tempo of your melody.</li><li><strong>Chords</strong> <strong>slider</strong>: chances to trigger a triad/chord on each beat, from 0 (never) to 1 (always).</li><li><strong>Pitch variation slider</strong>: how much the melody varies from note pitches to others. Lower values give a more <em>baroque</em>-style melody, whereas higher values output a more fancy melody.</li><li><strong>Enable thirds checkbox</strong>: if enabled, the melody will only produce thirds (override the <strong>Chords slider</strong>).</li><li><strong>Rhythmic weight sliders</strong>: control how often the corresponding rhythmic patterns occur in the melody.</li></ol>\r\nPlayback\u00a0mode\r\n<p>The playback mode allow you to save the last notes that played just a couple of seconds ago. You <em>cannot</em> save more that one audio clip at a time, the MusicHelper is not designed to have a huge load/save system, but for quick &amp; simple inspiration.</p>\n<p>The parameters are disabled in this mode, because you cannot affect the saved song. Moreover, some params like the scale <em>cannot</em> be included in realtime in the saved audioclip, because they currently force the engine to stop then play again a new melody, thus discarding the last one. It means that you <em>cannot</em> save a melody with a scale change in the middle. Sorry.<br/></p>\r\nHow it works\r\n<p>The note pitches are mapped to a <em>Perlin noise</em> value, read with a <em>t\u00a0</em>parameter that roughly corresponds to the elapsed time. The pitch variation parameter controls the speed of <em>t</em>, so lower values mean less variation in the noise, thus less variation in the melody.</p>\n<p>The melody itself is generated thanks to the Unity <em>OnAudioFilterRead</em> function, that allow to output procedural audio.<br/></p>\r\nImprovements\r\n<p>I realized the entire project as a student project in the IDE master at GOBELINS, l'\u00e9cole de l'image. I don't know how much time I'll be able to spend on this project, but feel free to suggest any improvement. What I think for now is:</p>\n<ul><li>UX/UI improvement ;</li><li>Multi language support ;</li><li>WebGL support (currently not supported because of the procedural audio IMO, so I'm considering using audio assets for this platform) ;</li><li>Improved import/export system to share your unique audio clips with the world</li><li>Presets so you may go in and play with some cool stuff ;</li><li>More content (rhythmic units/patterns, shapes?).</li></ul>\n<p>The code of the project is public and available on Github : https://github.com/bperraud/MusicHelper. Thank you for the (long) reading!<br/></p>", "metacritic": null, "released": "2019-05-30", "tba": false, "updated": "2019-05-31T04:48:56", "background_image": "https://media.rawg.io/media/screenshots/669/669321dd35ab0261183612ce43347d96.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC", "macOS"], "developers": ["Pyriceti"], "genres": [], "publishers": [], "esrb_rating": null}