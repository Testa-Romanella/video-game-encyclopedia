{"id": 940486, "slug": "cpcminipac-amstrad-cpc-by-stefan-hasenhutl", "name": "CPCMiniPac (Amstrad CPC) by Stefan Hasenh\u00fctl", "name_original": "CPCMiniPac (Amstrad CPC) by Stefan Hasenh\u00fctl", "description": "<p>CPC MiniPac</p>\n<p>-----------</p>\n<p>-----------</p>\n<p>CPCMiniPac is a game based on Pac-Man. The aim is to eat all the points without</p>\n<p>getting caught by a ghost. Is controlled with the arrow keys.</p>\n<p>There are 2 big dots that cannot be eaten.</p>\n<p>However, the ghosts can pass these points. So be careful!</p>\n<p>It runs on an Amstrad CPC-6128 and is written in Locomotive Basic 1.1.</p>\n\n<p>Technical explanation</p>\n<p>---------------------</p>\n<p>---------------------</p>\n<p>The game uses control characters instead of the following basic commands:</p>\n<p>PAPER</p>\n<p>BORDER</p>\n<p>INK</p>\n<p>MODE</p>\n<p>SYMBOL</p>\n<p>This technique is e.g. in the book https://archive.org/details/schneider-cpc-grafik-programmierung</p>\n<p>described in chapter 2.4 (from page 84).</p>\n\n<p>Special mode 0</p>\n<p>--------------</p>\n<p>This game uses CALL &amp;BD1C to switch to MODE 0 but without clearing the screen.</p>\n<p>In this way, 4 colors can be used per character instead of one color.</p>\n<p>http://www.cantrell.org.uk/david/tech/cpc/cpc-firmware/firmware.pdf -&gt; page 71</p>\n<p>I calculated the individual characters with an Excel: calc_symbol_xls.png</p>\n<p>I defined some characters that do not contain so many 0s directly via control characters in lines 10 and 20.</p>\n<p>I defined the characters for the playing area (contains many 0s) in line 100 and read them in line 20</p>\n<p>and set via PRINT command. (DATA lines 80 and 90)</p>\n\n<p>Playing area</p>\n<p>------------</p>\n<p>It is 20 elements wide and 11 high:</p>\n\n<p>Each field consists of 2x1 characters. Each entry in the table above represents a special character.</p>\n<p>This table is stored in row 100 as HEX values. Lines 20 to 40 are read in and displayed on the screen.</p>\n\n<p>Explanation of the individual basic lines</p>\n<p>------------------------------------</p>\n<p>10 -&gt; SYMBOL AFTER for user-defined characters, control characters for colors and symbols, chr$(0) must be used for 0s</p>\n<p>20 -&gt; Remaining control characters output via PRINT, reading in and outputting the next control characters from DATA lines 80 and 90,</p>\n<p>\u00a0 \u00a0 \u00a0 Special mode 0 call, definition of ghost array e(4,4) and field array g(20,11)</p>\n<p>\u00a0 \u00a0 \u00a0 Start of the output of the playing field</p>\n<p>30 -&gt; Definition of other variables, e.g. setting the ghost positions on the playing field, due to lack of space at this point</p>\n<p>\u00a0 \u00a0 \u00a0 Convert HEX values to integers</p>\n<p>40 -&gt; Output of the playing field, chr$(210 + table entry) e.g. 210+4=214 characters at the top left of the playing field</p>\n<p>\u00a0 \u00a0 \u00a0 Beginning of the main loop WHILE w&gt;0, start of the ghost loop, collision test with game end</p>\n<p>50 -&gt; Ghost movement algorithm, overwriting the current ghost position with characters from the playing field array</p>\n<p>60 -&gt; Output ghost in new position, keyboard query, output score, calculation of Pac-Man's position</p>\n<p>\u00a0 \u00a0 \u00a0 Memorizing the character at the possible next position from Pac-Man</p>\n<p>70 -&gt; Check if the next character is an invalid one on the playing field, if not then perform movement</p>\n<p>\u00a0 \u00a0 \u00a0 Show Pac-Man on the screen with animation, if Pac-Man was moved then show the playing field element at the old position</p>\n<p>\u00a0 \u00a0 \u00a0 If target position was a point (c=14) then count point and emit sound</p>\n<p>80 -&gt; end of game loop, control character data for characters</p>\n<p>90 -&gt; control character data for characters</p>\n<p>100 -&gt; playing field data in HEX, End of game message</p>\n\n<p>Important Variables</p>\n<p>------------------</p>\n<p>e(A,B) A-&gt;ghost 1-4, B=1-&gt; X coordinate, B=2 -&gt; Y coordinate, B=3-&gt; direction X, B=4-&gt; direction Y</p>\n<p>g(20,11) playing field -&gt; values from 1-16</p>\n<p>x -&gt; X coordinate Pac-Man</p>\n<p>y -&gt; Y coordinate Pac-Man</p>\n<p>a -&gt; old X coordinate Pac-Man</p>\n<p>b -&gt; old Y coordinate Pac-Man</p>\n<p>w -&gt; number of points (starting value 97)</p>\n<p>c -&gt; character from the playing field e.g. 14 -&gt; point</p>\n<p>h -&gt; variable for left and right arrow keys</p>\n<p>v -&gt; Variable for up and down arrow keys</p>\n\n\n<p>CPCMiniPac</p>\n<p>----------</p>\n<p>----------</p>\n<p>CPCMiniPac ist ein an Pac-Man angelehntes Spiel. Ziel ist es alle Punkte zu fressen ohne\u00a0von einem Geist erwischt zu werden. Gesteuert wird mit den Pfeiltasten.\u00a0</p>\n<p>Es gibt 2 gro\u00dfe Punkte, die nicht gefressen werden k\u00f6nnen.</p>\n<p>Die Geister k\u00f6nnen an diesen Punkten aber vorbei. Also vorsicht!</p>\n<p>Es l\u00e4uft auf einem Amstrad CPC-6128 und ist in Locomotive Basic 1.1 geschrieben.</p>\n\n<p>Technische Erkl\u00e4rung</p>\n<p>--------------------</p>\n<p>--------------------</p>\n<p>Das Spiel verwendet Steuerzeichen anstatt folgender Basic Befehle:</p>\n<p>PAPER</p>\n<p>BORDER</p>\n<p>INK</p>\n<p>MODE</p>\n<p>SYMBOL</p>\n<p>Diese Technik ist z.B. im Buch https://archive.org/details/schneider-cpc-grafik-programmierung\u00a0</p>\n<p>im Kapitel 2.4 (ab Seite 84) beschrieben.</p>\n\n<p>Spezial Mode 0</p>\n<p>--------------</p>\n<p>Dieses Spiel n\u00fctzt CALL &amp;BD1C um in den MODE 0 zu schalten, aber ohne den Bildschirm zu l\u00f6schen.\u00a0</p>\n<p>So k\u00f6nnen statt einer Farbe gleich 4 Farben pro Zeichen gen\u00fctzt werden.</p>\n<p>http://www.cantrell.org.uk/david/tech/cpc/cpc-firmware/firmware.pdf -&gt; Seite 71</p>\n<p>Die Berechnung der einelnen Zeichen habe ich mit einem Excel gemacht: calc_symbol_xls.png</p>\n<p>Einige Zeichen, die nicht so viele 0en enthalten habe ich direkt via Steuerzeichen in Zeile 10 und 20 definiert.\u00a0</p>\n<p>Die Zeichen f\u00fcr die Spielfl\u00e4che (enth\u00e4lt viele 0en) habe ich in Zeile 100 definiert und in Zeile 20 eingelesen</p>\n<p>und via PRINT Befehl gesetzt. (DATA Zeilen 80 und 90)</p>\n\n<p>Spielfeld</p>\n<p>---------</p>\n<p>Es ist 20 Elemente breit und 11 hoch:</p>\n\n<p>Jedes Feld besteht aus 2x1 Zeichen. Jeder Eintrag in der obigen Tabelle steht f\u00fcr ein spezielles Zeichen.</p>\n<p>Diese Tabelle ist in Zeile 100 als HEX Werte gespeichert. Das Einlesen und Darstellen am Bildschirm wird von Zeile 20 bis 40 gemacht.</p>\n\n<p>Erkl\u00e4rung der einzelnen Basic Zeilen</p>\n<p>------------------------------------</p>\n<p>10 -&gt; SYMBOL AFTER f\u00fcr selbstdefinierte Zeichen, Steuerzeichen f\u00fcr Farben und Symbole, f\u00fcr 0en muss chr$(0) verwendet werden</p>\n<p>20 -&gt; Restliche Steuerzeichenausgabe via PRINT, Einlesen und ausgeben der n\u00e4chsten Steuerzeichen aus den DATA Zeilen 80 und 90,\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 Spezial Mode 0 Call, Definition vom Geister Array e(4,4) und Spielfeld Array g(20,11)</p>\n<p>\u00a0 \u00a0 \u00a0 Start der Ausgabe des Spielfeldes</p>\n<p>30 -&gt; Definition weiterer Variablen, z.B. setzen der Geisterpositionen am Spielfeld, aus Platzmangel an dieser Stelle</p>\n<p>\u00a0 \u00a0 \u00a0 Umwandeln der HEX Werte zu Integer</p>\n<p>40 -&gt; Ausgabe der Spielfl\u00e4che, chr$(210 + Tabelleneintrag) z.B. 210+4=214 Zeichen ganz oben links vom Spielfeld</p>\n<p>\u00a0 \u00a0 \u00a0 Beginn der Hauptschleife WHILE w&gt;0, Start der Geisterschleife, Kollisionstest mit Spielende</p>\n<p>50 -&gt; Geister Bewegungs Algorithmus, \u00dcberschreiben der aktuellen Geisterposition mit Zeichen aus dem Spielfeld Array</p>\n<p>60 -&gt; Ausgabe Geist an neuer Position, Tastaturabfrage, Ausgabe Score, Berechnung der Position vom Pac-Man</p>\n<p>\u00a0 \u00a0 \u00a0 Merken des Zeichens an der m\u00f6glichen n\u00e4chsten Position vom Pac-Man</p>\n<p>70 -&gt; Pr\u00fcfen ob n\u00e4chstes Zeichen ein ung\u00fcltiges am Spielfeld ist, wenn nicht dann Bewegung durchf\u00fchren</p>\n<p>\u00a0 \u00a0 \u00a0 Pac-Man am Bildschirm mit Animation ausgeben, wenn Pac-Man bewegt wurde dann an alter Position das Spielfeldzeichen darstellen</p>\n<p>\u00a0 \u00a0 \u00a0 Wenn Zielposition ein Punkt war (c=14) dann Punkt z\u00e4hlen und Sound ausgeben</p>\n<p>80 -&gt; Ende Spielschleife, Steuerzeichendaten f\u00fcr Zeichen</p>\n<p>90 -&gt; Steuerzeichendaten f\u00fcr Zeichen</p>\n<p>100 -&gt; Spielfeld Daten in HEX, WIN Meldung zum Spielende</p>\n\n<p>Wichtige Variablen</p>\n<p>------------------</p>\n<p>e(A,B) A-&gt;Geist 1-4, B=1-&gt; X Koordinate, B=2 -&gt; Y Koordinate, B=3-&gt; Bewegunsrichtung X, B=4-&gt; Bewegunsrichtun Y\u00a0\u00a0</p>\n<p>g(20,11) Spielfeld -&gt; Werte von 1-16</p>\n<p>x -&gt; X Koordinate Pac-Man</p>\n<p>y -&gt; Y Koordinate Pac-Man</p>\n<p>a -&gt; alte X Koordinate Pac-Man</p>\n<p>b -&gt; alte Y Koordinate Pac-Man</p>\n<p>w -&gt; Anzahl der Punkte (Startwert 97)</p>\n<p>c -&gt; Zeichen vom Spielfeld z.B. 14-&gt; Punkt</p>\n<p>h -&gt; Variable f\u00fcr Pfeiltasten links und rechts</p>\n<p>v -&gt; Variable f\u00fcr Pfeiltasten oben und unten</p>", "metacritic": null, "released": "2023-03-12", "tba": false, "updated": "2023-03-13T09:32:33", "background_image": "https://media.rawg.io/media/screenshots/726/726e8fab1a0ac48d346df015ac6ed462.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 43, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}