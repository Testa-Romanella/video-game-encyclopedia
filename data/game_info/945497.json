{"id": 945497, "slug": "roguelike-10-c64-by-bago-zonde", "name": "Roguelike 10 (C64) by Bago Zonde", "name_original": "Roguelike 10 (C64) by Bago Zonde", "description": "<p># Roguelike 10</p>\n<p>This game was written for the Basic 10-Liner Contest 2023 in the PUR-80 category. It's written for Commodore 64/128 computers.</p>\n\n<p>## Aim of the game</p>\n<p>As in all rogue-like games, your aim is to explore as many randomly generated dungeons as possible, not get slain and find as much gold as you can carry!</p>\n<p>With joystick in port 2, your hero character can move and attack only in 4 directions while creatures can move and attack also diagonally.</p>\n<p>To attack a creature, move towards its position on the screen. In melee combat, you lose 1 HP (hit point).</p>\n<p>It takes only one hit to kill a creature. When you are on one a field next to the creature, you will also lose 1 HP.</p>\n<p>Get 1 HP back with each health potion you collect.</p>\n<p>Good luck in your quest! And may your name be remembered!</p>\n\n<p>## What's on the screen</p>\n<p>In the top left part of the screen you can see remaining hit points, current dungeon level and amount of gold.</p>\n<p>For example, `9HP 5L 6G` indicates that hero has 9 hit points remaining, is currently exploring 5th level of dungeons and has 6 pieces of gold.</p>\n<p>The rest of the screen contains current level dungeon. Only the area surrounding your hero is revealed, so be careful where you move!</p>\n<p>- your hero is represented with the \"X\" character</p>\n<p>- floor is represented with the chessboard pattern</p>\n<p>- health potions are represented with the plus sign (\"+\")</p>\n<p>- creatures are represented with the white spade character</p>\n<p>- gold is represented with the diamond character</p>\n<p>- stairs to the next level are represented with the equal sign character (\"=\")</p>\n\n\n<p>## Constants and variables</p>\n<p>A - global constant, start of the screen memory (1024)</p>\n<p>A$ - string used to position cursor back left on a single dungeon chamber vertical draw</p>\n<p>B - on dungeon generation, prints row of single chamber vertically up to Y</p>\n<p>B - on dungeon reveal, used to iteratate in horizontal position\u00a0</p>\n<p>B$ - global constant, string with dungeon floor pattern used while drawing a single chamber</p>\n<p>C - on main loop, joystick position state (-1 for left, 1 for right, otherwise 0)</p>\n<p>C$ - string used to position cursor back up on dungeon chamber draw so the next chamber can be drawn next to it</p>\n<p>D - on main loop, joystick position state (-1 for up, 1 for down, otherwise 0)</p>\n<p>D$ - on dungeon generation, builds one row of a dungeon chamber with randomised object</p>\n<p>E - global variable, player position, reset to screen memory location 1270 for each level</p>\n<p>E$ - string with all objects in the following order: floor (102), gold (90), creature (65), health potion (43), stairs (61)</p>\n<p>F - global constant of 40</p>\n<p>F$ - global constant, sets position and light blue colour for the HUD</p>\n<p>G - on dungeon generation, used to iterate for the first or the second row of chambers</p>\n<p>G - on creature movement, switch between 0 and 1 to slow down creature movement</p>\n<p>H - on player move, calculates destination position in order to see if player can move there</p>\n<p>I - on dungeon generation, increments until 5 chambers are drawn horizontally</p>\n<p>I - on dungeon reveal, used to iterate in vertical position</p>\n<p>J - global variable, value of joystick port 2</p>\n<p>K - screen colour address offset by the starting position of player</p>\n<p>L - on dungeon reveal, calculates position to reveal in order to check if there's any creature to activate</p>\n<p>M - global variable, amount of gold</p>\n<p>N - global variable, hit points (or eNergy)</p>\n<p>O - on creature movement, calculate new position of creature that follows player (combines horizontal and vertical sign in range -41:41 to 41:41)</p>\n<p>P - on creature movement, check if relative position of creature and player are different horizontally</p>\n<p>Q - on creature movement, result of PEEKing a screen character to check if creature can move there, or if player to attack is there</p>\n<p>R - global variable, dungeon level</p>\n<p>S - global constant, floor character (102)</p>\n<p>T - on player move, gets screen value for player destination position to see if player can move there</p>\n<p>U - on creature movement, round player's vertical position against screen grid (40 blocks per row resolution)</p>\n<p>V - global constant, screen border colour address</p>\n<p>W - on creature movement, round creature's vertical position against screen grid (40 blocks per row resolution)</p>\n<p>X - on dungeon generation, randomised size of a chamber (min: 2, max: 6)</p>\n<p>X$ - clear screen and offset position to draw a dungeon level</p>\n<p>Y - on dungeon generation, randomised size of a chamber (min: 2, max: 6)</p>\n<p>Z - global constant, joystick port 2 address</p>\n\n<p>## Scopes</p>\n<p>- on dungeon generation</p>\n<p>- on main loop</p>\n<p>- on player move</p>\n<p>- on dungeon reveal</p>\n<p>- on creature movement</p>\n\n<p>## Creature movement</p>\n<p> Simplified condition to move to a field if PEEK(screen) &gt; 61</p>\n<p> Do not move if:</p>\n<p> - player (24)</p>\n<p> - wall (32)</p>\n<p> - health potion (43)</p>\n<p> - stairs (61)</p>\n<p> Move if:</p>\n<p> - another creature (65)</p>\n<p> - gold (90)</p>\n<p> - floor (102)</p>\n\n<p>## Code line by line</p>\n<p>Line 0:</p>\n<p>- Define function to return randomised number within the range 1 to N</p>\n<p>- Initialise global constants in the following order: A, F, K, S, V, Z, A$, B$, C$, E$, X$</p>\n<p>- Set screen colour and border to black</p>\n<p>- Set initial hit points to N=10</p>\n<p>- Define in Z$ the position and the colour of HUD</p>\n\n<p>### Line 1 (dungeon generation):</p>\n<p>- Set initial position of player's character to E=1270</p>\n<p>- Dungeon generation begins</p>\n<p>- Clear the screen and set the position of dungeon (set in X$, then TAB(6))</p>\n<p>- Increase dungeon level by 1 with R=R+1</p>\n<p>- Outer `FOR G=0 TO 1` loop to generate inner loop twice (for two rows of chambers)</p>\n<p>- Inner `FOR I=1 TO 5` loop to generate 5 chambers horizontally</p>\n<p>- Randomise width (X) and height (Y) of a single chamber</p>\n<p>- DATA line for global constants `A`, `F` and `K`</p>\n\n<p>### Line 2:</p>\n<p>- Set in D$ a single row of a chamber</p>\n<p>- In the middle of a chamber, one of the first 4 objects is randomly set (1 = floor, 2 = gold, 3 = creature, 4 = health potion) if it's not the last chamber in the row (result of `-(I&lt;5)*FNR(4)`)</p>\n<p>- Exceptionally, for the last chamber in a row, stairs object (5) is always set (result of `-(I=5)*5` is `-1`)</p>\n<p>- Nested `FOR B=1 TO Y` loop to draw a single chamber vertically</p>\n<p>- Print string of floor characters determined by chamber width (`X`) followed by printing an object only if it's the second row of a chamber (`-(B=2)+1`)</p>\n\n<p>### Line 3:</p>\n<p>- Continue printing the last floor object followed by moving cursor to the beginning of the next row determined by chamber width (`X`)</p>\n<p>- Next loop for `B` to continue drawing chamber vertically</p>\n<p>- Position cursor up to glue the next chamber to the previous one (using `C$`)</p>\n<p>- Next loop for `I` to continue the next chamber</p>\n<p>- Moving cursor at the start of the second row of 5 chambers - it starts in the different position thanks to randomisation width of 5 chambers from the first row</p>\n<p>- Next loop for `G` to continue drawing the second row of 5 chambers</p>\n<p>- As there was no free variable left, re-use variable `G` for slowing down creature movement, as it's out of the dungeon generation scope, setting it to 0</p>\n<p>- Jump to line 5 to reveal initially a surrounding area</p>\n\n<p>### Line 4 (main loop):</p>\n<p>- Print HUD with the following information: HP (hit points), L (current dungeon level), G (gold)</p>\n<p>- Read joystick in port 2</p>\n<p>- Set in variable `C` if joystick has been pushed in horizontal position</p>\n<p>- Set in variable `D` if joystick has been pushed in vertical position</p>\n<p>- If joystick directions not pressed, go to line 4</p>\n\n<p>### Line 5:</p>\n<p>- Check if player can move in the desired position by reading character from screen memory</p>\n<p>- No matter if player can move, clear it from the position by drawing the floor character (`POKE E,S`) and set colour to blue (`POKE K+E,6`)</p>\n<p>- Set new player position if field to enter is different than space character, otherwise it remains the same (`E=E-(T&lt;&gt;32)*(H-E)`)</p>\n<p>- Set player's colour (`POKE K+E,8`) and (`POKE E,24`) at the new screen position</p>\n<p>- Increment gold by 1 in case player steps on the gold object (`M=M-(T=90)`)</p>\n\n<p>### Line 6:</p>\n<p>- Increment player's hit points by 1 in case player steps on the health potion (`43`) and decrease by 1 if player gets into the fight with a creature (`65`) (calculated in one equation: `N=N-(T=43)+(T=65)`)</p>\n<p>- In case player steps on the stairs, go to line 1 to generate the next dungeon (`ON -(T=61) GOTO 1`)</p>\n<p>- Dungeon reveal starts here, by revealing 5x5 fields around the player character</p>\n<p>- Outer `FOR I=0 TO 4` loop to iterate vertically</p>\n<p>- Inner `FOR B=0 TO 4` loop to iterate horizontally</p>\n<p>- Calculate offset starting from the top-left corner (`L=I*F+B+E-82`), `82` because it offsets two fields up and left from current player's screen position\u00a0 (`40 * 2 + 2 = 82`)</p>\n<p>- If creature character found during reveal, jump to line 8 to move creature towards the player (`ON -(PEEK(L)=65) GOTO 8`)</p>\n\n<p>### Line 7:</p>\n<p>- Set colour of an object character on the screen (`POKE K+L,PEEK(L)`), by re-using character code as a colour (see: Tricks and notes, point 1)</p>\n<p>- Next loop for `B` to continue revealing area horizontally</p>\n<p>- Next loop for `I` to continue revealing area vertically</p>\n<p>- Use simple enable / disable mechanism to slow down creature's movement every second move of player (`G=1-G`)</p>\n<p>- Check if player has any hit points left, if yes, go to the main loop in line 4 (`ON -(N&gt;0) GOTO 4`)</p>\n<p>- Otherwise, display RIP and `END` the program</p>\n<p>- DATA line for global constants `S`, `V`,`Z` and`A$`</p>\n\n<p>### Line 8:</p>\n<p>- Calculate new position of creature to follow player character's screen position when in visible range, X and Y are extracted separately from single screen position value</p>\n<p>- Store screen character in `Q` variable</p>\n<p>- Draw floor on the screen in the place where creature character is (`POKE L,S`)</p>\n\n<p>### Line 9:</p>\n<p>- Set the colour of the floor so there's no artefact of creature's colour left on the screen on movement (`POKE K+L,6`)</p>\n<p>- In case creature can move to the given position, set it if movement (switched in `G`) is enabled (`L=L-(G&gt;61)*O*G`)</p>\n<p>- Draw creature character on the screen, note that `L` might be updated now (`POKE L,65`)</p>\n<p>- In case creature wanted to move to the position of player character, decrease player's hit points by 1 (`N=N+(Q=24)`)</p>\n<p>- Go back to line 7 (used are some sort of a RETURN to continue loop, see: Tricks and notes, point 3)</p>\n<p>- Data line for global constants `B$`, `C$`, `E$` and `X$`</p>\n\n<p>## Tricks and notes</p>\n<p>1. I had no space to set colours of different objects, but displaying everything in grey looked really dull. I used a trick to re-use the</p>\n<p>character and set it as the colour of the object. The result was better than I expected. The whole revealed area of the dungeon turned</p>\n<p>to blue, and all other objects, especially creatures, are visible.</p>\n<p>2. I determined which objects (screen characters) are the best to group them into one that creature can walk in or not. This way</p>\n<p>I improved a logic of checking if character is one of 3 (e.g. `-(Q=24 AND Q=32 AND Q=61)`) just into greater than a certain value (`-(Q&gt;61)`, see: line 9)</p>\n<p>Lot of characters saved!</p>\n<p>3. In line 6 I used `GOSUB` initially so I can get back to the loop, but then when game over was added, there is no way in BASIC to</p>\n<p>use `ON` in combination with `RETURN`. What helped was to use `GOTO` in line 6, and return to line 7 just with `GOTO`. I just</p>\n<p>needed to be sure that there won't be anything else remaining in the line 6 after the jump.</p>", "metacritic": null, "released": "2023-03-22", "tba": false, "updated": "2023-03-24T08:55:52", "background_image": "https://media.rawg.io/media/screenshots/b6d/b6dca8f3b776de0e408f809fb1360720.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 66, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Adventure"], "publishers": [], "esrb_rating": null}