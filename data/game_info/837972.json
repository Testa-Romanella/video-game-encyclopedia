{"id": 837972, "slug": "farm-with-code-javascript", "name": "Farm with Code / JavaScript", "name_original": "Farm with Code / JavaScript", "description": "Welcome to Farm with Code\r\n<p>In this game your task is to program a drone so it does farming and earns money for you. Epic battles, challenging monsters, amazing graphics, nostalgic music - all of these you'll find in some other game. In this one you'll write code in JavaScript.<br/></p>\n<p>This game is not for everyone:\u00a0it requires you to code, which not everyone can (and probably not everyone wants after a 72 hours of jamming) and it will take a relatively large (on jam game scale) amount of time to understand how it works, but if the idea of coding a farming drone sounds interesting - give it a try and let me know what you thing in the comments. Don't hesitate to ask questions - I'll answer all!</p>\r\nBefore you start\r\n<p>Paste better starting code: Gist\u00a0to the editor.\u00a0It is mostly the same, but it properly loops (farms and earns money indefinitely).</p>\r\nYou don't need to read this whole doc before you start playing, but I\u00a0suggest you skim through the headlines to get familiar with what's in the doc in case you need it later\r\nBasic gameplay\r\n<p>Move around map with WASD or arrow keys (map view needs to be focused - click on it). Press \"Center\" if you ever lose your island out of view (yeah, I had a big vision).</p>\n<p>Press \"Patch\"\u00a0to update your drone with the current version of the code in the editor.</p>\n<p>Be sure to play in fullscreen for more available space (Itch button at the bottom right of the game window).\r\n</p>\n<p>You can also change the vertical split of left/right (map/editor) views. There is a small icon at the bottom right of map view, which you can drag left/right to adjust horizontal sizes.</p>\r\nWarning\r\n<p>Game doesn't save it's state, but code is always auto-saved.<br/></p>\n<p>You can try to regenerate map if you want and tinker with numerous params, but be aware that any tiny move of any slider (except \"Moisture\" group) will wipe the current state (except code) and regenerate world from scratch.</p>\n<p>Most notably, you might want to test out various seeds: Map Gen =&gt; Island =&gt; Seed</p>\r\nHow it was made (video)\r\n<p>As you see, this is a pretty advanced game. If you are interested in a more advanced game-dev (unlike \"I added this cube to the scene, it was super hard\" kind of devlogs), you might like my YouTube channel:</p>\n<p>Videos take a ton of work, so I\u00a0don't post often (yet), but I hope I'll manage to make a video about this game, so if that sounds interesting and you liked the video about the maze - subscribe:)<br/></p>\r\nBut I\u00a0don't know JavaScript\r\n<p>If you are coming from C#/C++/Java, you should get the hang out JavaScript pretty quickly.\u00a0<strong>Most</strong>\u00a0things are the same:</p>\r\n\r\na = b * c + d * e // Variable assignment and expressions\r\nif (cond) { } else { } // Conditions\r\nwhile (cond) { } // Loops\r\narray[20] // Array indexing\r\nobj.x // Object field access\r\nMath.cos(0) // Calling functions\r\n<p>Here are the most notable differences to get quickly up to speed:</p>\n<ul><li>No typings in JavaScript\r\n</li><li>You define variables with `let` (normal variable) or `const` (constant):</li></ul>\r\n\r\n// C#:\r\nfloat x = length * Math.cos(angle);\r\n// JavaScript\r\nconst x = length * Math.sin(angle)\r\nlet y;\r\n<ul><li>Defining functions is different:\r\n</li></ul>\r\n\r\n// C#:\r\nfloat multiply(float a, float b) { return a * b; }\r\n// JavaScript: \r\nfunction multiply(a, b) { return a * b; }\r\n// Or (shorter syntax):\r\nconst multiply = (a, b) =&gt; a * b;\r\n<ul><li>Creating arrays is different:\r\n</li></ul>\r\n\r\n// C#: \r\nnew int[] { 1, 2, 3, 4 }\r\n// JavaScript\r\n[ 1, 2, 3, 4 ]\r\n<ul><li>You can just create objects \"out of thin air\", no need to pre-define classes, structs and other stuff:\r\n</li></ul>\r\n\r\n// C#:\r\nstruct Point {\r\n    float x;\r\n    float y;\r\n}\r\n// later:\r\nvar point = new Point { x = 10, y = 20 };\r\n// JavaScript:\r\nlet point = { x: 10, y: 20 };\r\nLogging\r\n<p>You can log into the console with:</p>\r\n\r\nconsole.log(obj1, obj2, obj3)\r\nconsole.warn(1009, 'is prime')\r\nconsole.error('something went wrong', 5 * 9)\r\n<p>It will output in your browser console (not in-game console), open it with \"Right Click on empty space\u00a0-&gt; Inspect element\" or Ctrl+Shift+I.\u00a0There are some commented out debug console.log's in the starter code.<br/></p>\r\nStarter code\r\n<p>The only two functions you\u00a0<strong>need</strong>\u00a0to code are at the end of the file: \"start\" and \"update\".</p>\n<p>`drone` object provides you with very\u00a0barebones control like setting motor \"force\", but if you want to fly to some point, you have to program it yourself, same if you want to sequence some \"jobs\" (e.g. fly to (200, 160)\u00a0<strong>then</strong>\u00a0plant). It's similar in this regard\u00a0to programming AI for your game: game engine provides you with\u00a0<strong>minimal per-frame</strong>\u00a0control and it's your task to keep track of what AI does to make sure it finishes jobs and not switches them every frame.\r\n</p>\n<p>The starter code contains this functionality for higher level drone\u00a0control with job sequencing, but you don't have to use it. If implementing job/time-sequencing system sounds interesting, you can remove all of the starter code and start from scratch:\r\n</p>\r\n\r\nfunction start(drone) { }\r\nfunction update(drone) { }\r\nMoving\r\n\r\nFly to given point once\r\nflyToJob(100, 200)\r\n// Patrols infinitely between given points\r\npatrolJob({x: 0, y: 10}, {x: 300, y: 20}, {x: 30, y: 400})\r\n\r\nBuying and selling\r\n\r\n// Buy maximum possible (money-wise and inventory-capacity-wise) amount of specified item\r\nbuyMaxJob('orangeSeed')\r\n// Buys up to specified amount of specified item\r\nbuyUpToJob('orangeSeed', 5)\r\n// Sells all of the specified item\r\nsellMaxJob('orange')\r\n// Note, example code buys 'orangeSeed', but sells 'orange' - those are different items\r\nWatering\r\n\r\n// The next two are without parameters,\r\n// because they act on the current location\r\nintakeWaterJob // intake water until waterContainer is full\r\nouttakeWaterJob // outtake water until waterContainer is empty\r\n// fly to given point then intake water\r\nintakeWaterAtJob(300, 400)\r\n// Water plants while patrolling between two given points\r\nwaterLineJob(new Point(10, 40), new Point(10, 200))\r\nPlanting and extracting\r\n\r\nplantJob('orangeSeed') // Plants given seed at the current tile\r\nplantAtJob('orangeSeed', 10, 80) // Fly to the specified point, then plant\r\nextractJob // Extracts whatever is on the current tile\r\nextractAtJob(10, 80) // Fly to specified location, then extract\r\nJob combiners\r\n\r\n// Following four jobs can have any number of parameters\r\n// Executes all jobs simultaneously, completes when at least one of them completes \r\nanyJob(patrolJob(p1, p2), outtakeWaterJob)\r\n// Same but completes when all jobs complete, continues to execute other jobs meanwhile\r\nallJob(job1, job2, job3, jobN)\r\n// Executes provided jobs in sequence once\r\nsequenceJob(job1, job2, job3, job4, jobN)\r\n// Executes jobs in sequence, but loops forever\r\nloopJob(job1, job2, jobN)\r\n// On a less abstract level, you have:\r\nperformAtJob(intakeWaterJob, x, y)\r\n// which creates a job which executes given job at a given location\r\nCombination examples from the starter code\r\n\r\nconst performAtJob = (job, x, y) =&gt; {\r\n    const destJob = flyToJob(x, y);\r\n    return sequenceJob(destJob, allJob(destJob, job));\r\n}\r\nconst extractAtJob = (x, y) =&gt; performAtJob(extractJob, x, y);\r\nconst patrolJob = (...points) =&gt; loopJob(\r\n    ...points.map(p =&gt; flyToJob(p.x, p.y))\r\n);\r\nDynamic world\r\n<p>World lives it's own life. Most notably:</p>\n<ul><li>moisture spreads to nearby tiles and evaporates</li><li>plants grow or decay and die (their health increases or decreases)</li></ul>\r\nMoisture\r\n<p>Moisture originates at water shores, spreads to adjacent tiles and evaporates from surface. It influences plant's health.</p>\n<p>Health change of a plant is proportional (although capped) to:</p>\r\n\r\ntile.moisture - 24\r\n<p>which means that when moisture is above 24, plants grow, and when it's below 24, plants decay.</p>\n<p>When plant's health reaches zero, it automatically dies. This is the same for the default grass as well as the plants your drone plants.</p>\n<p>I chose the value of 24 to be quite simple on the default-seed map, but if you want more difficulty, you might regenerate map with another seed (read \"Warning\" paragraph above).</p>\n<p>In any case, watering plants significantly increases their growth speed. For example, growth at `tile.moisture` = 72 compared to `tile.moisture` = 30 will be 8 times as fast ((72 - 24) / (30 - 24) = 48 / 6 = 8).</p>\r\nTiles\r\n<p>All tiles except water function essentially the same:\u00a0you can plant on any tile and you can extract any tile. Game idea is about farming, but nothing stops you from mining some rocks and selling them. Sample code sells grass.</p>\r\nDrone interface\r\n<p>All methods below (except setting `.motor.force`) operate for one frame only, so if you want to plant a seed, you need to call `.plant` numerous times until it is planted.</p>\r\nMemory\r\n<p>Any object you want to persist between drone patches. Anything saved here will stay the same throughout playthrough unlike top-level variables, which will re-initialize every patch.</p>\r\n\r\ndrone.memory = { patchNumber: 4 };\r\n<p>Memory is like HDD.<br/>Top-level variables - like RAM.</p>\n<p>Refreshing the page will wipe memory as well though.</p>\r\nGPS\r\n<p>Provides access to drones location and velocity</p>\r\n\r\ndrone.gps.position.x\r\ndrone.gps.position.y\r\ndrone.gps.velocity.x\r\ndrone.gps.velocity.y\r\nTime\r\n<p>Provides access to frame delta time (in milliseconds)</p>\r\n\r\ndrone.time.delta\r\n\r\nMotor\r\n<p>Allows to control drone's motor to make it move</p>\r\n\r\ndrone.motor.force = {\r\n  x: 1000,\r\n  y: 500,\r\n};\r\n<p>Force will be automatically capped at</p>\r\n\r\ndrone.motor.maxForce\r\n<p>You can also read from `drone.motor.force` if you need to.</p>\r\nWater container\r\n<p>Provides information to the state of drone water storage</p>\r\n\r\ndrone.waterContainer.currentAmount\r\ndrone.waterContainer.volume // maximum amount\r\n\r\nPump\r\n<p>Pump to move water in- and out- of water container.</p>\r\n\r\ndrone.pump.intakeSpeed\r\ndrone.pump.outtakeSpeed\r\ndrone.pump.intake()\r\ndrone.pump.outtake()\r\n\r\n<p>`.intake()` and `.outtake()` only affect one frame.</p>\r\nShovel\r\n<p>Your main tool, use it to plant seeds and gather crops.\u00a0Plant crops with:</p>\r\n\r\ndrone.shovel.plant(item: string | Item): boolean\r\n<p>It takes either seed's itemKey (string) or item (Item) as a parameter and returns whether the seed was planted this frame. Before the seed can be planted, the current tile needs to be destroyed (think of getting rid of weeds or/and preparing soil) = it's health needs to reach zero. This tile damaging\u00a0will happen automatically when you call `.plant`, but you need to continue calling `.plant` until you receive `true` which means that the seed has been planted.</p>\r\n\r\ndrone.shovel.damage()\r\n\r\n<p>You can also just `.damage()` tiles without trying to plant anything, if you want it for whatever reason.</p>\n<p>When you use `.plant()` or `.damage()` the current (under drone) tile is eventually destroyed no matter what was located on it. Typically, you want to gather crops instead of destroying them though. For that you use:</p>\r\n\r\ndrone.shovel.extract(): boolean\r\n\r\n<p>Same as `.plant()`, it returns whether a tile (any tile) was extracted this frame. And same, it doesn't happen instantly:\u00a0tile's firmness needs to reach zero before extraction will finally succeed. And same once again, `.extract()` will automatically decrease tile's firmness.</p>\r\nInventory\r\n<p>The stuff drone carries. Some properties (hopefully) need no explanation:</p>\r\n\r\ndrone.inventory.maxWeight\r\ndrone.inventory.totalWeight\r\ndrone.inventory.money\r\n<p>There are two ways to access information about specific item in your inventory:</p>\r\n\r\ndrone.inventory.content.&lt;itemKey&gt;: Item \r\ndrone.inventory.content[itemKey]: Item\r\ndrone.inventory.content.orangeSeed.quantity\r\ndrone.inventory.content['orangeSeed'].density\r\n\r\n<p>You can also enumerate all items with:</p>\r\n\r\ndrone.inventory.list\r\n<p>`.list` has the same content as `.content`, but shaped as an array and not an object</p>\r\nMarket\r\n<p>A\u00a0place to buy your seeds and sell your crops at shitty prices. How shitty exactly? These params will tell you:</p>\r\n\r\ndrone.market.buyPenalty\r\ndrone.market.sellPenalty\r\n<p>They were planned to be upgradable (as everything else ... I mean as everything else was also planned to be upgradable), but they are just equal 2 for now, which means that real purchase and sell price of an item is:</p>\r\n\r\nitem.price * drone.market.buyPenalty \r\nitem.price / drone.market.sellPenalty\r\n<p>You can access information about various items with:</p>\r\n\r\ndrone.market.availableItems.&lt;itemKey&gt;: Item\r\ndrone.market.availableItems[itemKey]: Item\r\ndrone.market.availableItems.orange.price\r\ndrone.market.availableItems['orange'].density\r\n<p>And as with the inventory, there is a field to get the same information in the form of an array:</p>\r\n\r\ndrone.market.availableItemsList\r\nItem\r\n<p>Both `.inventory` and `.market.availableItems` contain objects of type `Item`, which has the following fields:</p>\r\n\r\n// item: Item\r\nitem.key // key to access this item\r\nitem.name // human readable name\r\nitem.density // how much each unit of this item weights\r\nitem.price // per one unit\r\nitem.quantity // in case item is in your inventory\r\nFull list of available methods\r\n\r\ndrone.memory (get, set)\r\ndrone.gps.position (.x, .y)\r\ndrone.gps.velocity (.x, .y)\r\ndrone.time.delta\r\ndrone.motor.force (get, set)\r\ndrone.motor.maxForce\r\ndrone.waterContainer.currentAmount\r\ndrone.waterContainer.volume\r\ndrone.pump.intakeSpeed\r\ndrone.pump.outtakeSpeed\r\ndrone.pump.intake()\r\ndrone.pump.outtake()\r\ndrone.shovel.damage()\r\ndrone.shovel.plant(item: string | Item): boolean\r\ndrone.shovel.extract(): boolean\r\ndrone.inventory.maxWeight\r\ndrone.inventory.totalWeight\r\ndrone.inventory.money\r\ndrone.inventory.content.&lt;itemKey&gt;: Item\r\ndrone.inventory.content[itemKey]: Item\r\ndrone.inventory.list\r\ndrone.market.buyPenalty\r\ndrone.market.sellPenalty\r\ndrone.market.availableItems.&lt;itemKey&gt;: Item\r\ndrone.market.availableItems[itemKey]: Item\r\ndrone.market.availableItemsList\r\nitem.key\r\nitem.name\r\nitem.density\r\nitem.price\r\nitem.quantityAvailable items\r\nsoil: $1, 1kg\r\nstone: $25, 8kg\r\nsand: $0.9, 0.7kg\r\ngrass: $3, 0.3kg\r\ntree: $20, 15kg\r\norange: $4, 0.5kg\r\npotato: $2.5, 2kg\r\nrose: $75, 4kg\r\nsunflower: $6, 3.5kg\r\nwheat: $0.6666666666666666, 0.25kg\r\nwhiteFlower: $30, 3kg\r\nAvailable seeds<p>Seed is also an item, but the one which can be planted</p>\r\nTree seed: $140, 80kg // yes, this one is \"Tree seed\", mistake\r\norangeSeed: $80, 30kg\r\npotatoSeed: $75, 40kg\r\nroseSeed: $135, 250kg\r\nsunflowerSeed: $80, 120kg\r\nwheatSeed: $90, 25kg\r\nwhiteFlowerSeed: $105, 170kgShare your thoughts\r\n<p>Unusual games likes this are hard to get played during game jams. That means that if you've made it to actual game and tried to code something, I'd be triple glad to hear your thoughts. Criticism is welcomed:)</p>\n<p>I also understand that despite this long text, it might still be more confusing than it should be. Ask any question and I'll answer!</p>\n<p>See you in the comments</p>", "metacritic": null, "released": "2022-08-15", "tba": false, "updated": "2022-08-19T18:30:45", "background_image": "https://media.rawg.io/media/screenshots/3fa/3fae5dc1b25b336fb46ddc5f5867f3c8.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 19, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Igor Konyakhin"], "genres": [], "publishers": [], "esrb_rating": null}