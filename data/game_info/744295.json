{"id": 744295, "slug": "100-line-maze-by-roepipi", "name": "100-line maze by RoePipi", "name_original": "100-line maze by RoePipi", "description": "<p>For\u00a0Category \"PUR-80\"</p>\n<p>Title: \"100-line maze\"</p>\n<p>Platform: Commodore 16 / Plus/4</p>\n<p>Language: Commodore BASIC V3.5</p>\n\n<p>INTRODUCTION</p>\n<p>============</p>\n<p>Wander through a binary maze (editable through program line 0), optionally measure your time.</p>\n\n<p>FEATURES</p>\n<p>========</p>\n<p>- Fast action</p>\n<p>- Joystick control (port 2 only)</p>\n<p>- Diagonal movements</p>\n<p>- 100(+4) screen rows of maze (editable through program line 0)</p>\n<p>- Measure your time</p>\n\n<p>GAME INSTRUCTIONS</p>\n<p>=================</p>\n<p>After starting the program, a 33-second rendering phase takes place, featuring some border color cycling. Then, the upper portion of a maze appears with your character in the middle of the screen.</p>\n<p>Using joystick in port 2, move your character in the possible 8 directions, avoiding the walls. (They're not lethal though.) You can only step on the dots. If you reach the edge of the maze, you can't move further that way. Your aim is to reach the very bottom of the maze, the 104th screen line. If you succeed, the game displays your playing time (in 1/60th seconds), which you can compare to other players' runs.</p>\n\n<p>PROGRAM LINES OVERVIEW</p>\n<p>======================</p>\n<p>Use the LIST command to view the program lines. You can use the LIST from-to syntax to list certain intervals, eg. LIST 1-5.</p>\n<p>0 set map string</p>\n<p>1-5 init &amp; calculations</p>\n<p>6 display initial screen, basic binary wall patterns data, joystick directions data, reset timer</p>\n<p>7 loop: determine player move</p>\n<p>8 scroll screen up or down</p>\n<p>9 draw a line of the map; loop end, finish check</p>\n\n<p>VARIABLES</p>\n<p>=========</p>\n<p>A, B, C, D, I loop variables</p>\n<p>const A$(0-3) basic binary wall patterns (2-bit)</p>\n<p>const B$(0-255) binary wall patterns (8-bit)</p>\n<p>const E$ ESC char</p>\n<p>const H$ HOME char</p>\n<p>const K ROM read switch poke address (1177)</p>\n<p> M map line to draw (0-115)</p>\n<p>const M$ map, 5*13=65 char</p>\n<p>const M$(0-103) map rows gfx</p>\n<p>const O chargen ROM base address (53248)</p>\n<p>const P player poke code (88)</p>\n<p>const R player poke address row start (3552)</p>\n<p>const S space poke code (46)</p>\n<p> X player poke address (R - R+39)</p>\n<p> Y player Y coordinate (map row, 0-103)</p>\n<p>const W screen window poke base address (2022)</p>\n<p>const X,Y(0-8) joystick X,Y directions (-1/0/1)</p>\n\n<p>DETAILED CODE EXPLANATIONS</p>\n<p>==========================</p>\n<p>Note: Interconnected codes span across several lines. I marked the start line of the interconnected statements. Complex loops are expanded.</p>\n<p>Also note that I use decimal dots (\".\") everwhere instead of \"0\" to gain extra speed! (BASIC 3.5 processes them faster)</p>\n<p>LINE 0</p>\n<p>------</p>\n<p>// set maze map data, each line is 5 characters, freely editable</p>\n<p>M$=\"(5*13=65 chars of map data)\"</p>\n<p>// read basic binary wall patterns (2-bit: \"..\", \".W\", \"W.\", \"WW\")</p>\n<p>FOR A=. TO 3:READ A$(A):NEXT</p>\n<p>LINE 1</p>\n<p>------</p>\n<p>// read movement data for the 8 possible joystick directions (combinations of -1;0;1)</p>\n<p>FOR A=1 TO 8:READ X(A), Y(A):NEXT</p>\n<p>// set space character (screen code)</p>\n<p>// FUN TIP: if set to 32 (space) and you set basic binary wall patterns at line 6 accordingly (\"\u00a0 \", \" W\", \"W \", \"WW\"), you can move upwards infinitely :)</p>\n<p>S=46</p>\n<p>// set HOME char, for line 9, to spare 2 characters there</p>\n<p>H$=\"{home}\"</p>\n<p>// set player screen address row start (column 0 on line 12)</p>\n<p>R=3552</p>\n<p>// player will start at center of screen</p>\n<p>X=R+20</p>\n<p>// binary wall pattern data will require 256 different values; map will render into 104 lines</p>\n<p>DIM B$(255), M$(103)</p>\n<p>LINE 2</p>\n<p>------</p>\n<p>// initially, player will start at line 11 of map</p>\n<p>Y=11</p>\n<p>// set player screen poke code</p>\n<p>P=88</p>\n<p>// set ROM read switch poke address, used to fetch character data</p>\n<p>K=1177</p>\n<p>// set ROM character data base address, also used to flag line draw done at line 9 (var M)</p>\n<p>O=53248</p>\n<p>// initial \"don't draw\" flag; at start, we will display a screenful of lines at once instead</p>\n<p>M=O</p>\n<p>// Esc code shorthand to spare some characters later</p>\n<p>E$=CHR$(27)</p>\n<p>// disable BASIC scroll to be able to fill last columns of screen, clear screen, display message to user and setting cursor position for displaying initial map correctly later</p>\n<p>PRINT E$\"M{clear}{down} RENDERING...{up}\"</p>\n<p>// fill binary wall pattern data based on basic patterns and loop variable I</p>\n<p>FOR A=. TO 3</p>\n<p>::::FOR B=. TO 3</p>\n<p>::::::::FOR C=. TO 3</p>\n<p>::::::::::::FOR D=. TO 3</p>\n<p>::::::::::::B$(I)=A$(A)+A$(B)+A$(C)+A$(D)</p>\n<p>::::::::::::I=I+1</p>\n<p>NEXTD, C, B, A</p>\n<p>LINE 3</p>\n<p>------</p>\n<p>// poke address to set screen window top row; used for setting bottom row as well (2021) later</p>\n<p>W=2022</p>\n<p>// loop through map columns</p>\n<p>FOR B=. TO 4</p>\n<p>::::// loop through map rows</p>\n<p>::::FOR A=. TO 12</p>\n<p>::::::::// fetch the CHR$ code of one character from M$ (map string) based on A and B</p>\n<p>::::::::C=ASC(MID$(M$, A*5+B+1, 1))</p>\n<p>::::::::// convert CHR$ code to screen code (expressions in brackets evaluate to -1 if true and 0 if false)</p>\n<p>::::::::C=C+(C&gt;63)*64+(C&gt;191)*64</p>\n<p>::::::::// loop through character shape lines</p>\n<p>::::::::FOR D=. TO 7</p>\n<p>::::::::::::// set reading from ROM (NOTE: running on Plus/4, you MUSTN'T use string variables or anything that uses upper (&gt;$8000) memory addresses while this is active)</p>\n<p>::::::::::::POKE K, 62</p>\n<p>::::::::::::// fetch a line of a character shape</p>\n<p>::::::::::::I=PEEK(O+C*8+D)</p>\n<p>::::::::::::// set reading from RAM back</p>\n<p>::::::::::::POKE K, 63</p>\n<p>::::::::::::// add new character line strings to the matching rows of the map strings array</p>\n<p>::::::::::::M$(A*8+D)=M$(A*8+D)+B$(I)</p>\n<p>::::::::NEXT</p>\n<p>::::::::// display some border color cycles which then stops at a nice blue-green color</p>\n<p>::::::::COLOR 4, A+1, B+1</p>\n<p>::::NEXT</p>\n<p>NEXT</p>\n<p>LINE 5</p>\n<p>------</p>\n<p>// display the first 24 rows of the map (starts from the second row of the screen, fills the rest)</p>\n<p>FOR I=. TO 23:PRINT M$(I);:NEXT</p>\n<p>LINE 6</p>\n<p>------</p>\n<p>// basic binary wall patterns and joystick directions data</p>\n<p>DATA \"..\", \".W\", \"W.\", \"WW\", , -1, 1, -1, 1, , 1, 1, , 1, -1, 1, -1, , -1, -1</p>\n<p>// reset timer, used to display play time at the end</p>\n<p>TI$=\"000000\"</p>\n<p>LINE 7</p>\n<p>------</p>\n<p>// loop start</p>\n<p>DO</p>\n<p>::::// read joystick state at port 2, ignoring fire button (value 128)</p>\n<p>::::I=JOY(2) AND 15</p>\n<p>::::// A holds joystick X direction except if it's at either side of the screen and points outwards</p>\n<p>::::A=X(I)-(X=R AND I&gt;5)+(X=R+39 AND I&gt;1 AND I&lt;5)</p>\n<p>::::// B holds joystick Y direction</p>\n<p>::::B=Y(I)</p>\n<p>// continue only if target screen address holds a \"space\" code</p>\n<p>LOOP UNTIL PEEK(X+A+B*40)=S</p>\n<p>LINE 8</p>\n<p>------</p>\n<p>// place a \"space\" character at player's position</p>\n<p>POKE X, S</p>\n<p>// add horizontal movement to player's X position (even if it's zero)</p>\n<p>X=X+A</p>\n<p>// if there's vertical movement</p>\n<p>IF B THEN</p>\n<p>::::// add vertical movement to player's Y position</p>\n<p>::::Y=Y+B</p>\n<p>::::// print an Esc code to scroll screen contents up or down, based on Y direction</p>\n<p>::::PRINT E$CHR$(86-(B&lt;.))</p>\n<p>::::// place player character</p>\n<p>::::POKE X, P</p>\n<p>::::// set a screen window either to the top or bottom row, based on Y direction</p>\n<p>::::POKE W+(B&lt;.), (B&gt;.)*-24</p>\n<p>::::// will display 12 rows above or below player, based on Y direction</p>\n<p>::::M=Y+B*12</p>\n<p>::::// clear window (necessary; otherwise the interpreter crashes)</p>\n<p>::::SCNCLR</p>\n<p>LINE 9</p>\n<p>------</p>\n<p>// not enough place to do an IF, so display player character anyway</p>\n<p>POKE X, P</p>\n<p>// \"inline\" if using a DO-LOOP: display a map row only if we are inside dimensions 0-103</p>\n<p>DO WHILE M&gt;=. AND M&lt;104</p>\n<p>::::PRINT M$(M);</p>\n<p>::::// flag a \"don't draw\" (until M is set a valid value next time)</p>\n<p>::::M=O</p>\n<p>LOOP</p>\n<p>// unset window (2x HOME key)</p>\n<p>PRINT H$H$</p>\n<p>// if player is inside the map, go back to line 7</p>\n<p>IF Y&lt;103 THEN 7</p>\n<p>// else position just below the visible map and display elapsed time</p>\n<p>ELSE</p>\n<p>::::CHAR , ., 14, \"TIME:\"</p>\n<p>::::PRINT TI</p>\n<p>// end</p>\n<p>JOYSTICK DIRECTIONS</p>\n<p>===================</p>\n<p>8 1 2</p>\n<p>\u00a0\\|/</p>\n<p>7-0-3</p>\n<p>\u00a0/|\\</p>\n<p>6 5 4</p>\n<p>CONVERTING CHR$ TO SCREEN CODES</p>\n<p>===============================</p>\n<p>CHR$ -&gt; screen</p>\n<p>32-63 -&gt; 32-63 (same)</p>\n<p>64-95 -&gt; 0-31 (-64)</p>\n<p>96-127 -&gt; 64-95 (-32)</p>\n<p>160-191 -&gt; 96-127 (-64)</p>\n<p>192- -&gt; 64- (-128)</p>", "metacritic": null, "released": "2022-02-23", "tba": false, "updated": "2022-02-25T07:18:17", "background_image": "https://media.rawg.io/media/screenshots/7fb/7fbb005690e39f522595c6e5c0642b7b.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 13, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}