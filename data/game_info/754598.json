{"id": 754598, "slug": "nonsurdle", "name": "Nonsurdle", "name_original": "Nonsurdle", "description": "<p>tldr: Wordle except only using fake words.\u00a0Warning:\u00a0will not keep guesses or\u00a0progress if you leave the page. Like that other game, only has one puzzle per day. Post your favourite words and what you think their\u00a0definitions should be\u00a0on social media!</p>\n<p><strong>Description</strong><br/></p>\n<p>Okay so there's this word game right, and this person I know was all \"you should play this\", so I did. And like, it's okay and stuff? Pretty smooth game design, quality content, somewhat addictive, all that good juice. And I was thinking, and I was really thinking you gotta understand, and I\u00a0was totally all\u00a0\"yoo I\u00a0could make a version of this\". That's definitely not an idea that's played to death or anything. So I did,\u00a0with just one small teensy tiny little catch:\u00a0Nonsurdle only uses words that don't exist. Nice.</p>\n<p><strong>How It Works\u00a0(Math Nerd Version)</strong></p>\n<p>I used a two step text generation Markov Chain to generate 6000 fake words, with an almost 6000 word\u00a0long list of common 5 letter words as input. \u00a0We then play Wordle as normal using the new list as a dictionary.\u00a0I check to make sure no actual words are generated, although it's possible for more obscure words or words in other languages than English to be generated. The rng takes the date as a seed, so the dictionary changes each day, but is the same for each player every day. You could quite easily fool it by forwarding the day on your computer. Stopping this felt like more effort than it was worth, because why would anyone want to cheat at some obscure\u00a0game on the interwebs?\u00a0</p>\n<p><strong>How It Works\u00a0\u00a0(Normal Person Version)</strong></p>\n<p>I want you to consider a word as a list of letters in order.\u00a0If you think about it, every letter has some frequency of following every other letter. For example, the pair\u00a0\"cz\" is significantly less common than \"ch\". Therefore, the frequency of an \"h\" after a \"c\" is higher than that of a \"z\". The theory behind the random word generation is to follow this through logically. It generates words one letter at a time, using letters that follow the previous letter based on the probabilities of each letter following the previous letter in normal English. The probabilities are\u00a0generated by reading a list of nearly 6000 common 5 letter words, and counting how often each letter follows every other letter.\u00a0The program uses that to generate a list that looks something like:\u00a0\"a\" -\u00a0\"a\" 0.01, \"b\" 0.04, \"c\" 0.02\", etc.</p>\n<p>(Sidenote:\u00a0This is an example of a Markov chain, a system that has states and probabilities of going from each state to another state. The letters are the states, and the path after letting it run for 5 steps is the word. Markov chains are a powerful tool, and can be applied to a variety of problems besides this.)</p>\n<p>Now, some of you might have already spotted a problem with this. When generating the next letter, it only considers the previous letter. So, it might start by picking an \"r\". It might then notice that \"rt\" as seen\u00a0in \"chart\" is a somewhat common pair, and so pick a \"t\" as the next letter. It might then look at the \"t\" as see that \"tripe\" is a word, and pick \"r\" as the next letter. It could repeat this 5 times, generating \"rtrtr\" as the word, which is clearly unpronounceable gibberish. Since my goal was for words that kind of look real and could probably be pronounced, this is clearly unacceptable (and was happening way too often in my test runs).</p>\n<p>Which leads us to our next innovation: a two step Markov chain. This is really just a fancy way of saying that we consider the previous two letters instead of just the previous letter. Apart from that, it works just the same. So the computer has a list that reads like: \"aa\" - \"a\" 0, \"b\" 0.01, \"c\" 0.02\"... etc. It has one version for every two letter pair. And that, is how you use a Markov chain to generate words.\u00a0Actually building the wordle game on top of this is an exercise left to the reader. Have fun!</p>\n<p>I\u00a0could've used a three step chain for even more pronounceable words, but higher chains take more space and longer to run, and have less randomness. I\u00a0did some testing and decided two was the best option.</p>\n<p><strong>Credits</strong></p>\n<p>Game design by Cahatstrophe Games. Based on the\u00a0popular game\u00a0by Josh Wardle. Uses mathematics invented by Andrey Markov over a hundred years ago. Uses the font\u00a0Open Sans by\u00a0Steve Matteson, licensed under the Apache License 2.0.</p>\n<p>Follow me on\u00a0Twitter to be notified when I do things! Or itch, you could also follow me on itch. Either works.</p>", "metacritic": null, "released": "2022-03-07", "tba": false, "updated": "2022-03-14T16:35:00", "background_image": "https://media.rawg.io/media/screenshots/040/040b4f785d7f0d958f3f813e29d74c79.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 7, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Cahatstrophe Games"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}