{"id": 790407, "slug": "sap-1-emulator-assembly-programming", "name": "SAP-1 Emulator: Assembly programming", "name_original": "SAP-1 Emulator: Assembly programming", "description": "SAP-1 Emulator\r\n<p>A visual emulator written in Go using the\u00a0ebiten 2D game library. Enter Assembly instructions and manipulate memory values by entering instructions on the keypad interface. Run simple programs to add, subtract, and display results. Step through programs to watch how the registers behave at each step.</p>\n<p>The SAP-1 \"Simple As Possible\" emulator is inspired by the chapters about Simple As Possible Architecture from\u00a0<em>Digital Computer Electronics: 3rd Edition</em>\u00a0by Albert P. Malvino and Jerald A. Brown. It has been designed as a visual learning tool for fun and experimentation.</p>\n<p>Getting Started</p>\n<p>Program 1 (PRG-1) is loaded on startup, and contains a sample program that adds a few numbers, increments a few times, and displays the result on the numeric readout.\r\n</p>\n<p>To run a program, ensure the\u00a020 Hz\u00a0clock speed button of the keypad is highlighted by clicking it, and press the\u00a0RUN\u00a0button at the bottom right. You should see activity in among the Light-emitting Diode (LED) banks to the right as the computer executes the program. After a moment, the result should be displayed on the digital numeric readout at the top right.\r\n</p>\n<p>Once the program has reached the Halt command (HLT), it will stop and the\u00a0STOP\u00a0button will illuminate. At this point, you can press\u00a0RUN\u00a0to run the program again.\r\n</p>\n<p>Binary, Hexadecimal, and Decimal Numbers</p>\n<p>SAP-1 provides a keypad with hexadecimal input (0-F, which is 0-15 in decimal).\r\n</p>\n<p>SAP-1 represents Machine Code (M. Code) in binary as MSB (Most Significant Bits) and LSB (Least Significant Bits). The binary value range is 00000000 - 11111111, or 0-255 in decimal\r\n</p>\n<p>SAP-1 represents Memory addresses in hexadecimal, and stores values in binary.\r\n</p>\n<p>Instructions</p>\n<p>Instructions consist of entering\u00a0<em>Mnemonics</em>\u00a0and sometimes a corresponding memory address in\u00a0hexadecimal\u00a0format.\r\n</p>\n<p>There are 5 instructions:\u00a0LDA,\u00a0ADD,\u00a0SUB,\u00a0OUT, and\u00a0HLT\r\n</p>\n<p>Three of the instructions,\u00a0LDA,\u00a0ADD, and\u00a0SUB\u00a0require a corresponding hexadecimal value to be entered on the keypad. When these instructions are selected, the 0-F keys of the keypad will highlight, indicating they are to be used to enter values of 0-15 for the desired location in memory used with the instruction.\r\n</p>\n<p>Read more about the individual instruction mnemonics below.\r\n</p>\n<p>Entering Program Instructions</p>\n<p>Instructions can be entered at the highlighted line in the\u00a0<em>Assembly</em>\u00a0window (ASM). Use the\u00a0UP\u00a0and\u00a0DOWN\u00a0keys to move the line cursor to a different line. Use\u00a0DEL LINE\u00a0to remove the highlighted line. Use\u00a0CLEAR ASM\u00a0to clear the entire contents of the ASM window.\r\n</p>\n<p>Whenever an instruction is entered on the keypad, the corresponding binary representation for the command and any memory address value will be represented in as binary digits in the Machine Code window (M. Code).\r\n</p>\n<p>Additionally, the same binary value will be shown along with the memory address where the command resides in the Memory window (RAM).\r\n</p>\n<p>When a program is executed, the Program Counter (PRG CTR) will start at \"0\" and load the first instruction from that memory address. As the program cycles, it will increment the P CTR, and subsequent instructions will be loaded from RAM address 1, 2, 3 and so on, until the program reaches a HLT, or until reaching address 15, after which the program will wrap around and continue to run from 0.\r\n</p>\n<p>LDA</p>\n<p>Usage: LDA [address]\r\n</p>\n<p>Example: LDA 0xF\r\n</p>\n<p>Key Pad Entry: LDA + 0 thru F\r\n</p>\n<p>LDA stands for \"Load Accumulator\", and will populate a value from memory into the accumulator, known as \"REG A\" (Register A).\r\n</p>\n<p>The instruction accepts a single hexadecimal input, which corresponds to the memory address of the value to load.\r\n</p>\n<p>ADD</p>\n<p>Usage: ADD [address]\r\n</p>\n<p>Example: ADD 0xE\r\n</p>\n<p>Key Pad Entry: ADD + 0 thru F\r\n</p>\n<p>ADD stands for \"Add\", and will take the value at specified memory address and move it to the buffer register, known as \"REG B\" (Register B). During program execution, the contents of\u00a0REG B\u00a0will be summed with the contents of\u00a0REG A, and will be indicated in the Sum Register (SUM). The value from\u00a0SUM\u00a0will then be moved to\u00a0REG A\u00a0where it can be used later in the program.\r\n</p>\n<p>The instruction accepts a single hexadecimal input, which corresponds to the memory address of the value to use.\r\n</p>\n<p>SUB</p>\n<p>Usage: SUB [address]\r\n</p>\n<p>Example: SUB 0xD\r\n</p>\n<p>Key Pad Entry: SUB + 0 thru F\r\n</p>\n<p>SUB stands for \"Subtract\", and will take the value at specified memory address and move it to the buffer register, known as \"REG B\" (Register B). During program execution, the contents of\u00a0REG B\u00a0will be subtracted from the contents of\u00a0REG A, and will be indicated in the Sum Register (SUM). The value from\u00a0SUM\u00a0will then be moved to\u00a0REG A\u00a0where it can be used later in the program.\r\n</p>\n<p>The instruction accepts a single hexadecimal input, which corresponds to the memory address of the value to use.\r\n</p>\n<p>OUT</p>\n<p>Usage: OUT\r\n</p>\n<p>Example: OUT\r\n</p>\n<p>Key Pad Entry: OUT\r\n</p>\n<p>OUT stands for \"Output\", and will take the contents from\u00a0REG A\u00a0and display the numeric equivalent on the digital numeric readout in decimal form.\r\n</p>\n<p>The instruction does not accept any inputs.\r\n</p>\n<p>HLT</p>\n<p>Usage: HLT\r\n</p>\n<p>Example: HLT\r\n</p>\n<p>Key Pad Entry: HLT\r\n</p>\n<p>HLT stands for \"Halt\", and will immediately stop the program when executed. It is important to use\u00a0HLT\u00a0at the end of the program to ensure that execution does not run over into values set in\u00a0RAM, which would result in computer garbage.\r\n</p>\n<p>The instruction does not accept any inputs.\r\n</p>\n<p>Setting RAM values</p>\n<p>In order for your program to have any meaningful output, you must supply values for\u00a0LDA,\u00a0ADD, and\u00a0SUB. This is done by reading values from\u00a0<em>Random Access Memory</em>\u00a0(RAM) locations. The values stored in\u00a0RAM\u00a0provide the program values to work with.\r\n</p>\n<p>Typically,\u00a0RAM\u00a0values are entered into\u00a0<em>High</em>\u00a0memory, that is, any memory address that comes after a \"Halt\" instruction (HLT). The values up to the point where\u00a0HLT\u00a0is entered are known as\u00a0<em>Low</em>\u00a0memory.\r\n</p>\n<p>Entering values into\u00a0<em>High</em>\u00a0memory requires four (4) key presses:\r\n</p>\n<p>RAM + Memory Address + MSB + LSB\r\n</p>\n<p>MSB =\u00a0<em>Most Significant Byte</em>, entered as 0-F on the keypad\r\n</p>\n<p>LSB =\u00a0<em>Least Significant Byte</em>, entered as 0-F on the keypad.\r\n</p>\n<p>Memory Range</p>\n<p>Memory addresses can hold up to 8 bits, with the MSB holding the 4 most significant bits, and LSB holding the 4 least significant bits.\r\n</p>\n<p>Example: if MSB = 1 and LSB = 0, then the MSB &amp; LSB =\u00a00001 0000, or 16 in decimal.\r\n</p>\n<p>Another example: if MSB = F and LSB = FF, then the MSB &amp; LSB =\u00a01111 1111, or 255 in decimal. 255 is the maximum value that can be stored in any\u00a0RAM\u00a0location.\r\n</p>\n<p>Reading Digital Numeric Display</p>\n<p>The 3 numeric digits at the top right show the decimal value moved from\u00a0REG A\u00a0to\u00a0BUS\u00a0when the\u00a0OUT\u00a0instruction is executed. The Digital Numeric Display (DND) can display decimal values from 0 to 255 before \"rolling over\" to 0 when reaching 256. After rolling over, the\u00a0DND\u00a0will continue to display values 0-255.\r\n</p>\n<p>For example, the following program will display 255 on the\u00a0DND, when\u00a0RAM\u00a0address \"F\" is set to\u00a0FF\u00a0(binary: 1111 1111).\r\n</p>\r\n\r\nLDA 0xF OUT HLT \r\n<p>Clock Speeds</p>\n<p>The SAP-1 can be run at 3 different speeds:\u00a02 Hz,\u00a020 Hz, and\u00a0MAX\u00a0by selecting the matching button on the keypad.\r\n</p>\n<p>You will notice the program and activity LEDs responding at different rates when choosing different clock speeds.\r\n</p>\n<p>MAX\u00a0will run the emulator at a maximum speed of the frame draw rate, which is dependent on system load and monitor refresh rates.\r\n</p>\n<p>Step Mode</p>\n<p>You can step through a program by pressing the\u00a0STEP\u00a0button at the bottom right. Each press of the\u00a0STEP\u00a0button will increment the Time Counter (TIME CTR) by one.\r\n</p>\n<p>Note: You can also set the \"STEP\" button on the keypad clock rates to disable the automatic clock advance when the RUN button is engaged. This is generally a good practice as it will prevent accidental runs when using step mode.\r\n</p>\n<p>Loading &amp; Saving Programs</p>\n<p>SAP-1 provides 4 program slots which can be accessed using the\u00a0PRG 1\u00a0thru\u00a0PRG 4\u00a0buttons on the keypad.\r\n</p>\n<p>The\u00a0SAVE PRG\u00a0button will save the currently selected program to a file matching the program number in the \"src\" directory that should have been included with the SAP-1 emulator. The contents of\u00a0RAM\u00a0will be saved in another file in the same directory.\r\n</p>\n<p>To load a program, simply click the appropriate PRG button. If you want to discard changes you have made, click the PRG buttton to refresh the previously saved state.\r\n</p>", "metacritic": null, "released": "2022-05-22", "tba": false, "updated": "2022-05-23T10:04:38", "background_image": "https://media.rawg.io/media/screenshots/34f/34f19a8051831b720ebec8994adc2a6a.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 38, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Negative(-11) Games Division"], "genres": ["Educational"], "publishers": [], "esrb_rating": null}