{"id": 560475, "slug": "route-81-by-marcos-retrobits", "name": "Route 81 by Marco's Retrobits", "name_original": "Route 81 by Marco's Retrobits", "description": "<p>ROUTE81<br/>=======</p>\n<p>BASIC 10-Liner videogame for the Sinclair ZX81<br/>==============================================</p>\n<p>Marco Varesio ([Marco's Retrobits](https://retrobits.itch.io/))<br/>[English language blog](https://retrobits.altervista.org/)<br/>[Italian language blog](https://somebitsofme.altervista.org)<br/>[YouTube channel](https://www.youtube.com/channel/UCWTxG8paNsOUEU5mPcNklXA)</p>\n<p>ROUTE81 is an action game for the Sinclair ZX81 8-bit home computer.\u00a0<br/>It is my second entry to the 2021 edition of the BASIC 10 Liner Contest.<br/>The game has been entirely coded in BASIC language and the program is 10 lines long.<br/>Drive your shiny sports car `*` along the most iconic highway in computer history!\u00a0<br/>Avoid the other cars `o` and going off the road.<br/>Controls: steer your car with \"o\" (left) and \"p\" (right).</p>\n<p>Gameplay video: </p>\n<p>Play online: https://somebitsofme.altervista.org/rm-rf/site/?p=emu/jtyone&amp;l=2&amp;tzx=emu/soft/zx...<br/></p>\n<p>Program description<br/>===================</p>\n<p>The player's car occupies the top line of the screen, while the road and the other cars\u00a0<br/>scroll up by one line at each iteration of the main game loop.\u00a0<br/>Whenever the scrolling occurs, a new road segment (with random horizontal displacement from the previous one)\u00a0<br/>and a new opponent car (at random horizontal position within the road segment) are printed at the bottom of the screen. Then the player's car horizontal position is updated based on the pressed key and printed and collision check is performed.</p>\n<p>Variables<br/>---------</p>\n<p>R: Road segment horizontal position<br/>X: Player's car horizontal position<br/>C: Collision detection</p>\n<p>Program listing<br/>---------------</p>\n<p>The program is 10 lines long and each line is shorter than 80 characters.\u00a0<br/>The most challenging aspect of ZX81 BASIC programming is that the interpreter only allows one statement per line.<br/>In the following listing, which can be used with the ZXText2P tool to make a \".P\" file suitable for loading into X81 emulators,<br/>block graphic characters have been replaced with the corresponding escape sequences made up of standard characters.<br/>Therefore, the program looks longer than it actually is. See the ZXText2P documentation for details:<br/>http://freestuff.grok.co.uk/zxtext2p/index.html</p>\n<p>1 LET R=11<br/>2 LET X=R+2<br/>3 PRINT AT 21,0;\"\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\\.'\u00a0 \u00a0\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\\'.\"<br/>4 LET R=R+(R&lt;20)*RND-(R&gt;2)*RND<br/>5 SCROLL<br/>6 LET X=X+(INKEY$=\"P\")-(INKEY$=\"O\")<br/>7 PRINT AT 21,R;\"\\##\u00a0 \u00a0 \u00a0 \u00a0\\##\";AT 21,R+1+RND*6; \"o\";AT 0,X;<br/>8 LET C=(PEEK(PEEK 16398+256*PEEK 16399)&lt;&gt;0)*105<br/>9 PRINT CHR$(23 + C)<br/>10 GO TO 4 + C*10</p>\n<p>Source code explained<br/>---------------------</p>\n<p>Initializations</p>\n<p>The first two lines initialize the road segment horizontal offset R and player's car position X.<br/>Line 3 prints the \"start line\" at the bottom of the screen.</p>\n<p>Game loop</p>\n<p>Line 4 calculates the position of the next road segment to be printed, with random displacement from the previous one.\u00a0<br/>The program also ensures that the road segment stays within the screen, i.e. the left side of the road segment stays within columns 2 and 20.<br/>Line 5 SCROLLs the display up one line.<br/>Line 6 calculates the new player's car horizontal position, depending on the pressed key.\u00a0<br/>If \"P\" is pressed, the car moves right; if \"O\" is pressed, the car moves left.\u00a0<br/>Line 7 prints at the bottom of the screen (row 21):<br/>* the new road segment at the previously calculated horizontal position R;<br/>* a new opponent car, at a random position within the road sides.<br/>Finally, it sets the print position to the new player's car position.<br/>Line 8 performs collision detection, by reading the value at current print position\u00a0<br/>(which corresponds to the new player's car position as effect of the last AT in line 7) in the display file,\u00a0<br/>by means of the DF_CC system variable.\u00a0<br/>A collision occurs whether the position in which the car will be printed contains a character different than space\u00a0<br/>(whose character code is 0); in this case, C is set to 105. Conversely, if there is no collision, C is set to 0.\u00a0<br/>C value meaning will be clear by looking at the next statements.<br/>Kudos to [kmurta](http://zx81.eu5.org/) for pointing out that DF_CC system variable can be PEEKed in order to determine what character is\u00a0 displayed at a particular print position.<br/>Line 9 prints the car at the print position set in line 7, i.e. vertical position 0 (top line) and horizontal position X calculated in line 6.<br/>If a collision occurs (C=105), the printed character is the full block, whose code is 23 + C = 23 + 105 = 128.\u00a0<br/>Otherwise, if there is no collision, the printed character is \"*\", whose code is 23 + C = 23 + 0 = 23.<br/>If no collision occurs, line 10 jumps back to the beginning of the game loop at line 4;\u00a0<br/>otherwise, in case of collision, the program jumps to a non-existing line, causing the program to exit with code 0.</p>\n\n<p>Enjoy your drive!</p>", "metacritic": null, "released": "2021-02-15", "tba": false, "updated": "2021-02-19T10:31:33", "background_image": "https://media.rawg.io/media/screenshots/f15/f15372080b3d68197df6f5875c1d8c18.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Racing"], "publishers": [], "esrb_rating": null}