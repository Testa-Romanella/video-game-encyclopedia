{"id": 918706, "slug": "cyberpunk-pathfinder", "name": "Cyberpunk: Pathfinder", "name_original": "Cyberpunk: Pathfinder", "description": "using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\npublic class PlayerMovement : MonoBehaviour\r\n{\r\n    private Rigidbody2D rb;\r\n    private BoxCollider2D coll;\r\n    private SpriteRenderer sprite;\r\n    private Animator anim;\r\n    [SerializeField] private LayerMask jumpableGround;\r\n    private float dirX = 0f;\r\n    [SerializeField] private float moveSpeed = 7f;\r\n    [SerializeField] private float jumpForce = 14f;\r\n    private enum MovementState { idle, running, jumping, falling }\r\n    [SerializeField] private AudioSource jumpSoundEffect;\r\n    private void Start() \r\n    {\r\n        rb = GetComponent&lt;Rigidbody2D&gt;();\r\n        coll = GetComponent&lt;BoxCollider2D&gt;();\r\n        sprite = GetComponent&lt;SpriteRenderer&gt;();\r\n        anim = GetComponent&lt;Animator&gt;();\r\n    }\r\n    private void Update()\r\n    {\r\n        dirX = Input.GetAxisRaw(\"Horizontal\");\r\n        rb.velocity = new Vector2(dirX * moveSpeed, rb.velocity.y);\r\n        if (Input.GetButtonDown(\"Jump\") &amp;&amp; IsGrounded())\r\n        {\r\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\r\n            jumpSoundEffect.Play();\r\n        }\r\n        UpdateAnimationState();\r\n    }\r\n    private void UpdateAnimationState()\r\n    {\r\n        MovementState state;\r\n        if (dirX &gt; 0f)\r\n                {\r\n                    state = MovementState.running;\r\n                    sprite.flipX = false;\r\n                }\r\n                else if (dirX &lt; 0f)\r\n                {\r\n                    state = MovementState.running;\r\n                    sprite.flipX = true;\r\n                }\r\n                else\r\n                {\r\n                    state = MovementState.idle;\r\n                }\r\n                if (rb.velocity.y &gt; .1f)\r\n                {\r\n                    state = MovementState.jumping;\r\n                }\r\n                else if (rb.velocity.y &lt; -.1f) \r\n                {\r\n                    state = MovementState.falling;\r\n                }\r\n            anim.SetInteger(\"state\", (int)state);\r\n            }\r\n        private bool IsGrounded()\r\n        {\r\n            return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, jumpableGround);\r\n        }\r\n}\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine;  public class cameracontroller : MonoBehaviour {     [SerializeField] private Transform player;      private void Update()     {         transform.position = new Vector3(player.position.x, player.position.y, transform.position.z);     } }\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.SceneManagement;  public class Finish : MonoBehaviour {     private AudioSource finishSound;      private bool levelCompleted = false;      private void Start()     {         finishSound = GetComponent&lt;audiosource&gt;();     }      private void OnTriggerEnter2D(Collider2D collision)     {         if (collision.gameObject.name == \"Player\" &amp;&amp; !levelCompleted)         {             finishSound.Play();             levelCompleted = true;             Invoke(\"CompleteLevel\", 2f);         }     }     private void CompleteLevel()     {         SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1);     } } &lt;/audiosource&gt;\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine; using TMPro;  public class ItemCollector : MonoBehaviour {     private int cherries = 0;      [SerializeField] private TextMeshProUGUI cherriesText;      [SerializeField] private AudioSource collectionSoundEffect;      private void OnTriggerEnter2D(Collider2D collision)     {         if (collision.gameObject.CompareTag(\"Cherry\"))         {             collectionSoundEffect.Play();             Destroy(collision.gameObject);             cherries++;             cherriesText.text = \"Cherries: \" + cherries;         }     } }\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.SceneManagement;  public class PlayerLife : MonoBehaviour {     private Rigidbody2D rb;     private Animator anim;      [SerializeField] private AudioSource deathSoundEffect;      private void Start()     {         rb = GetComponent&lt;rigidbody2d&gt;();         anim = GetComponent&lt;animator&gt;();     }     private void OnCollisionEnter2D(Collision2D collision)     {         if (collision.gameObject.CompareTag(\"Trap\"))         {             Die();         }     }     private void Die()     {         deathSoundEffect.Play();         rb.bodyType = RigidbodyType2D.Static;         anim.SetTrigger(\"death\");     }     private void RestartLevel()     {         SceneManager.LoadScene(SceneManager.GetActiveScene().name);     } } &lt;/animator&gt;&lt;/rigidbody2d&gt;\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine;  public class StickyPlatform : MonoBehaviour {     private void OnCollisionEnter2D(Collision2D collision)     {         if (collision.gameObject.name == \"Player\")                 {                     collision.gameObject.transform.SetParent(transform);                 }             }      private void OnCollisionExit2D(Collision2D collision)     {         if (collision.gameObject.name == \"Player\")         {             collision.gameObject.transform.SetParent(null);         }     } }\r\nusing System.Collections; using System.Collections.Generic; using UnityEngine;  public class WaypointFollwer : MonoBehaviour {     [SerializeField] private GameObject[] waypoints;     private int currentWaypointIndex = 0;      [SerializeField] private float speed = 4f;      private void Update()     {         if (Vector2.Distance(waypoints[currentWaypointIndex].transform.position, transform.position) &lt; .1f)         {             currentWaypointIndex++;             if (currentWaypointIndex &gt;= waypoints.Length)             {                 currentWaypointIndex = 0;             }         }         transform.position = Vector2.MoveTowards(transform.position, waypoints[currentWaypointIndex].transform.position, Time.deltaTime * speed);     } }", "metacritic": null, "released": "2023-01-31", "tba": false, "updated": "2023-02-03T12:16:32", "background_image": "https://media.rawg.io/media/screenshots/e08/e08160861eba8dfc90757cd460923b6f.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["CYoc7"], "genres": ["Platformer"], "publishers": [], "esrb_rating": null}