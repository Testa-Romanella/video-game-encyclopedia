{"id": 806937, "slug": "at-the-mountains-of-madness-itch", "name": "At The Mountains of Madness (itch)", "name_original": "At The Mountains of Madness (itch)", "description": "<p>Switch through three different characters to work together and escape the eerie Antarctic ruins in this short platform inspired by the titular story by\u00a0H.P. Lovecraft. Get to the top of the map and shoot down the ice block to seal off the shoggoths in the tunnels below.</p>\n<p>All assets and code were created by myself within the space of a single week.</p>\n<p>Controls</p>\n<ul><li>A/D or Left/Right to move</li><li>J, Up or Space to jump</li><li>K or Shift to enter aiming mode with the starting character</li><li>L or Enter to interact with the female character</li><li>I to switch characters</li><li>LMB to fire while aiming or to break ice with the large character</li></ul>\n<p>WARNING: The doors aren't 100% perfect, so make sure characters aren't standing under one when you activate it\u00a0or you'll have to quit and restart!</p>\n<p>The platforming code for this game is borrowed in large part from my earlier\u00a0Shell Platformer game, just\u00a0with a few upgrades. This game introduces several new and useful mechanics, most notably the character swap, aiming modes and hanging mechanics.\u00a0</p>\n<p>The character swap was by far the easiest mechanic to implement, and was done with the following code. The controlled character index simply cycles when I is pressed and, if the ice block has not been released, the camera is then set to follow the controlled character.</p>\n<p>Relevant character controller code:</p>\r\n\r\n// cycle controlled character\r\nif (keyboard_check_pressed(ord(\"I\")))\r\n{\r\n    controlling += 1;\r\n    if (controlling &gt; pc_count)\r\n    {\r\n        controlling = 1;\r\n    }\r\n}\r\n// camera follow controlled character\r\nif (!obj_breakable_slab.hanging)\r\n{\r\n    camera_set_view_target(view_camera[0], obj_breakable_slab);\r\n    timer += delta_time / 1000000;\r\n    if (timer &gt;= 3)\r\n    {\r\n    room_goto_next();\r\n    }\r\n    }\r\nelse if (controlling == 1)\r\n{\r\n    camera_set_view_target(view_camera[0], obj_pl1);\r\n}\r\nelse if (controlling == 2)\r\n{\r\n    camera_set_view_target(view_camera[0], obj_pl2);\r\n}\r\nelse if (controlling == 3)\r\n{\r\n    camera_set_view_target(view_camera[0], obj_pl3);\r\n}\r\n<p>The other two mechanics were far more difficult. The aiming mechanic required the use of a separate arm object, which is actually always swiveling invisibly in the background, but \u00a0can't fire unless the player is also aiming. The aiming is definitely something to clean up in any further editions to this game, as it is slow and awkward, but this was the best I could do on a time crunch.\u00a0</p>\n<p>Relevant player 1 code:</p>\r\n\r\nif (hsp == 0)\r\n{\r\n    if (key_interact &amp;&amp; place_meeting(x, y + 1, obj_collisionBox))\r\n    {\r\n        image_index = 4;\r\n        aiming = !aiming;\r\n    }\r\n    else if (!aiming)\r\n    {\r\n        image_index = 0;\r\n    }\r\n}\r\n<p>Most of the actual code is contained on the arm object -- the player simply starts aiming if they are stopped and the correct key is pressed. Once the player is aiming, the arm makes itself visible and has its fire functionality enabled.</p>\n<p>Relevant arm code:</p>\r\n\r\nimage_xscale = obj_pl1.image_xscale;\r\nif (image_xscale == 1)\r\n{\r\n    x = obj_pl1.x + 4;\r\n}\r\nelse if (image_xscale == -1)\r\n{\r\n    x = obj_pl1.x - 4;\r\n}\r\ny = obj_pl1.y - 11;\r\n// sets rotation of aiming arm\r\nif (keyboard_check_pressed(ord(\"D\")) || keyboard_check_pressed(vk_right))\r\n{\r\n    image_angle = 90;\r\n}\r\nelse if (keyboard_check_pressed(ord(\"D\")) || keyboard_check_pressed(vk_left))\r\n{\r\n    image_angle = 270;\r\n}\r\nelse if (image_xscale == 1)\r\n{\r\n    if (point_direction(x, y, mouse_x, mouse_y) &gt;= 0 &amp;&amp; point_direction(x, y, mouse_x, mouse_y) &lt;= 90)\r\n    {\r\n        image_angle = clamp(point_direction(x, y, mouse_x, mouse_y) + 90, 90, 180);\r\n    }\r\n    if (point_direction(x, y, mouse_x, mouse_y) &gt;= 290 &amp;&amp; point_direction(x, y, mouse_x, mouse_y) &lt;= 360)\r\n    {\r\n        image_angle = clamp(point_direction(x, y, mouse_x, mouse_y) + 90, 380, 450);\r\n    }\r\n}\r\nelse if (image_xscale == -1)\r\n{\r\n    if (point_direction(x, y, mouse_x, mouse_y) &gt;= 90 &amp;&amp; point_direction(x, y, mouse_x, mouse_y) &lt;= 250)\r\n    {\r\n    image_angle = clamp(point_direction(x, y, mouse_x, mouse_y) + 90, 180, 340);\r\n    }\r\n}\r\n<p>The fire function occurs when the mouse is pressed, and simply destroys any breakables\u00a0in the direction of the mouse click and\u00a0spawns in a bullet sprite\u00a0that moves in the same direction for some visual feedback.</p>\n<p>The most difficult functionality to implement --\u00a0and one that is admittedly not quite complete in this version of the game -- was the hanging pot mechanic. The current implementation may not be a sophisticated and accurate physical model, but I am quite proud I managed to get it working within the game's short development cycle and think it should serve as a good basis for improvement should I develop this prototype more in the future.</p>\n<p>Relevant rope code:</p>\r\n\r\nif (hanging)\r\n{\r\n    vsp = 0;\r\n}\r\nelse if (vsp &lt; maxFallSpd)\r\n{\r\n    vsp += grav;\r\n}\r\nif (instance_exists(anchor))\r\n{\r\n    hanging = 1;\r\n}\r\nelse\r\n{\r\n    hanging = 0;\r\n}\r\n<p>Effectively, if the rope's anchor has been destroyed, it will start falling. The current issue is that a rope must fall all the way to the ground and be destroyed\u00a0before anything \"attached\" to it will start falling. This results in some weird physics where pots can briefly hang in midair after their ropes have been shot out. Now that I can see the issue with the benefit of hindsight, I could likely fix this little\u00a0issue if I return to this prototype in the future.</p>", "metacritic": null, "released": null, "tba": false, "updated": "2022-06-21T02:12:45", "background_image": "https://media.rawg.io/media/screenshots/0db/0db8f76226cb817b8ee9d9f3d0badb40.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 12, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["skinnyK"], "genres": ["Platformer"], "publishers": [], "esrb_rating": null}