{"id": 567355, "slug": "soundtoy-prototype-2", "name": "Soundtoy Prototype 2", "name_original": "Soundtoy Prototype 2", "description": "<p>Download required (Wwise not supported in WebGL); Mac and Windows application\u00a0files available at bottom</p>\n\n<p>Controls:</p>\n<p>space = create new shape<br/>dlt/bksp = delete most recent shape<br/>click and drag shapes to move them<br/>ctrl/cmd + drag shape = rotate and transform<br/>alt + drag shape = change color<br/>esc = close application</p>\n\n<p>This project is essentially a basic, one-bar MIDI sequencer at 90bpm. When hit by a \"playhead\" (the large flat rectangular prisms moving across the screen), each shape plays a note on a synthesizer, the parameters of which are determined by its roundness (mixes between two different oscillator types) and color (increments the amount of frequency modulation). The note value is determined based on the black or white \"key\" the shape is currently on when it is hit, and increments up through the G major pentatonic scale from bottom to top.</p>\n\n<p>Acknowledgements:</p>\n<ul><li>The base procedural mesh generation for the shapes, which I adapted in order to be able to change from a sphere to a cube at runtime, was accomplished by following this Catlike Coding tutorial.</li><li>The gratuitous skybox is certainly not my own work - this was taken from the asset pack Polyverse Skies.</li></ul>\n\n<p>Wwise implementation notes:</p>\n<p>When a shape is hit, it\u00a0posts an event to Wwise, telling it to play\u00a0a blend container of 2 Wwise SynthOne objects. Roundness and color are both set as RTPCs with a value between 0 and 1; roundness changes the mix of this blend container (\"sphere\" including both sine tone oscillators, \"square\" using a square wave as the top oscillator), and color changes its frequency modulation value. The note value is determined based on the black or white \"key\" the shape is currently on, and then sent to Wwise in a very non-elegant way - it maps this as an RTPC, which then sets a switch group, which is then used to select between a range of 13 different MIDI notes (which were each exported as .mid files\u00a0from Logic) within a music switch container. (I was unable to find a way to send an explicit note value with a NoteOn message within Unity, but I would very much welcome any information on how to do that if possible!)</p>\n\n<p>Things in the original scope I\u00a0may revisit for the midterm or otherwise:</p>\n<ul><li>Implementing the \"playhead\" generation as an ocean wave (represented as a flat mesh with vertices being manipulated with a water shader)<ul><li>Floating mechanics for shapes on ocean mesh</li><li>Replacement of keyboard with subtle shading differences on sections of ocean</li></ul></li><li>Addition of moon object in upper right of screen<ul><li>Ability to drag moon closer/further to change \"tempo\" of playhead/waves (this isn't how ocean wave speed actually works, but it's hopefully\u00a0at least thematically coherent)</li><li>Ability to change moon's phase to change the scale used by the keyboard</li></ul></li><li>Ability to change size/base glow amount of shapes to change note velocity, reverb amount</li><li>General synth editing to add complexity to the sounds used, effects of parameter changes</li><li>Flexible, selection-based shape deletion</li><li>Probably some other things, I drastically overscoped this</li></ul>", "metacritic": null, "released": "2021-03-03", "tba": false, "updated": "2021-03-05T09:14:43", "background_image": "https://media.rawg.io/media/screenshots/b89/b89ca596f085d86d7e1a5a45a5ec6406.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 11, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC", "macOS"], "developers": ["evanwardell"], "genres": [], "publishers": [], "esrb_rating": null}