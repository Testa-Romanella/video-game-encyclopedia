{"id": 467830, "slug": "random-action-machinery", "name": "Random Action Machinery", "name_original": "Random Action Machinery", "description": "Built for GMTKJam 2020 \"Out of Control\"\r\n<p>Random Action Machinery (R.A.M.) is a sokoban puzzle game where the biggest obstacle is performing the moves you want. At each step, your pusher robot comes pre-programmed with 5 movement instructions, but by switching them to their alternate form you can reprogram the other instructions. For example, you might remove a Turn Right from the movement sequence, but this will now Swap two other movements around. By experimenting with the various combinations at each step, you might inch closer to success, or careen towards failure.\u00a0In this prototype sandbox, victory can be achieved by moving all 3 crates to any goal.\u00a0</p>\n<p>You can press R at any time to Reset.</p>\n<p>Font courtesy of\u00a0kenney.nl</p>\r\n\r\nDesign Process\r\n<p>R.A.M. was designed around the concept of complete, but reduced control. Before you hit execute it is completely deterministic what will happen. However, the options available to you are random, often unhelpful, and highly restricted.</p>\n<p>The original concept was to combine Robo Rally and Overcooked, and have you working to program a series of robots in a factory to work together to achieve some production goal. However, I deemed the scope of this to be outside of the possibilities of a 48-hour Jam. Instead, I settled on a sokoban style puzzle, and a single robot, as a decent proxy for understanding that design space.</p>\n<p>The concept proved a huge challenge around providing the right amount of difficulty for the player. When the player was provided with the movement actions, and the ability to freely order them, then success was trivial. The levels themselves would need to provide the challenge. To lean into the theme for the jam, I wanted to make the Controls be the challenge to overcome.<br/></p>\n<p>By introducing rearranging the sequence as an alternate function for the cards, rather than something directly under the players control, moving around under control became the obstacle. However, it also meant that the best way to play was often to remove all but one card and inch towards success one action at a time. This led to the creation of the rearrange limit, forcing you to have to enact at least 3 of the movement actions provided. This also halved the number of moves available to the player each step, making it a more managable 16 instead of 32.</p>\n<p>The game still suffers from it taking a long time to evaluate the possible moves. A single card being changed could have significant impact on the outcome. This is especially frustrating as all outcomes might be unhelpful, so rigoursly exploring all actions only leads to disappointment. I considered adding a Preview function, however I believe this would completely eliminate engaging with the puzzle in favour of blindly brute forcing which combination had the best result.</p>\n<p>One aspect of Robo Rally, the major inspiration of this concept, is that the goal is imprecise. As a race, you simply need to move roughly in the direction of the goal, which is a finish line rather than a single point. A sokoban however is exactly the opposite, requiring precision placement and movement to succeed. Were I to continue with this concept, I believe finding ways to make the goal action less precise would significantly help with make it satisfying to play.</p>", "metacritic": null, "released": "2020-07-12", "tba": false, "updated": "2020-07-13T17:52:57", "background_image": "https://media.rawg.io/media/screenshots/7f8/7f8db2b9a9473fc621d7598a853d3bc2.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["DynamicSporadic"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}