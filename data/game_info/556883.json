{"id": 556883, "slug": "queso-run-by-octasoft", "name": "Queso Run by Octasoft", "name_original": "Queso Run by Octasoft", "description": "<p>Queso Run<br/>Presented by Octasoft - Programmed by DD8 \u00a92021<br/>The Galactic Cheese Overlord, Charles E. Queso, needs more<br/>cheese dip and you are the pilot for the j ob. Along with your Snookie<br/>Co-pilot, Louie Lou-Baca, you must successfully pilot your trusty ship,<br/>the Millennial Falco, through the ever changing asteroid belt. There<br/>are 11 routes and 2 runs per route. Louie Lou-Baca sets you up with<br/>an easier run the first time through a route, but the second run i s<br/>always stickier. Beware of Route 11, Run 2; the Snookie must have<br/>been drinking alot when plotting that course. Finishing the 21 different<br/>playable Queso Runs takes skill and patience, but i s achievable by<br/>competent stick twiddlers. The Snookie says that Franz Yolo can fly<br/>them all without crashing and achieving the perfect Queso Run score<br/>of 2100 points. Are you as talented as the i nfamous Franz Yolo?<br/>Starting the game<br/>Ensure that there are no fastload/freeze cartridges plugged i nto your<br/>Commodore 64 or enabled i n your emulator. Plug your j oystick i nto<br/>Port 2, turn on or boot the machine and mount the .d64 file.<br/>Type Load \u201c*\u201d,8 and tap the Return key. When finished l oading, type<br/>Run and tap Return. The Snookie will plot the first route and away you<br/>go. To control the Millennial Falco, use your j oystick to move the ship<br/>left or right to avoid the asteroids. Finishing a run earns you 100<br/>points. Crashing subtracts 50 from your score. Crashing on the very<br/>first run of the very first route will start over on that route since you<br/>clearly need more practice twiddling your stick. A maximum of 2100<br/>points i s possible with no crashes on all 21 playable runs. 11-2 i s<br/>impossible, so make sure to check your score after 11-1.</p>\n<p>Developer notes<br/>I wanted to make a game that used a j oystick, and thought a vertical<br/>scroller with only l eft and right movement would work i f the code was<br/>fast enough. I also wanted i t to be smooth and playable. I think I<br/>accomplished these goals within the constraints of the competition.<br/>I am open to hearing any thoughts on i mproving the speed or<br/>efficiency of the code. I was i nspired to do a scroller by reddit user<br/>Jo3p\u2019s one l ine game. Oneliner 64 :: A complete arcade action game<br/>for the commodore 64 i n one single l ine of code : vintagecomputing<br/>Many thanks to Roman Werner and his wonderful code i n these<br/>competitions. I have l earned so much from l ooking through his code<br/>and breaking i t down to understand what was going on. I created my<br/>sprite compression based on his code i n Curse of the Aztec Temple<br/>http://www.kingroman.com/c64/CurseOfTheAztecTemple.zip from the<br/>2020 compo. I know he did not i nvent data compression, but i t was the<br/>first time I broke i t down and figured out what was happening.<br/>A critical piece I found for the j oystick routine was by user Pyrofer on<br/>Lemon64.com. w hat are your speedy j oystick reading routines i n<br/>BASIC - Commodore 64 (C64) Forum This array concept creates a<br/>very fast j oystick routine that works well i n Basic. In this program i t<br/>was one poke command with one addition calculation to update the<br/>sprite X position on the screen. The fewer commands and math, the<br/>faster i t runs, so this routine i s pretty quick.<br/>A huge shout out to Robin Harbron of the 8 -Bit Show And Tell<br/>YouTube channel. His videos on various aspects of Commodore Basic<br/>and optimizing code for speed proved quite helpful i n this project.</p>\n<p>General Program Explanation<br/>0 Sprite data i n a string format; base addresses for VIC,SID,Joystick<br/>1 Border/Background, Joystick array, Seed Random Number<br/>2 Decode sprite data and store, Route data l ocation constants<br/>3 String Variable for path, display text, Other variables and pokes<br/>4 Random values for Route data<br/>5 Sprite pointer, Sprite X&amp;Y starting values, display text to start Run<br/>6 Display Sprite; Game l oop start; Collision detection, Sprite Change<br/>7 Display path; Check Joystick and move Sprite; Finish Route Display<br/>8 Variable changes for next run; Display text and wait for fire button<br/>9 Collision sound; Clear Sprite; Check flags for end or return to l oop<br/>Detailed Program Explanation<br/>0 K$=\u201d.....\u201d - Sprite data i n ascii code embedded i n a string<br/>V=53248 - VIC base address<br/>F=54287 - Sound base address (voice 3)<br/>J=56320 - Joystick 2 base address<br/>C=0 - Route variable i nitialization<br/>1 POKEV+32,0 - Border color (black)<br/>POKEV+33,0 - Background color (black)<br/>DIMX(127) - Set up Joystick Array<br/>FORI=.TO6 - Loop to i nput j oystick movement data i nto array<br/>X(I+117)=4*((I&gt;3)-(i&lt;3)) - Define +/- 4 pixel move to l eft and right i n<br/>j oystick array<br/>NEXT - End of j oystick array l oop<br/>Z=RND(-3) - Seeding Random Number Generator<br/>G=2040 - Constant for Sprite pointer<br/>2 FORI=1TO46 - Loop to decode sprite data and poke i nto memory<br/>S=ASC(MID$(K$,I,1)) - Reading Sprite string &amp; convert to number<br/>S=S+36*(S&lt;65)-10*(S&gt;183) - Convert to Sprite data<br/>POKE848+I,S - Poke Sprite data i nto cassette buffer</p>\n<p>NEXT - End of decode l oop<br/>B=4096 - Variable for beginning of path data<br/>E=4496 - Variable for end of path data<br/>3 L$=\u201d...\u201d - String variable for path graphic characters<br/>C=C+1 - Increment Route<br/>PRINT\u201d..PLOTTING ROUTE\u201dC - Clear screen, yellow text color and<br/>display text<br/>POKEV+39,5 - Sprite color (green)<br/>L=1 - Variable for Run number<br/>POKEF+5,240 - Set Attack/Decay Envelope for Voice 3<br/>POKEF+9,15 - Set Volume to 15<br/>D=10 - Initial screen l ocation for path<br/>4 FORI=BTOE - Loop to create random path data<br/>D=D+INT(RND(1)*3-1) - Random number from -1to1 and add to D<br/>D=D+(D&gt;20)-(D&lt;5) - Set boundaries for l eft and right side of path<br/>POKEI,D - Store path data<br/>NEXT - End of path data l oop<br/>FORI=1TO20 - finish l ine data l oop<br/>POKEE+I,D - Store data for finish l ine<br/>NEXT - End of finish l ine data l oop<br/>Q=31 - Sprite to Background collision constant<br/>5 POKEG,13 - Set Sprite pointer to sprite l ocation i n cassette buffer<br/>POKEV+1,95 - Set Y position of sprite on screen<br/>PRINT\u201d.ROUTE\u201dC\u201dRUN\u201dL\u201d....\u201d - Yellow Text for current l evel and<br/>cursor down 6 rows, character color blue<br/>POKEV,8*PEEK(B)+41 - Set X position of sprite relative to path<br/>POKEV+Q,0 - Set collision to 0<br/>FORI=1TOG:NEXT - Pause<br/>6 POKEV+21,1 - Display Sprite<br/>P=9 - Set Pitch variable for crash sound<br/>FORI=BTOE+20 - Start of Play l oop<br/>IFPEEK(V+Q)=1THENT=T-50 - Collision detect and reduce score</p>\n<p>PRINT\u201d..OOPS! .\u201dT - Cursor Home and display crash text and score<br/>POKEG,10 - Display crash sprite (memory contents from 640-703)<br/>POKEF+3,129 - Start crash sound<br/>GOTO9 - GOTO9<br/>7 PRINTTAB(PEEK(I))L$ - Display path character string<br/>POKEV,PEEK(V)+X(PEEK(J)) - Update sprite X position<br/>using j oystick i nput and j oystick array values (-4 or +4 pixels)<br/>NEXT - End of Play l oop<br/>T=T+100 - Add 100 to score for finishing run<br/>PRINT\u201d..ROUTE\u201dC\u201dRUN\u201dL\u201dWIN!..\u201dT; - Display finish text and score<br/>8 L=L+1 - Increment l evel (Run)<br/>L$=\u201d....\u201d - New path graphic for Run 2<br/>PRINT\u201d. . PRESS FIRE .\u201d - Display text for button press continue<br/>WAITJ,16,16 - Wait for Fire button press<br/>PRINT\u201d.\u201d - Clear screen<br/>ONLGOTO,5,3 - Goto 5 for Run 2 and Goto 3 for new Route<br/>9 FORI=.TO43 - Start of Sound crash pitch down l oop<br/>P=P-.2 - Decrement Pitch .2<br/>POKEF,P - change pitch i n SID voice 3 register<br/>NEXT - End of Sound crash pitch down l oop<br/>POKEF+3,0 - Turn off Sid Voice 3<br/>POKEV+21,0 - Turn off sprite<br/>PRINT\u201d.\u201d - Clear Screen<br/>ON-(T&gt;0)GOTO5 - Start Route over after crash - If score i s 0 then<br/>this will skip to next l ine which i s nothing and game ends<br/>IFC=1ANDL=1THENT=0 - Reset score to 0 i f crash on route1 run1<br/>GOTO5 - Start Route over</p>", "metacritic": null, "released": "2021-02-09", "tba": false, "updated": "2021-02-12T07:30:32", "background_image": "https://media.rawg.io/media/screenshots/792/792ff29379e88418b058be3cd21c0ed5.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}