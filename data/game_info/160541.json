{"id": 160541, "slug": "protect-the-treasure", "name": "Protect the Treasure!", "name_original": "Protect the Treasure!", "description": "Click here to play the game (browser)\r\n<br/>I am making a-game-a-week(ish).\r\nThese will be short prototypes, very unpolished, probably broken.\r\n\n<p>A traditional arcade platformer to start.</p>\n<ul><li>Made in ~3.5hrs in\u00a0flowlab.io</li><li>Using assets built into the engine.</li></ul>\r\nNotes:\r\n<p>This is the first of a series of rapid protoype games, short dev times, aiming to create one-a-week(ish). The purpose of trying out a variety of tools and rapidly get to grips with the dev process.</p>\r\nThe game:\r\n<p>A super-simple, traditional arcade game, inspired purely by the assets the game engine provides and to chose something simple for the first game.</p>\r\nThe engine:\r\n<p>Flowlab is one of a number of game engine offerings where coding is entirely visual. Code 'blocks', each with a series of inputs and outputs are connected together by dragging connecting 'pipes' between them.\u00a0The result, for a handful of blocks, is quite elegant, but more than half-a-dozen blocks and it starts to become a confusing mess of blocks and connections.</p>\n<p>Many of the pros / cons of flowlab apply to any such visual codings systems. They allow ease of access, without the off-putting abstractness of coding, and all the syntax headaches and other annoyances\u00a0that coding comes with when starting out. By limiting the user to a set of predefined functions, all with well defined inputs and outputs, any mistakes are usually mistakes which can immediately be seen, and the process of adding, changing, iterating becomes very straightforward.</p>\n<p>Flowlab's style does provide one welcome addition to the visual coding genre, which is that 'blocks' can be arranged in such a way that parallel processes actually appear parallel to one another. This takes a bit of planning when designing, as moving one block moves all other blocks attached to its outputs, which makes re-arranging a pain, but, if done with a bit of care, can lead to quite intuitive layouts.</p>\n<p>Despite the use of visual coding, flowlab decides to go with more technical terminology in some places. Movement and physics relies upon 'motors', 'impulses' as well as pure positional changes, which are not immediately intuitive.</p>\n<p>There's no obvious debugging or logging system.\u00a0Although, due to the format, most issues are readily visible, I found that collision detection seems to be all over the place. I was never able to work out\u00a0whether this is a limitation in the engine or (more likely) a problem with how I built the game, and without clear debugging and logging, I was unable to track this down.</p>\n<p>Even so, it's a powerful system. A working(ish) game in just a handful of lunch breaks, albeit very bare-bones, without proper progression or much diversity. Even so, just the same amount of time again to fix that collision detection add some polish and some kind of progression, and this proves just how powerful simple game development kits have become now.</p>", "metacritic": null, "released": "2018-05-13", "tba": false, "updated": "2019-01-09T12:41:06", "background_image": "https://media.rawg.io/media/screenshots/ef3/ef39b08258d4170a356d7d4b46e7e347.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 12, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Nick Rush-Cooper"], "genres": ["Platformer"], "publishers": [], "esrb_rating": null}