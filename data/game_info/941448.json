{"id": 941448, "slug": "apothecary-of-hilnsdor", "name": "Apothecary of Hilnsdor", "name_original": "Apothecary of Hilnsdor", "description": "Overview\r\n<p>Apothecary of Hilnsdor is a hardcore potion crafting RPG. The focus of the game is on combining ingredients to create better and stronger potions with little hand-holding. These potions can then be used to complete quests, support AI allies in combat and solve puzzles in unique locations.\r\n</p>\r\n\u00a0Code Breakdown\r\n<p>The following sections will breakdown some of the code from this project. All the code from the project is available at this Git repo:\r\n</p>\n<p>[Github Repo](https://github.com/TSGameDev/AOH-CodeSnippet)\r\n</p>\r\nAI State Machine\r\n<p>The AI is controlled by a controller that makes use of a state machine, AI Stats and an AI Brain.\r\n</p>\n<p>Controller Script\r\n</p>\n<p>The purpose of the controller script, other than holding variables and setting up the state machine, is to implement the interaction with the players potions. It implements the IEffectable interface which provides functions for deciding how this entity will handle different potion interactions.</p>\n\n<p>The last use of the controller is to aid in implementing animation keyframe event call-backs. This is because there isn't a way for the state machine to perform functionality on animation events, so the controller hosts a delegate which can be set upon the entrance of a state which is then called by any animation. This is used to call the AI attack functionality in relevance to the animation.<br/></p>\n<p>The state and state machine base classes are standard, holding variables and functions that are commonly used throughout the states.</p>\n<p>[State Machine Base Class](https://github.com/TSGameDev/AOH-CodeSnippet/blob/master/Assets/_GameData/Script...)\r\n</p>\n<p>[State Base Class](https://github.com/TSGameDev/AOH-CodeSnippet/blob/master/Assets/_GameData/Script...)\r\n</p>\r\nStatus Effects\r\n<p>The status effect system makes use of scriptable objects to form the base of the status affect functionality, allowing easy creation of similar types, a tick system and the IEffectable interface.\r\n</p>\n<p>Status Effect Scriptable Object\r\n</p>\n<p>The scriptable object is simple, it is a scriptable object that is created to represent a collection of status effects for example the Health status effect scriptable object can be used for all types of healing. The object implements a base scriptable object to allow for different types of status effects to be grouped together into a list when passed into an entity via potions.\r\n</p>\n<p>The base class implements an interface which makes sure all status effects contain the data that is needed for the tick timer to correctly be created and that the scriptable object provides the functionality of its effects.</p>\n<p><strong>Tick System</strong></p>\n<p>The tick system I used was created primarily by code monkey. The video detailing its creation is available here:\u00a0</p>\n<br/><p>From this system I created a tick timer object that spawns on entities affected with per tick status effects to count down and apply the effect. Picture of class available in screenshots or code available here: [Tick Timer Class Repo](https://github.com/TSGameDev/AOH-CodeSnippet/blob/master/Assets/_GameData/Script...)\r\n</p>\n<p>IEffectable\r\n</p>\n<p>This interface provides functions that are called upon potions hitting this entity and receive the list of effects the potions carry.</p>\n<p>\u00a0</p>", "metacritic": null, "released": "2023-03-09", "tba": false, "updated": "2023-03-13T16:58:55", "background_image": "https://media.rawg.io/media/screenshots/7c8/7c8ca3989b10453436c0cc81359114ab.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 43, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["TSGameDev"], "genres": ["RPG", "Puzzle"], "publishers": [], "esrb_rating": null}