{"id": 584050, "slug": "autobang-by-dr-prodigy", "name": "Auto!(bang) by Dr. Prodigy", "name_original": "Auto!(bang) by Dr. Prodigy", "description": "<p># Autobang - Commodore 64 10 Liner PUR-80 game</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 ****\u00a0 AUTOBANG!\u00a0 BY\u00a0 DR.P\u00a0 2021\u00a0 ****\u00a0 \u00a0\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p>\n<p>\u00a0 \u00a0 C64\u00a0 -\u00a0 BASIC\u00a0 10\u00a0 LINER\u00a0 CONTEST\u00a0 -\u00a0 PUR80\u00a0\u00a0</p>\n<p>\u00a0 \u00a0\u00a0</p>\n<p>\u00a0 \u00a0 READY.</p>\n\n<p>**\\*\\* WARNING! CODE CONTAINS A LINE OF 81 CHARS: PLEASE READ \"CODE STATS AND JOKES\" FOR DETAILS \\*\\***</p>\n<p>\u00a0 \u00a0\u00a0</p>\n<p>**Auto!(bang)** is an **old-school home computer game** for **Commodore 64 BASIC v2**. I developed this (very well known) gameplay back in my C64 days ('80-something) as my first complete game project, inspired by [Motor Mania](https://www.lemon64.com/?game_id=1723): after more than 30 (!) years, I come back to re-do it from scratch as my first PUR-80 10-liner for the [**\"BASIC 10 Liner Contest 2021\"**](https://gkanold.wixsite.com/homeputerium/rules2021).</p>\n<p>Although it features a quite common gameplay, I aimed to obtain the best graphics, sound and UI I could squeeze in 800 chars, and the most possible fun and challenge.</p>\n<p>I must admit that, although it quite naturally can't feature all possible \"bells &amp; whistles\", I find it definitely more interesting in this new PUR-80 version.</p>\n<p>Also, for sure it's been big fun for me to do it ^^</p>\n<p>Its name (shortened in \"Auto!\", where \"!\" is read \"bang\" as in the unix tradition) is a tribute both to:</p>\n<p>\u00a0- *\"Autobahn\"* (masterpiece album by Kraftwerk, German band universally recognized as pioneer in electronic music, made by analog synthesizers: definitely not that far from the Commodore SID chip sound style!)</p>\n<p>\u00a0- a toy car (*\"AUTOBANG\"*) I owned in my childhood (ie: near-C64 era), named like that for it featured support for a toy gun tiny explosive charge, which was triggered by a bumper on its nose, thus blowing up with a \"bang!\" when sent against a wall.</p>\n<p>### Story &amp; gameplay</p>\n<p>You are **Bangy Boy**, a brave driver in a **car with no brakes**, running like crazy in a winding country road and trying to stay alive while **following road turns** and **avoiding pines** grown up in the middle of the road (?!?).</p>\n<p>Your goal is to **complete the whole track 10 times** (*stages*), but it won't be that easy: at every new stage (greeted by a start banner with the stage # on it) the road gets a bit narrower and you will find **more and more trees** on your way.</p>\n<p>The **game ends** when you **hit road borders / a tree**, or if you **complete the race**.</p>\n<p>Score increases while you proceed in your crazy run, depending on the current stage (higher levels =&gt; more points).</p>\n<p>***Your sporty car can turn fast.. will your reflexes and strategy be as good, enough to bring you to the end of the run?***</p>\n<p>### Instructions to play the game</p>\n<p>* Open WinVice (C64)</p>\n<p>* Select *\"File\"* -&gt; *\"Autostart disk image...\"*</p>\n<p>* Attach *\"autobang.d64\"* file</p>\n<p>### In-game controls</p>\n<p>**Z** = Move left</p>\n<p>**M** = Move right</p>\n<p>### Attract mode controls</p>\n<p>*Any key* = Start a new race</p>\n<p>**RUN/STOP** = Quit</p>\n<p>###\u00a0 Technical notes</p>\n<p>Along with the game itself, the code features a **tiny attract screen** with game name (\"bang\" is shortened in \"!\", as of unix standard conventions) **explaining the commands**, while allowing to exit the program with RUN/STOP with no SID oscillator active / no killer sound going (phewww!).</p>\n<p>Before getting back to the attract screen, the **keyboard buffer is cleaned** to avoid an undesired new game start due to previous game still in the buffer.</p>\n<p>The **game main loop** works by **PRINTing the road** through **semi-graphic lines** at the **bottom of the screen**, thus triggering **system scroll routine** (you can also \"take a rest\" keeping Ctrl down if you wish! But you won't be able to turn meanwhile, so no big cheating..), while **drawing trees** at random positions through **video RAM POKEs**.</p>\n<p>This allows to create **trees of 2 chars** while still scrolling 1 line at a time.\u00a0</p>\n<p>Trees are randomically added to the track at each row, and their number depends on the level (L1-L5 =&gt; 1, L6-L8 =&gt; 2, L9+ =&gt; 3).</p>\n<p>They can appear out of the road too. This has not only aesthetic purposes, but also provides more difficulty balance.\u00a0</p>\n<p>The **car is rendered with VIC sprite #0**, initialized in code as a long vertical \"stick\" 6 pixels wide, partially hidden in the highest part of the screen to look more like a car than a bus :-)</p>\n<p>It can move in steps of 8 pixels for each printed row (ie: following the char grid), so it's capable of 45\u00b0 turns.</p>\n<p>In case of a crash, car sprite pointer is changed to an uninitialized memory area, good enough to mimic a \"destroyed\" effect.</p>\n<p>**Track DATA** are structured in **sectors**, represented by **int pairs** (format: *`[turn direction X], [sector length Y)], ....`*).</p>\n<p>Due to the C64 BASIC default array size (10 elements), track sectors are limited to a number of 10.</p>\n<p>Track is initially 20 chars wide, and then it's narrowed by 1 char for each new level.\u00a0</p>\n<p>All **sound effects** are handled by **SID voice #1**, initialized once and then reprogrammed on-the-fly between sawtooth and noise waveform when needed.</p>\n<p>The game ends up with a **\"GAME OVER\"** (crash sound) or a **\"GOAL!\"** (whistle sound) message, along with the final score.</p>\n<p>Sounds duration and sprite initializations (run every time on purpose) give enough time to the player to read his score before the attract screen comes back in.</p>\n<p>The game code is designed to **work flawlessly on any C64 version** (ie: from R1 KERNAL on), real or emulated, in that it includes explicit color POKEs for all drawn characters (thus circumventing older versions' video color RAM bug).</p>\n<p>Auto!(bang) has been developed using [C64 Studio](https://www.c64-wiki.com/wiki/C64_Studio): big kudos to Georg Rottensteiner for his great work!</p>\n<p>#### Code stats &amp; jokes</p>\n<p>The program is made of **10 lines (0-9)**, for an exact **total of 800 chars** if counting the 81st char (see below!) in line 6, or otherwise 799 for the \"legit\" version of the code (ie: with that char removed).</p>\n<p>Code is signed with **my initials (\"DRP\")** at the end of lines 3-6:</p>\n<p>* \"D\" (line 3) is part of the program code</p>\n<p>* \"R\" (line 5) is in a **syntax error block of code** which, due to the previous `...THEN7:`, is however never parsed, and thus unharmful</p>\n<p>* \"P\" (line 6) is the **81st (!!!) char**, so it **would theoretically infringe PUR-80 rules** but, although meaningful and correct from the program point of view, **is unnecessary** (relevant NEXT statement works perfectly without it) and can be removed easily, also editing on a real C64: it's there to complete my initials, and as a little joke, in fact :-)</p>\n\n<p>#### Variables</p>\n<p>**All variable names are 1 char long** to save space. **S** and **V** are used to access **SID** and **VIC II** registers with shorter code (like it used to be in the good ol' days). Here is a complete list:</p>\n<p>|**Name**|Description|</p>\n<p>|--|--|</p>\n<p>|**C**|Car position (x)|</p>\n<p>|**D**|track sector Data index (zero-based)|</p>\n<p>|**E**|ScorE|</p>\n<p>|**I**|temp Iterator / variable to gain some bytes|</p>\n<p>|**L**|current Level|</p>\n<p>|**N**|curreNt track sector|</p>\n<p>|**O**|track row Offset (x)|</p>\n<p>|**P**|temP iterator for trees and game over graph&amp;sound effects|</p>\n<p>|**Q**|Quick temp variable to gain some bytes|</p>\n<p>|**R**|current sector Row|</p>\n<p>|**S**|SID first register location|</p>\n<p>|**T**|Track current position (x)|</p>\n<p>|**V**|VIC II first register location|</p>\n<p>|**W**|track Width (recalculated at every row)|</p>\n<p>|**X** (array)|track sector turn delta X (0=go straight; &lt;0 = turn left; &gt;0 = turn right)|</p>\n<p>|**Y** (array)|track sector length Y|</p>\n<p>|**K\\$**|pressed Key (in game) / chosen command (attract mode)|</p>\n<p>|**R\\$**|game Result|</p>\n<p>#### Conclusions</p>\n<p>Thanks for this nice contest.. enjoy Auto!(bang), your C64, and life!</p>\n<p>Cheers</p>\n<p>*dr.p*</p>\n<p>**(c) 2021 by Maurizio Montel (dr.prodigy)**: [find me on github](https://github.com/dr-prodigy/)</p>", "metacritic": null, "released": "2021-04-06", "tba": false, "updated": "2021-04-13T02:11:04", "background_image": "https://media.rawg.io/media/screenshots/fa1/fa15bb7824ba0065c7a1732c8d04d332.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 2, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}