{"id": 556597, "slug": "snake-by-tmcd677", "name": "Snake by TMCD677", "name_original": "Snake by TMCD677", "description": "<p>Snake<br/>TMCD677 (tvgames.me)<br/>Locomotive BASIC v1.1<br/>PUR-120</p>\n<p>Introduction<br/>------------<br/>My first attempt at writing a complete game limited to 10 Lines.\u00a0 Chosen Locomotive BASIC (Amstrad CPC)<br/>for auld lang syne.\u00a0 Pretty simple game many will remember from their old Nokia mobile phones in the<br/>early 2000's.\u00a0 Code is under 800 characters but a couple of lines squeek over 80 characters hence PUR-120.<br/>Game would easily be PUR-80 in just about anyother 8-bit dialect.</p>\n<p>Controls<br/>--------<br/>Please make sure your keyboard is in lowercase mode (default) prior to running the game.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UP\u00a0 \u00a0 -\u00a0 'p'<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DOWN\u00a0 -\u00a0 'l'<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 LEFT\u00a0 -\u00a0 'z'<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RIGHT -\u00a0 'x'</p>\n<p>Instructions<br/>------------<br/>The game starts with a small single segment snake in the centre of the screen automatically moving to the<br/>left.\u00a0 Your task is to guide this snake around the screen eating numbers that will appear randomly<br/>around the screen.\u00a0 Each time you eat a number your snakes body will grow by that number of segments.</p>\n<p>However you need to be careful.\u00a0 The snake cannot move beyond the edges of the screen or cross its own<br/>path.\u00a0 Hit the edge of the screen or the growing body of the snake and it's GAME OVER!\u00a0 Beware - the top<br/>of the screen is at Line2, below the score line.\u00a0 Also, each time you eat a number the snakes movement\u00a0<br/>will speed up by that amount.</p>\n<p>When the game ends press any key to return to Locomotive BASIC and execute:</p>\n<p>\u00a0 \u00a0 \u00a0RUN</p>\n<p>for another game.</p>\n<p>Scoring<br/>-------<br/>Snake is a high score challenge game.\u00a0 Who lasts the longest and eats the most numbers gets the highest<br/>score and wins.\u00a0 You score 10pts each time the snake moves and the value of any numbers the snake eats.</p>\n<p>Disk Catalogue<br/>--------------<br/>\u00a0 \u00a0 \u00a0<br/>\u00a0 \u00a0 \u00a0Snake1.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a0Original 5 line concept test moving snake body around screen<br/>\u00a0 \u00a0 \u00a0Snake2.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a01st attempt long listing; snake doesn't move; numbers appear randomly<br/>\u00a0 \u00a0 \u00a0Snake3.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a010Liner version of Snake2<br/>\u00a0 \u00a0 \u00a0Snake4.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a010Liner.\u00a0 Displays snake head, first random number, then hits GAME OVER<br/>\u00a0 \u00a0 \u00a0Snake5.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a0Full anotated listing.\u00a0 Random numbers and snake growth are broken<br/>\u00a0 \u00a0 \u00a0Snake6.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a0Fully working game, final full anotated listing - see listin below<br/>\u00a0 \u00a0 \u00a0Snake7.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a0Fully working game. Snake 6 condensed.\u00a0 REM statments removed and variable names shortened<br/>\u00a0 \u00a0 \u00a0Snake8.BAS\u00a0 \u00a0 \u00a0-\u00a0 \u00a0 \u00a010Liner. Fully working game.\u00a0 Final fully working entry - see listing below</p>\n<p>Fully Anotated Listing<br/>----------------------</p>\n<p>\u00a0 \u00a0 10 REM VARIABLES<br/>\u00a0 \u00a0 20 DIM path(500,2)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM snake body path co-ordinates stack<br/>\u00a0 \u00a0 30 LET tsp=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM tail stack pointer<br/>\u00a0 \u00a0 40 LET hsp=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM head stack pointer<br/>\u00a0 \u00a0 50 LET x=10\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM head x-axis co-ordinate<br/>\u00a0 \u00a0 60 LET y=10\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM head y-axis co-ordinate<br/>\u00a0 \u00a0 70 LET i$=\"\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM user input<br/>\u00a0 \u00a0 80 LET score=-10\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM player score<br/>\u00a0 \u00a0 90 LET grow=0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM amount to grow snake by<br/>\u00a0 \u00a0 100 LET c$=\"\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM screen content<br/>\u00a0 \u00a0 110 LET w=750\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM wait time, snake speed<br/>\u00a0 \u00a0 120 LET n=0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM random number<br/>\u00a0 \u00a0 130 LET d$=\"z\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM current direction<br/>\u00a0 \u00a0 140 LET nx=0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM random number x-axis co-ordinate<br/>\u00a0 \u00a0 150 LET ny=0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM random number y-axis co-ordinate<br/>\u00a0 \u00a0 160 LET temp$=\"\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM screen contents<br/>\u00a0 \u00a0 170 LET flag=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM random number display flag</p>\n<p>\u00a0 \u00a0 200 REM SET-UP<br/>\u00a0 \u00a0 210 MODE 0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM 20 characters x 25 lines<br/>\u00a0 \u00a0 220 INK 0,1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM background colour (blue)<br/>\u00a0 \u00a0 230 INK 1,24\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM snake colour (yellow)<br/>\u00a0 \u00a0 240 INK 2,26\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM score colour (white)<br/>\u00a0 \u00a0 250 INK 3,6\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM number colour (red)<br/>\u00a0 \u00a0 260 INK 4,6,26\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM game over colour (flashing red+white)</p>\n<p>\u00a0 \u00a0 300 REM START GAME LOOP<br/>\u00a0 \u00a0 310 LET path(hsp,1)=x\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM store head x-axis in stack<br/>\u00a0 \u00a0 320 LET path(hsp,2)=y\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM store head y-axis in stack<br/>\u00a0 \u00a0 330 LET hsp=hsp+1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM increase head stack pointer<br/>\u00a0 \u00a0 340 IF hsp&gt;500 THEN hsp=1\u00a0 \u00a0 \u00a0 : REM if head stack point at end of stack move to start</p>\n<p>\u00a0 \u00a0 500 REM DISPLAY<br/>\u00a0 \u00a0 510 LOCATE x,y\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM goto new head position<br/>\u00a0 \u00a0 520 PEN 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM use yellow ink<br/>\u00a0 \u00a0 530 PRINT \"*\";\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM display snake head<br/>\u00a0 \u00a0 540 LET score=score+10\u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM add 10 to score for each move<br/>\u00a0 \u00a0 550 PEN 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM use white ink<br/>\u00a0 \u00a0 560 LOCATE 12,1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM goto score display position<br/>\u00a0 \u00a0 570 PRINT score;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM update score<br/>\u00a0 \u00a0 580 FOR s=1 TO w:NEXT s\u00a0 \u00a0 \u00a0 \u00a0 : REM wait for snake speed<br/>\u00a0 \u00a0 590 IF grow&lt;&gt;0 THEN LET grow=grow - 1 ELSE LOCATE path(tsp,1),path(tsp,2):PRINT \" \";:LET tsp=tsp+1:IF\u00a0 \u00a0 \u00a0 \u00a0 \u00a0tsp&gt;500 THEN LET tsp=1<br/>\u00a0 \u00a0 595\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 REM if snake not growing then remove body from current tail position</p>\n<p>\u00a0 \u00a0 700 REM USER INPUT AND MOVEMENT<br/>\u00a0 \u00a0 710 LET i$=INKEY$\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : REM get user input<br/>\u00a0 \u00a0 720 IF i$&lt;&gt;\"\" THEN LET d$=i$\u00a0 \u00a0: REM if input detected update direction<br/>\u00a0 \u00a0 730 IF d$=\"z\" THEN LET x=x-1\u00a0 \u00a0: REM if user presses \"z\" move left<br/>\u00a0 \u00a0 740 IF d$=\"x\" THEN LET x=x+1\u00a0 \u00a0: REM if user presses \"x\" move right<br/>\u00a0 \u00a0 750 IF d$=\"p\" THEN LET y=y-1\u00a0 \u00a0: REM if user presses \"p\" move up<br/>\u00a0 \u00a0 760 IF d$=\"l\" THEN LET y=y+1\u00a0 \u00a0: REM if user presses \"l\" move down</p>\n<p>\u00a0 \u00a0 800 REM COLLITION DETECTION<br/>\u00a0 \u00a0 810 IF x&lt;1 OR x&gt;20 OR y&lt;2 OR y&gt;25 THEN GOTO 1000<br/>\u00a0 \u00a0 815\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 REM end game if hit edge of screen<br/>\u00a0 \u00a0 820 LOCATE x,y\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM goto next head position<br/>\u00a0 \u00a0 830 LET temp$=COPYCHR$(#0)\u00a0 \u00a0 \u00a0: REM get any characters currently at that position<br/>\u00a0 \u00a0 840 IF temp$=\"*\" THEN GOTO 1000: REM end game if snake head touches body<br/>\u00a0 \u00a0 850 IF temp$&lt;&gt;\" \" THEN LET grow=n:LET score=score+n:LET w=w-n:LET flag=1<br/>\u00a0 \u00a0 855\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 REM if head finds number add to score and grow snake</p>\n<p>\u00a0 \u00a0 900 REM RANDOM NUMBERS<br/>\u00a0 \u00a0 910 IF flag=0 THEN GOTO 300\u00a0 \u00a0 : REM if not collected next number<br/>\u00a0 \u00a0 920 LET n=INT((RND(1)*9)+1)\u00a0 \u00a0 : REM choose a random numner (1..9)<br/>\u00a0 \u00a0 930 LET nx=INT((RND(1)*20)+1)\u00a0 : REM choose random x co-ordinate for random number<br/>\u00a0 \u00a0 940 LET ny=INT((RND(1)*25)+1)\u00a0 : REM choose random y co-ordinate for random number<br/>\u00a0 \u00a0 950 IF ny=1 THEN GOTO 930\u00a0 \u00a0 \u00a0 : REM if y-cordinate on score line choose another<br/>\u00a0 \u00a0 960 LOCATE nx,ny\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM goto chosen random number position<br/>\u00a0 \u00a0 970 LET temp$=COPYCHR$(#0)\u00a0 \u00a0 \u00a0: REM get any characters already there<br/>\u00a0 \u00a0 980 IF temp$=\"*\" THEN GOTO 930 : REM choose new location if snake body is there<br/>\u00a0 \u00a0 990 PEN 3:PRINT n;: LET flag=0 : REM display new random number if needed</p>\n<p>\u00a0 \u00a0 999 GOTO 300\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM back to start of game loop</p>\n<p>\u00a0 \u00a0 1000 REM GAME OVER\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>\u00a0 \u00a0 1010 PEN 4\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM use flashing ink<br/>\u00a0 \u00a0 1020 LOCATE 2,10\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM centre message on screen<br/>\u00a0 \u00a0 1030 PRINT \"G A M E\u00a0 \u00a0O V E R\";: REM display game over message<br/>\u00a0 \u00a0 1040 LET i$=inkey$\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM get user input<br/>\u00a0 \u00a0 1050 IF i$=\"\" THEN GOTO 1040\u00a0 \u00a0: REM keep waiting until user presses a key<br/>\u00a0 \u00a0 1060 PEN 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: REM use default OS ink colour\u00a0</p>\n<p>Final 10 Liner Listing<br/>----------------------</p>\n<p>1 DIM p(500,2):t=1:h=1:x=10:y=10:s=-10:m=750:d$=\"z\":f=1:MODE 0:INK 2,26:INK 3,6:INK 4,6,26\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>2 p(h,1)=x:p(h,2)=y:h=h+1:LOCATE x,y:PEN 1:?\"*\";:s=s+10:PEN 2:LOCATE 12,1:? s;:FOR z=1 TO m:NEXT:IF h&gt;500 THEN h=1\u00a0 \u00a0<br/>3 IF g&lt;&gt;0 THEN g=g-1 ELSE LOCATE p(t,1),p(t,2):?\" \";: t=t+1:IF t&gt;500 THEN t=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>4 i$=INKEY$:IF i$&lt;&gt;\"\" THEN d$=i$\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>5 IF d$=\"z\" THEN x=x-1 ELSE IF d$=\"x\" THEN x=x+1 ELSE IF d$=\"p\" THEN y=y-1 ELSE IF d$=\"l\" THEN y=y+1<br/>6 IF x&lt;1 OR x&gt;20 OR y&lt;2 OR y&gt;25 THEN GOTO 10<br/>7 LOCATE x,y:c$=COPYCHR$(#0):IF c$=\"*\" THEN GOTO 10 ELSE IF c$&lt;&gt;\" \" THEN g=g+n:s=s+n:m=m-n:f=1\u00a0<br/>8 IF f=0 THEN GOTO 2 ELSE n=INT((RND(1)*9)+1):v=INT((RND(1)*20)+1):w=INT((RND(1)*25)+1):IF w=1 THEN GOTO 8<br/>9 LOCATE v,w:c$=COPYCHR$(#0):IF c$=\"*\" THEN GOTO 8 ELSE PEN 3:? n;:f=0:GOTO 2<br/>10 PEN 4:LOCATE 2,10:?\"G A M E\u00a0 \u00a0O V E R\";:i$=inkey$:IF i$=\"\" THEN GOTO 10 ELSE PEN 1</p>", "metacritic": null, "released": "2021-02-10", "tba": false, "updated": "2021-02-12T06:20:00", "background_image": "https://media.rawg.io/media/screenshots/60d/60d9a88f6eb8f17ddac0ae3e447d48b9.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 14, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}