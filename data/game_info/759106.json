{"id": 759106, "slug": "petefall10-by-commocore", "name": "Petefall10 by Commocore", "name_original": "Petefall10 by Commocore", "description": "<p>Petefall 10</p>\n<p>=======</p>\n<p>This is my fourth ever 10-liner written in BASIC for Commodore 64.</p>\n<p>This game has been submitted to the Basic 10-Liner Contest 2022 in PUR-80 category.</p>\n<p>Inspired by the old demo called \"3 adventures\" I did back in the 90s.</p>\n\n<p>Plot</p>\n<p>----</p>\n<p>Not too many people know that Harry Pitfall has a brother, and his name is Pete. Your goal is to help Pete in his adventure as he travels through 32\u00a0worlds full of pits. Neither of you like the idea but there is no other way than forward. Help Pete to get out of it. I know you can handle it.</p>\n<p>His brother Harry will be proud of you.</p>\n\n<p>Screen</p>\n<p>-------</p>\n<p>In the top-left corner you can see the current world and the number of lives.</p>\n\n<p>Controls</p>\n<p>--------</p>\n<p>Use joystick in port 2. Press the fire button to jump.</p>\n\n<p>Code description</p>\n<p>----------------</p>\n<p>In this game, I wanted to use generated levels (worlds) instead of randomisation. Based on a single value, I achieved some\u00a0variety for 32 worlds. It's not ideal, but it was really difficult to squeeze it in less than 2 lines of code. I hope that it gives a good sense\u00a0of variety while playing the game as I wanted to include shorter and longer pits. I also added into design the different length of platforms,\u00a0so in most cases, the player cannot blindly jump from the beginning to the end but has to jump at the right moment.\u00a0I also wanted to fit in the animation of the pits, as it just looks way more alive, especially together with the animation of the hero.</p>\n\n<p>Line by line code overview</p>\n<p>-------------------------</p>\n<p>- Line 0:</p>\n<p> - Initialisation of some variables including the main hero animation</p>\n<p> - Setting screen and border colours</p>\n<p> - Data for X$</p>\n<p>- Line 1:</p>\n<p> - Increment the current number of the world in case hero has some lives, otherwise reset to the first world</p>\n<p> - Reset number of lives to 7 in case it's game over or the first run</p>\n<p> - Generate the world based on a value of G variable, counting from 0 to 9 is sufficient to fill the string that represents the current world with at least 40 characters</p>\n<p> - Calculate the starting position of world's graphics (A variable) to be taken from W$ and X$ strings</p>\n<p> - Data for S$, Y</p>\n<p>- Line 2:</p>\n<p> - Calculate the length of world's graphics (B variable) to be cut from W$ and X$ strings</p>\n<p> - Both strings N$ and $M$ will be created in order to give pits animation effect</p>\n<p> - Loops to FOR in line 1 for 10 times</p>\n<p> - Clear the screen</p>\n<p>- Line 3:</p>\n<p> - Read the joystick in port 2</p>\n<p> - Set L if the joystick is moved left, R if the joystick is moved right, F if fire button pressed</p>\n<p> - Based on joystick values the next horizontal position of hero can be set in X</p>\n<p> - Increase hero's animation step only when it moves (C variable)</p>\n<p>- Line 4:</p>\n<p> - Hero's animation step kept in C variable (from 0 to 2)</p>\n<p> - In which direction hero's head should be directed kept in H variable</p>\n<p> - Check if hero is requested to jump up that might only occur when he's on the floor (U variable)</p>\n<p>- Line 5:</p>\n<p> - Calculate hero's jumping up position (P variable) until the max height is reached (Y = 0)</p>\n<p> - Calculate hero's falling down position (D variable) until the floor is reached (Y = 3)</p>\n<p> - In case the world changed to 33, finish the game by jumping to line 9</p>\n<p> - Otherwise, display the actual world number on the top of the screen and continue in line 6</p>\n<p>- Line 6:</p>\n<p> - Display the actual number of lives</p>\n<p> - Display the normal graphics of the world if N = 0</p>\n<p> - Display the inverted graphics of the world if N = 1</p>\n<p> - Set the vertical and horizontal position where here will be displayed</p>\n<p>- Line 7:</p>\n<p> - Display hero's head in the right direction based on H variable</p>\n<p> - Display hero's upper body part and lower body part based on C variable</p>\n<p> - Read the screen memory next to hero's foot and store in A variable in order to detect if hero steps on a pit</p>\n<p>- Line 8:</p>\n<p> - Decrement one live if hero collides with the pit (when A = 102 or 230)</p>\n<p> - Until hero didn't reach the right part of the screen (X is less than 36) and the number of lives is positive, continue the main game loop by jump to line 3</p>\n<p> - Otherwise, prepare N$ and M$ to generate the new world and move hero to the left part of the screen followed by jump to line 1 where world generation occurs</p>\n<p> - Data for Q$</p>\n<p>- Line 9:</p>\n<p> - Program jumps here when hero wins the game</p>\n<p> - Data for W$, H, S, C$(0...5)</p>\n\n<p>Variables overview</p>\n<p>--------------------</p>\n<p>- X$ - inverted world graphics, 3 consecutive bytes defines a platform or a pit</p>\n<p>- S$ - vertical screen offset</p>\n<p>- Y - hero vertical position</p>\n<p>- Q$ - moves the printing cursor of the hero character to the next line</p>\n<p>- W$ - normal world graphics (see: X$)</p>\n<p>- H - hero's head animation position</p>\n<p>- S - screen colour address memory</p>\n<p>- C$() - table with hero animation containing 3 frames (upper part followed by the bottom part of hero's body)</p>\n<p>- G - current world</p>\n<p>- V - lives</p>\n<p>- I - used for loop iterations</p>\n<p>- A - stores the beginning of the world graphics to be cut from X$ and W$ level graphic strings while world generation, also used to detect collision with a pit</p>\n<p>- B - stores the length of the world graphics to be cut from X$ and W$ level graphic strings while world generation</p>\n<p>- N$ - stores the normal world graphics from W$ string</p>\n<p>- M$ - stores the inverted world graphics from X$ string</p>\n<p>- J - value of the joystick port 2 address</p>\n<p>- L - is the joystick port 2 moved in the left direction</p>\n<p>- R - is the joystick port 2 moved in the right direction</p>\n<p>- F - is the fire button of joystick port 2 pressed</p>\n<p>- K - the next position of hero based on L and R variables</p>\n<p>- X - hero horizontal position</p>\n<p>- C - hero animation step</p>\n<p>- U - is hero requested to jump up</p>\n<p>- N - switch world animation (use normal or inverted graphics)</p>\n<p>- P - used to calculate if hero is jumping up</p>\n<p>- D - is hero falling down</p>", "metacritic": null, "released": "2022-03-23", "tba": false, "updated": "2022-03-25T08:29:57", "background_image": "https://media.rawg.io/media/screenshots/6fc/6fcbb78885f98b7fc468ecc803e5f475.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 4, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}