{"id": 566947, "slug": "origm-by-renato-murta-de-rezende", "name": "ORIGM by Renato Murta de Rezende", "name_original": "ORIGM by Renato Murta de Rezende", "description": "<p>ORIGM</p>\n<p>Softby Renato Murta de Rezende<br/>renatomdr@gmail.com</p>\n<p>To play:<br/>use the arrow keys:</p>\n<p>left and right to move the ship horizontally</p>\n<p>up and down to select the color of the laser</p>\n<p>use the space bar to shoot</p>\n\r\n\r\nlist \r\n1 BLOAD\"x.b\",R:DEFINTA-Z:Y=RND(-TIME):COLOR8,1,1:SCREEN1,1,0:WIDTH28:KEYOFF:CLS:FORT=0TO5:B=200+T*8:VPOKEBASE(5)+574+(T*32),B:FORY=0TO7:VPOKEBASE(7)+B*8+Y,SGN(YMOD7)*126:NEXTY,T:FORY=0TO13:READI:SOUNDY,I:NEXT:FORY=1TO22:LOCATERND(1)*29,23:PRINT\"\u00f8\":NEXT\r\n2 FORP=0TO6:READH,V$:FORT=1TOLEN(V$)STEP2:VPOKEH,VAL(\"&amp;H\"+MID$(V$,T,2)):H=H+1:NEXTT,P:COLOR=RESTORE:_TURBOON:DIMA(9),S(9),D(9),F(9),G(9),H(9),J(9):R#=0:DATA0,0,0,1,0,0,31,220,0,0,0,255,50,0,8228,07020707000570067000670071,8217,213141516171E1\r\n3 LOCATE12,11:PRINT\"ORIGM\":FORN=0TO1:N=ABS(STRIG(0)):NEXTN:V#=0:LOCATE0,0:PRINTV#;\"        \":LOCATE20,0:PRINTR#;:FORN=19TO31:PUTSPRITEN,(0,-17),0,0:A(NMOD10)=0:NEXTN:Q=124:W=5:I=100:O=0:P=0:R=0:Z=0:VPOKE6913,Q:VPOKE6914,1:VPOKE6916,173:FORN=0TO1:TIME=0\r\n4 N=0:E=STICK(0):Q=Q+(-(E&gt;1ANDE&lt;5ANDQ&lt;222)+(E&gt;5ANDE&lt;9ANDQ&gt;16))*3:VPOKE6913,Q:E$=INKEY$:A$=CHR$(30):B$=CHR$(31):W=(W+6+(E$=A$)-(E$=B$))MOD6:VPOKE6916,133+(W*8):I=(I+1)MOD(120\\(P+1)):IFE$=A$ORE$=B$THENSOUND0,255:SOUND8,15:AA=1ELSEIFAA=1THENSOUND8,0:AA=0\r\n5 IFSTRIG(0)ANDR=0THENR=1:T=Q:Y=183:U=W+2:GOTO5ELSEIFR&gt;0THENY=Y-24:IFY&lt;0THENR=0:PUTSPRITE19,(0,-17):PUTSPRITE18,(0,-17):SOUND8,0ELSEPUTSPRITE19,(T,Y-16),U,3:PUTSPRITE18,(T,Y),U,3:SOUND0,255-(Y+24):SOUND8,(Y+24)\\13:DATA6912,AF7C010FADEC060F\r\n6 E=PEEK(&amp;HF3E7)AND32:BB=0:FORL=0TO9:A=A(L):S=S(L):D=D(L):F=F(L):G=G(L):H=H(L):J=J(L):BL=31-L:B=6914+BL*4:S=S+G:VS=P+1:IFI=0ANDA=0THENI=1:A=1:S=RND(1)*200+20:D=80:F=S:G=0:O=(O+1)MOD(2+P):P=P-(O=0):J=PMOD6+2:H=(P*2)+1:IFP&gt;29THENP=30:J=RND(1)*6+2\r\n7 IFA=1THEND=D+H:K=D/10:PUTSPRITEBL,(S,K),J,2:IFK&gt;192THENA=0ELSEIFEANDR=1ANDABS(S-T)&lt;8ANDABS(K-Y)&lt;32ANDU=JTHENA=2:VPOKEB,5:SOUND13,0:SOUND10,16:LOCATE(S-16)\\8,K\\8:PRINTVSELSEIFS=FTHENF=RND(1)*200+20:G=SGN(F-S)ELSEELSEIFA=2THENA=0:VPOKEB,0:V#=V#+VS\r\n8 IFEANDA=1ANDABS(S-Q)&lt;12ANDK\\8=21THENN=1ELSEIFK&lt;64ANDZ=0ANDA=1THENZ=1:X=S*10:C=K:VV=(Q*10-X)\\((175-C)\\3):SOUND2,255:SOUND9,15ELSEIFEANDZ=1ANDABS(Q-(X\\10))&lt;8ANDC\\8=22THENN=1ELSEIFA=1ANDK&gt;BBTHENBB=K:DATA14344,1010382844FEFE28000000384454FE38101010101010\r\n9 A(L)=A:S(L)=S:D(L)=D:F(L)=F:G(L)=G:H(L)=H:J(L)=J:NEXTL:SOUND2,RND(1)*255:SOUND9,(BB+16)/13:LOCATE0,1:PRINTCHR$(27)+\"L\":LOCATERND(1)*29,1:PRINT\"\u00f8\";:IFZ=1THENX=X+VV:C=C+3:PUTSPRITE20,(X\\10,C),RND(1)*13+2,4:IFC&gt;192THENZ=0:DATA1984,0000103810000000\r\n10 LOCATE0,0:PRINTV#;:FORL=0TO3:L=TIME:NEXTL,N:SOUND8,0:SOUND9,0:SOUND12,200:SOUND13,1:SOUND10,16:VPOKE6914,5:TIME=0:FORN=0TO300:N=TIME:NEXTN:SOUND12,50:IFV#&gt;R#THENR#=V#:GOTO3ELSE3:DATA14366,10100000103810000000105438FE385410007E42C3C3427E0000,8198,A1A1\r\n\r\n\n<p>( Description translated by Google Translate )</p>\n<p>Note: this game was produced in basic to run under the Xbasic interpreter</p>\n<p>machine: MSX2 or higher</p>\n<p>1-------------------------------------<br/>BLOAD\"x.b\",R\u00a0 \u00a0//\u00a0 loads the Xbasic interpreter (only necessary for performance, the program works without this feature, to eliminate Xbasic just delete this command and the _TURBOON command on line 2</p>\n<p>DEFINTA-Z\u00a0 //\u00a0 sets all numeric variables to integer type</p>\n<p>Y=RND(-TIME)\u00a0 //\u00a0 \u00a0defines the Randon seed by the computer clock</p>\n<p>COLOR8,1,1\u00a0 //\u00a0 \u00a0sets the color red for text and black for the screen</p>\n<p>SCREEN1,1,0\u00a0 //\u00a0 \u00a0define graphic text mode</p>\n<p>WIDTH28\u00a0 //\u00a0 defines 28 columns of text</p>\n<p>KEYOFF\u00a0 //\u00a0 clears the display of the function keys</p>\n<p>CLS\u00a0 //\u00a0 clean the screen</p>\n<p>FORT=0TO5\u00a0 //\u00a0 matches 6 characters for laser selection interface</p>\n<p>B=200+T*8\u00a0 //\u00a0 defines the character in the ASCII table</p>\n<p>VPOKEBASE(5)+574+(T*32),B\u00a0 //\u00a0 prints the character at the screen position</p>\n<p>FORY=0TO7\u00a0 //\u00a0 matches the 8bytes of the character graph</p>\n<p>VPOKEBASE(7)+B*8+Y,SGN(YMOD7)*126\u00a0 //\u00a0 changes the character graph</p>\n<p>NEXTY,T\u00a0 //\u00a0 closes the graphic layout of the laser selection interface</p>\n<p>FORY=0TO13:READI:SOUNDY,I:NEXTY\u00a0 //\u00a0 configure the 3 audio channels</p>\n<p>FORY=1TO22\u00a0 //\u00a0 corresponds to the initial stars of the starfield</p>\n<p>LOCATERND(1)*29,23\u00a0 //\u00a0 draw position for printing on line 23</p>\n<p>PRINT\"\u00f8\"\u00a0 //\u00a0 prints star character</p>\n<p>NEXTY\u00a0 fecha estrelas iniciais\u00a0 //\u00a0\u00a0</p>\n<p>2-------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>FORP=0TO6\u00a0 //\u00a0 corresponds to sequences of bytes to be inserted in the VRAM</p>\n<p>READH,V$\u00a0 //\u00a0 \u00a0loads Vram and String start address with Hex string</p>\n<p>FORT=1TOLEN(V$)STEP2\u00a0 //\u00a0 \u00a0counts the length of the hex string string jumping in 2</p>\n<p>VPOKEH,VAL(\"&amp;H\"+MID$(V$,T,2))\u00a0 //\u00a0 prints in hex the hex value identified in the string fragment at address H</p>\n<p>H=H+1\u00a0 //\u00a0 update address to next byte</p>\n<p>NEXTT,P\u00a0 //\u00a0 completes reading the string and starts a new sequence</p>\n<p>COLOR=RESTORE\u00a0 //\u00a0 activates the rgb change of the color palette (The only justification for using MSX2 or&gt; is the change of the palette)</p>\n<p>_TURBOON\u00a0 //\u00a0 \u00a0activates the Xbasic interpreter (this command only exists in the ORIGM_X.BAS version because MSXbasic does not recognize it)</p>\n<p>DIMA(9),S(9),D(9),F(9),G(9),H(9),J(9)\u00a0 //\u00a0 prepares the matrix variables used in the UFOS algorithm</p>\n<p>R#=0\u00a0 //\u00a0 variable for the Record</p>\n<p>DATA0,0,0,1,0,0,31,220,0,0,0,255,50,0,8228,07020707000570067000670071,8217,213141516171E1\u00a0 //\u00a0 audio channel values , palette configuration and character colors</p>\n<p>3-------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>LOCATE12,11\u00a0 //\u00a0 position for printing the title on the screen</p>\n<p>PRINT\"ORIGM\"\u00a0 //\u00a0 prints the game title</p>\n<p>FORN=0TO1\u00a0 //\u00a0 counter N from 0 to 1</p>\n<p>N=ABS(STRIG(0))\u00a0 //\u00a0 \u00a0value of N is defined by the state of the keyboard fire button (Space)</p>\n<p>NEXTN\u00a0 //\u00a0 keep loop until N = 1</p>\n<p>V#=0\u00a0 //\u00a0 variable for the Score</p>\n<p>LOCATE0,0\u00a0 //\u00a0 position to print the score</p>\n<p>PRINTV#;\"\u00a0 \u00a0 \u00a0 \u00a0 \"\u00a0 //\u00a0 prints score and sequence of spaces to delete the previous score</p>\n<p>LOCATE20,0\u00a0 //\u00a0 record printing position</p>\n<p>PRINTR#;\u00a0 //\u00a0 prints record</p>\n<p>FORN=19TO31\u00a0 //\u00a0 corresponds to theUFOand shot sprite layers</p>\n<p>PUTSPRITEN,(0,-17),0,0\u00a0 //\u00a0 reposition the sprites off the screen</p>\n<p>A(NMOD10)=0\u00a0 //\u00a0 reset ufos states to inactive</p>\n<p>NEXTN\u00a0 //\u00a0\u00a0</p>\n<p>Q=124\u00a0 //\u00a0 player X position</p>\n<p>W=5\u00a0 //\u00a0 selected laser</p>\n<p>I=100\u00a0 // UFOspam time</p>\n<p>O=0 // amount ofUFOper wave</p>\n<p>P=0 // wave counter</p>\n<p>R=0\u00a0 //\u00a0 laser status</p>\n<p>Z=0\u00a0 // UFOshot status</p>\n<p>VPOKE6913,Q\u00a0 //\u00a0 position the player</p>\n<p>VPOKE6914,1\u00a0 //\u00a0 adjust the player sprite</p>\n<p>VPOKE6916,173\u00a0 //\u00a0 position the laser selector</p>\n<p>FORN=0TO1\u00a0 //\u00a0 \u00a0starts gameplay loop</p>\n<p>TIME=0\u00a0 //\u00a0 starts computer clock counter</p>\n<p>4-------------------------------------\u00a0 //\u00a0\u00a0<br/>N=0\u00a0 //\u00a0 keep gameplay loop</p>\n<p>E=STICK(0)\u00a0 //\u00a0 reading the keyboard joystick status (arrows)</p>\n<p>Q=Q+(-(E&gt;1ANDE&lt;5ANDQ&lt;222)+(E&gt;5ANDE&lt;9ANDQ&gt;16))*3\u00a0 //\u00a0 calculates player movement</p>\n<p>VPOKE6913,Q\u00a0 //\u00a0 updates the position of the player</p>\n<p>E$=INKEY$\u00a0 //\u00a0 keyboard reading</p>\n<p>A$=CHR$(30)\u00a0 //\u00a0 character corresponding to the up arrow</p>\n<p>B$=CHR$(31)\u00a0 //\u00a0 character corresponding to the down arrow</p>\n<p>W=(W+6+(E$=A$)-(E$=B$))MOD6\u00a0 //\u00a0 calculates laser selection</p>\n<p>VPOKE6916,133+(W*8)\u00a0 //\u00a0 updates the position of the laser selection</p>\n<p>I=(I+1)MOD(120\\(P+1))\u00a0 //\u00a0 \u00a0ufos spam counter</p>\n<p>IFE$=A$ORE$=B$THEN\u00a0 //\u00a0 \u00a0checks whether the up or down keys have been pressed<br/>\u00a0SOUND0,255\u00a0 //\u00a0 sets frequency on channel A<br/>\u00a0SOUND8,15\u00a0 //\u00a0 sets volume on channel A<br/>\u00a0AA=1\u00a0 //\u00a0 active beep status<br/>\u00a0ELSE<br/>\u00a0IFAA=1THEN\u00a0 //\u00a0 \u00a0if active beep status<br/>\u00a0 SOUND8,0\u00a0 //\u00a0 \u00a0cancels volume of channel A<br/>\u00a0 AA=0\u00a0 //\u00a0 \u00a0beep status inactive</p>\n<p>5-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFSTRIG(0)ANDR=0THEN\u00a0 //\u00a0 checks if keyboard shot was pressed and laser status is inactive<br/>\u00a0R=1\u00a0 //\u00a0 \u00a0active laser status<br/>\u00a0T=Q\u00a0 //\u00a0 \u00a0set laser X position<br/>\u00a0Y=183\u00a0 //\u00a0 set laser Y position<br/>\u00a0U=W+2\u00a0 //\u00a0 set laser color<br/>\u00a0GOTO5\u00a0 //\u00a0 execute line 5 again<br/>\u00a0ELSE<br/>\u00a0IFR&gt;0THEN\u00a0 //\u00a0 \u00a0if active laser status<br/>\u00a0 Y=Y-24\u00a0 //\u00a0 \u00a0moves the laser up<br/>\u00a0 IFY&lt;0THEN\u00a0 //\u00a0 \u00a0if the laser's Y position is less than 0<br/>\u00a0 \u00a0R=0\u00a0 //\u00a0 laser status inactive<br/>\u00a0 \u00a0PUTSPRITE19,(0,-17)\u00a0 //\u00a0 erases laser sprite1<br/>\u00a0 \u00a0PUTSPRITE18,(0,-17)\u00a0 //\u00a0 erases laser sprite2<br/>\u00a0 \u00a0SOUND8,0\u00a0 //\u00a0 cancels volume of channel A<br/>\u00a0 \u00a0ELSE<br/>\u00a0 \u00a0PUTSPRITE19,(T,Y-16),U,3\u00a0 //\u00a0 prints laser sprite1\u00a0<br/>\u00a0 \u00a0PUTSPRITE18,(T,Y),U,3\u00a0 //\u00a0 prints laser sprite2<br/>\u00a0 \u00a0SOUND0,255-(Y+24)\u00a0 //\u00a0 sets frequency on channel A<br/>\u00a0 \u00a0SOUND8,(y+24)\\13\u00a0 //\u00a0 sets volume on channel A</p>\n<p>DATA6912,AF7C010FADEC060F,8217,213141516171E1\u00a0 //\u00a0 sprites attributes values ??and character colors</p>\n<p>6-------------------------------------\u00a0 //\u00a0\u00a0<br/>E=PEEK(&amp;HF3E7)AND32\u00a0 //\u00a0 checks if there was a collision between sprites</p>\n<p>BB=0\u00a0 //\u00a0 B channel volume regulator<br/>\u00a0 \u00a0//\u00a0\u00a0<br/>FORL=0TO9\u00a0 //\u00a0 \u00a0UFOS controller loop</p>\n<p>A=A(L):S=S(L):D=D(L):F=F(L):G=G(L):H=H(L):J=J(L)\u00a0 //\u00a0 transfer of values ??from ufos matrix variables to simple variables</p>\n<p>\u00a0// description of variables\u00a0<br/> A: status</p>\n<p> S: X position</p>\n<p> D: Y position</p>\n<p> F: position X destination</p>\n<p> G: increment of X</p>\n<p> H: increasing Y</p>\n<p> J: color</p>\n<p>BL=31-L\u00a0 // UFOsprite layer calculation</p>\n<p>B=6914+BL*4\u00a0 //\u00a0 calculation of the position in the VRAM of the sprite attributes</p>\n<p>S=S+G\u00a0 //\u00a0 movement X (S) ofUFOby increment G</p>\n<p>VS=P+1\u00a0 // UFOScore Value</p>\n<p>IFI=0ANDA=0THEN\u00a0 //\u00a0 \u00a0checks if the spawn time and if theUFOis inactive if yes, starts an ufo<br/>\u00a0I=1\u00a0 //\u00a0 increment spawn counter to not create more than one ufo<br/>\u00a0A=1\u00a0 //\u00a0 activeUFOstatus<br/>\u00a0S=RND(1)*200+20\u00a0 //\u00a0 set random X position<br/>\u00a0D=80\u00a0 //\u00a0 define Y position<br/>\u00a0F=S\u00a0 //\u00a0 equals target X position with current X position<br/>\u00a0G=0\u00a0 //\u00a0 neutralizes the increment of movement in X<br/>\u00a0O=(O+1)MOD(2+P)\u00a0 // UFOquantity counter per wave<br/>\u00a0P=P-(O=0)\u00a0 //\u00a0 wave counter<br/>\u00a0J=PMOD6+2\u00a0 //\u00a0 define the color of theUFOby the wave<br/>\u00a0H=(P*2)+1\u00a0 //\u00a0 sets theUFOY movement increment (2 can regulate game difficulty)<br/>\u00a0IFP&gt;29THEN\u00a0 //\u00a0 define the final wave<br/>\u00a0 P=30\u00a0 //\u00a0 keeps the final wave eternal<br/>\u00a0 J=RND(1)*6+2\u00a0 //\u00a0 \u00a0makes eachUFOof the final wave a different color</p>\n<p>7-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFA=1THEN\u00a0 //\u00a0 checksUFOactive status<br/>\u00a0D=D+H\u00a0 // UFOY movement<br/>\u00a0K=D/10\u00a0 // UFOu position on the screen<br/>\u00a0PUTSPRITEBL,(S,K),J,2\u00a0 //\u00a0 printsUFOsprite<br/>\u00a0IFK&gt;192THEN\u00a0 //\u00a0 \u00a0checks if theUFOcame out from under the screen<br/>\u00a0 A=0\u00a0 //\u00a0 disablesUFOstatus<br/>\u00a0 ELSE<br/>\u00a0IFEANDR=1ANDABS(S-T)&lt;8ANDABS(K-Y)&lt;32ANDU=JTHEN verifica se houve colis\u00e3o de sprite, status ativo do laser, e se oUFOest\u00e1 dentro da \u00e1rea de colis\u00e3o com o laser\u00a0 //\u00a0\u00a0<br/>\u00a0 A=2\u00a0 //\u00a0 explodingUFOstatus<br/>\u00a0 VPOKEB,5\u00a0 //\u00a0 \u00a0explodingUFOsprite<br/>\u00a0 SOUND13,0\u00a0 //\u00a0 sets sound effect envelope<br/>\u00a0 SOUND10,16\u00a0 //\u00a0 triggers sound effect on channel C (set for noise on line1)<br/>\u00a0 LOCATE(S-16)\\8,K\\8\u00a0 //\u00a0 calculates position on the screen to print theUFOScore value<br/>\u00a0 PRINTVS\u00a0 //\u00a0 printsUFOScore value<br/>\u00a0 ELSE<br/>\u00a0IFS=FTHEN\u00a0 //\u00a0 \u00a0checks whether the current X position of theUFOis equal to the target X position<br/>\u00a0 F=RND(1)*200+20\u00a0 //\u00a0 draw new position X destination<br/>\u00a0 G=SGN(F-S)\u00a0 //\u00a0 calculates the increment for movement in X<br/>\u00a0 ELSE<br/>\u00a0ELSE<br/>\u00a0IFA=2THEN\u00a0 //\u00a0 checkUFOstatus in explosion<br/>\u00a0A=0\u00a0 // UFOstatus inactive<br/>\u00a0VPOKEB,0\u00a0 // UFOsprite graphic is erased<br/>\u00a0V#=V#+VS\u00a0 //\u00a0 score is added to theUFOscore value<br/>\u00a0 \u00a0//\u00a0\u00a0</p>\n<p>8-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFEANDA=1ANDABS(S-Q)&lt;12ANDK\\8=21THEN\u00a0 //\u00a0 checks if there was a sprite collision,UFOactive status, and if theUFOis within the collision area with the player<br/>\u00a0N=1\u00a0 //\u00a0 ends the gameplay loop<br/>\u00a0ELSE<br/>IFK&lt;64ANDZ=0ANDA=1THEN\u00a0 //\u00a0 checksUFOY position on top of third of screen,UFOshot off status,UFOactive status<br/>\u00a0Z=1\u00a0 //\u00a0 activeUFOshooting status<br/>\u00a0X=S*10\u00a0 //\u00a0 sets X position of theUFOshot<br/>\u00a0C=K\u00a0 //\u00a0 sets Y position of the shot<br/>\u00a0VV=(Q*10-X)\\((175-C)\\3)\u00a0 //\u00a0 calculates X increment to move theUFOshot<br/>\u00a0SOUND2,255\u00a0 //\u00a0 sets frequency on channel B<br/>\u00a0SOUND9,15\u00a0 //\u00a0 sets volume on channel B<br/>\u00a0ELSE<br/>IFEANDZ=1ANDABS(Q-(X\\10))&lt;8ANDC\\8=22THEN\u00a0 //\u00a0 checks if there was a sprite collision, activeUFOshot status, and if theUFOshot is within the collision area with the player<br/>\u00a0N=1\u00a0 //\u00a0 ends the gameplay loop<br/>\u00a0ELSE<br/>IFA=1ANDK&gt;BBTHEN\u00a0 //\u00a0 checks ufo's active status and whether ufo's Y position is greater than channel B's volume regulator<br/>\u00a0BB=K\u00a0 //\u00a0 volume regulator of channel B equalsUFOposition Y</p>\n<p>DATA14344,1010382844FEFE28000000384454FE38101010101010\u00a0 //\u00a0 graphic values ??of the sprites<br/>\u00a0 \u00a0//\u00a0\u00a0</p>\n<p>9-------------------------------------\u00a0 //\u00a0\u00a0<br/>A(L)=A:S(L)=S:D(L)=D:F(L)=F:G(L)=G:H(L)=H:J(L)=J\u00a0 //\u00a0 transfer of values ??from simple variables to variables in the ufos matrix</p>\n<p>NEXTL\u00a0 //\u00a0 ends UFOS controller loop</p>\n<p>SOUND2,RND(1)*255\u00a0 //\u00a0 sets random frequency on channel B</p>\n<p>SOUND9,(BB+16)\\13\u00a0 //\u00a0 sets volume on channel B</p>\n<p>LOCATE0,1\u00a0 //\u00a0 sets print position on line 1</p>\n<p>PRINTCHR$(27)+\"L\"\u00a0 //\u00a0 insert line in line1</p>\n<p>LOCATERND(1)*29,1\u00a0 //\u00a0 sets random column printing on row1</p>\n<p>PRINT\"\u00f8\";\u00a0 //\u00a0 prints star character</p>\n<p>IFZ=1THEN\u00a0 //\u00a0 \u00a0checks activeUFOshooting status<br/>\u00a0X=X+VV\u00a0 //\u00a0 updates X move fromUFOshot<br/>\u00a0C=C+3\u00a0 //\u00a0 updates Y move fromUFOshot<br/>\u00a0PUTSPRITE20,(X\\10,C),RND(1)*13+2,4\u00a0 //\u00a0 printsUFOshot sprite with random color<br/>\u00a0IFC&gt;192THEN\u00a0 //\u00a0 \u00a0checks if theUFOshot went under the screen<br/>\u00a0 Z=0\u00a0 // UFOshot inactive status</p>\n<p>DATA1984,0000103810000000\u00a0 //\u00a0 \u00a0star character chart values</p>\n<p>10------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>LOCATE0,0\u00a0 //\u00a0 sets print position on the screen</p>\n<p>PRINTV#;\u00a0 //\u00a0 print score</p>\n<p>FORL=0TO3\u00a0 //\u00a0 loop to adjust the framerate</p>\n<p>L=TIME\u00a0 //\u00a0 framerate adjustment</p>\n<p>NEXTL,N\u00a0 //\u00a0 ends the framerate and gameplay loops</p>\n<p>SOUND8,0\u00a0 //\u00a0 mutes channel A</p>\n<p>SOUND9,0\u00a0 //\u00a0 mutes channel B</p>\n<p>SOUND12,200\u00a0 //\u00a0 increases the duration of the audio effect</p>\n<p>SOUND13,1\u00a0 //\u00a0 sets the audio effect</p>\n<p>SOUND10,16\u00a0 //\u00a0 triggers the audio effect on channel C</p>\n<p>VPOKE6914,5\u00a0 //\u00a0 changes the player's graphic to explosion</p>\n<p>TIME=0\u00a0 //\u00a0 reset computer clock count</p>\n<p>FORN=0TO300\u00a0 //\u00a0 10 second pause loop</p>\n<p>N=TIME\u00a0 //\u00a0 waiting 10 seconds</p>\n<p>NEXTN\u00a0 //\u00a0 end loop pause</p>\n<p>SOUND12,50\u00a0 //\u00a0 returns the duration of the audio effect to the normal game</p>\n<p>IFV#&gt;R#THEN\u00a0 //\u00a0 \u00a0checks if Score was higher than Record<br/>\u00a0R#=V#\u00a0 //\u00a0 Record equals Score<br/>\u00a0GOTO3\u00a0 //\u00a0 \u00a0go to line 3<br/>\u00a0ELSE3\u00a0 //\u00a0 \u00a0go to line 3</p>\n<p>DATA14366,10100000103810000000105438FE385410007E42C3C3427E0000,8198,A1A1\u00a0 //\u00a0 graphic values ??of sprites and yellow color for number characters</p>\n<p>( Descri\u00e7\u00e3o original em Portugu\u00eas )</p>\n<p>Nota: este jogo foi produzido em basic para rodar sob o interpretador Xbasic<br/>maquina: MSX2 ou superior</p>\n<p>para jogar<br/>use as setas do teclado:\u00a0<br/>esquerda e direita para mover a nave na horizontal<br/>cima em abaixo para selecionar a cor do laser<br/>use a barra de espa\u00e7o para atirar</p>\n<p>1-------------------------------------<br/>BLOAD\"x.b\",R\u00a0 \u00a0//\u00a0 carrega o interpretador Xbasic (s\u00f3 necess\u00e1rio para performance, o programa funciona sem esse recurso, para eliminar o Xbasic basta deletar esse comando e o comando _TURBOON na linha 2</p>\n<p>DEFINTA-Z\u00a0 //\u00a0 define todas as vari\u00e1veis num\u00e9ricas para tipo inteiro</p>\n<p>Y=RND(-TIME)\u00a0 //\u00a0 \u00a0define a semente do Randon pelo clock do computador</p>\n<p>COLOR8,1,1\u00a0 //\u00a0 \u00a0define a cor vermelha para texto e preto para a tela</p>\n<p>SCREEN1,1,0\u00a0 //\u00a0 \u00a0define modo de texto gr\u00e1fico</p>\n<p>WIDTH28\u00a0 //\u00a0 define 28 colunas de texto</p>\n<p>KEYOFF\u00a0 //\u00a0 apaga o mostrador das teclas de fun\u00e7\u00e3o</p>\n<p>CLS\u00a0 //\u00a0 apaga a tela</p>\n<p>FORT=0TO5\u00a0 //\u00a0 corresponde aos 6 caracteres para interface de sele\u00e7\u00e3o do laser</p>\n<p>B=200+T*8\u00a0 //\u00a0 define o caractere na tabela ASCII\u00a0</p>\n<p>VPOKEBASE(5)+574+(T*32),B\u00a0 //\u00a0 imprime o caractere na posi\u00e7\u00e3o da tela</p>\n<p>FORY=0TO7\u00a0 //\u00a0 corresponde aos 8bytes do gr\u00e1fico do caractere</p>\n<p>VPOKEBASE(7)+B*8+Y,SGN(YMOD7)*126\u00a0 //\u00a0 altera o gr\u00e1fico do caractere</p>\n<p>NEXTY,T\u00a0 //\u00a0 encerra o layout gr\u00e1fico da interface de sele\u00e7\u00e3o do laser</p>\n<p>FORY=0TO13:READI:SOUNDY,I:NEXTY\u00a0 //\u00a0 configura os 3 canais de \u00e1udio</p>\n<p>FORY=1TO22\u00a0 //\u00a0 corresponde \u00e0s estrelas iniciais do starfield\u00a0</p>\n<p>LOCATERND(1)*29,23\u00a0 //\u00a0 sorteia posi\u00e7\u00e3o para impress\u00e3o na linha 23</p>\n<p>PRINT\"\u00f8\"\u00a0 //\u00a0 imprime caractere de estrela</p>\n<p>NEXTY\u00a0 fecha estrelas iniciais\u00a0 //\u00a0\u00a0</p>\n<p>2-------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>FORP=0TO6\u00a0 //\u00a0 corresponde a sequencias de bytes a serem inseridos na VRAM</p>\n<p>READH,V$\u00a0 //\u00a0 \u00a0carrega endere\u00e7o inicial da Vram e String com sequ\u00eancia de Hexa</p>\n<p>FORT=1TOLEN(V$)STEP2\u00a0 //\u00a0 \u00a0conta o comprimento da string de sequ\u00eancia de hexa pulando em 2\u00a0</p>\n<p>VPOKEH,VAL(\"&amp;H\"+MID$(V$,T,2))\u00a0 //\u00a0 imprime na vram o valor hexa identificado no fragmento da string no endere\u00e7o H</p>\n<p>H=H+1\u00a0 //\u00a0 atualiza endere\u00e7o para pr\u00f3ximo byte</p>\n<p>NEXTT,P\u00a0 //\u00a0 completa a leitura da string e inicia nova sequencia</p>\n<p>COLOR=RESTORE\u00a0 //\u00a0 ativa a mudan\u00e7a de rgb da paleta de cores (A \u00fanica justificativa pra usar o MSX2 ou &gt; \u00e9 a altera\u00e7\u00e3o da paleta)</p>\n<p>_TURBOON\u00a0 //\u00a0 \u00a0ativa o interpretador Xbasic (este comando s\u00f3 existe na vers\u00e3o ORIGM_X.BAS pois o MSXbasic n\u00e3o o reconhece)</p>\n<p>DIMA(9),S(9),D(9),F(9),G(9),H(9),J(9)\u00a0 //\u00a0 prepara as vari\u00e1veis de matriz utilizadas no algoritmo dos UFOS</p>\n<p>R#=0\u00a0 //\u00a0 vari\u00e1vel para o Recorde</p>\n<p>DATA0,0,0,1,0,0,31,220,0,0,0,255,50,0,8228,07020707000570067000670071,8217,213141516171E1\u00a0 //\u00a0 valores dos canais de \u00e1udio, configura\u00e7\u00e3o da paleta e cores dos caracteres</p>\n<p>3-------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>LOCATE12,11\u00a0 //\u00a0 posi\u00e7\u00e3o para impress\u00e3o do t\u00edtulo na tela</p>\n<p>PRINT\"ORIGM\"\u00a0 //\u00a0 imprime o t\u00edtulo do jogo</p>\n<p>FORN=0TO1\u00a0 //\u00a0 contador N de 0 a 1</p>\n<p>N=ABS(STRIG(0))\u00a0 //\u00a0 \u00a0valor de N \u00e9 definido pelo estado do bot\u00e3o de tiro do teclado (Space)</p>\n<p>NEXTN\u00a0 //\u00a0 mantem o loop at\u00e9 N=1</p>\n<p>V#=0\u00a0 //\u00a0 vari\u00e1vel para o Score</p>\n<p>LOCATE0,0\u00a0 //\u00a0 posi\u00e7\u00e3o para impress\u00e3o do score</p>\n<p>PRINTV#;\"\u00a0 \u00a0 \u00a0 \u00a0 \"\u00a0 //\u00a0 imprime score e sequencia de espa\u00e7os para apagar o score anterior</p>\n<p>LOCATE20,0\u00a0 //\u00a0 posi\u00e7\u00e3o para impress\u00e3o do recorde</p>\n<p>PRINTR#;\u00a0 //\u00a0 imprime recorde</p>\n<p>FORN=19TO31\u00a0 //\u00a0 corresponde \u00e0s camadas de sprites dos ufos e tiros</p>\n<p>PUTSPRITEN,(0,-17),0,0\u00a0 //\u00a0 reposiciona os sprites para fora da tela</p>\n<p>A(NMOD10)=0\u00a0 //\u00a0 zera os estados dos ufos para inativos</p>\n<p>NEXTN\u00a0 //\u00a0\u00a0</p>\n<p>Q=124\u00a0 //\u00a0 posi\u00e7\u00e3o X do player</p>\n<p>W=5\u00a0 //\u00a0 laser selecionado</p>\n<p>I=100\u00a0 //\u00a0 tempo de spam do ufo</p>\n<p>O=0\u00a0 //\u00a0 quantidade deUFOpor onda</p>\n<p>P=0\u00a0 // contador de ondas\u00a0</p>\n<p>R=0\u00a0 //\u00a0 status do laser</p>\n<p>Z=0\u00a0 //\u00a0 status do tiro do ufo</p>\n<p>VPOKE6913,Q\u00a0 //\u00a0 posiciona o player</p>\n<p>VPOKE6914,1\u00a0 //\u00a0 ajusta o sprite do player</p>\n<p>VPOKE6916,173\u00a0 //\u00a0 posiciona o seletor do laser</p>\n<p>FORN=0TO1\u00a0 //\u00a0 \u00a0inicia loop do gameplay</p>\n<p>TIME=0\u00a0 //\u00a0 inicia contador do clock do computador</p>\n<p>4-------------------------------------\u00a0 //\u00a0\u00a0<br/>N=0\u00a0 //\u00a0 mantem loop do gameplay</p>\n<p>E=STICK(0)\u00a0 //\u00a0 leitura do estado do joystick do teclado (setas)</p>\n<p>Q=Q+(-(E&gt;1ANDE&lt;5ANDQ&lt;222)+(E&gt;5ANDE&lt;9ANDQ&gt;16))*3\u00a0 //\u00a0 calcula movimento do player</p>\n<p>VPOKE6913,Q\u00a0 //\u00a0 atualiza a posi\u00e7\u00e3o do player</p>\n<p>E$=INKEY$\u00a0 //\u00a0 leitura do teclado</p>\n<p>A$=CHR$(30)\u00a0 //\u00a0 caractere correspondente \u00e0 seta pra cima</p>\n<p>B$=CHR$(31)\u00a0 //\u00a0 caractere correspondente \u00e0 seta pra baixo</p>\n<p>W=(W+6+(E$=A$)-(E$=B$))MOD6\u00a0 //\u00a0 calcula sele\u00e7\u00e3o de laser</p>\n<p>VPOKE6916,133+(W*8)\u00a0 //\u00a0 atualiza a posi\u00e7\u00e3o da sele\u00e7\u00e3o do laser</p>\n<p>I=(I+1)MOD(120\\(P+1))\u00a0 //\u00a0 \u00a0contador de spam dos ufos</p>\n<p>IFE$=A$ORE$=B$THEN\u00a0 //\u00a0 \u00a0verifica se as teclas cima ou baixo foram pressionadas\u00a0<br/>\u00a0SOUND0,255\u00a0 //\u00a0 define frequ\u00eancia no canal A<br/>\u00a0SOUND8,15\u00a0 //\u00a0 define volume no canal A<br/>\u00a0AA=1\u00a0 //\u00a0 status de beep ativo<br/>\u00a0ELSE<br/>\u00a0IFAA=1THEN\u00a0 //\u00a0 \u00a0se status de beep ativo<br/>\u00a0 SOUND8,0\u00a0 //\u00a0 \u00a0cancela volume do canal A<br/>\u00a0 AA=0\u00a0 //\u00a0 \u00a0status de beep inativo</p>\n<p>5-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFSTRIG(0)ANDR=0THEN\u00a0 //\u00a0 verifica se tiro do teclado foi pressionado e status do laser \u00e9 inativo<br/>\u00a0R=1\u00a0 //\u00a0 \u00a0status do laser ativo\u00a0<br/>\u00a0T=Q\u00a0 //\u00a0 \u00a0define posi\u00e7\u00e3o X do laser<br/>\u00a0Y=183\u00a0 //\u00a0 define posi\u00e7\u00e3o Y do laser<br/>\u00a0U=W+2\u00a0 //\u00a0 define cor do laser<br/>\u00a0GOTO5\u00a0 //\u00a0 volta a executar a linha 5<br/>\u00a0ELSE<br/>\u00a0IFR&gt;0THEN\u00a0 //\u00a0 \u00a0se status do laser ativo<br/>\u00a0 Y=Y-24\u00a0 //\u00a0 \u00a0movimenta o laser para cima<br/>\u00a0 IFY&lt;0THEN\u00a0 //\u00a0 \u00a0se posi\u00e7\u00e3o Y do laser for menor que 0\u00a0<br/>\u00a0 \u00a0R=0\u00a0 //\u00a0 status do laser desativo<br/>\u00a0 \u00a0PUTSPRITE19,(0,-17)\u00a0 //\u00a0 apaga sprite1 do laser<br/>\u00a0 \u00a0PUTSPRITE18,(0,-17)\u00a0 //\u00a0 apaga sprite2 do laser<br/>\u00a0 \u00a0SOUND8,0\u00a0 //\u00a0 cancela volume do canal A<br/>\u00a0 \u00a0ELSE<br/>\u00a0 \u00a0PUTSPRITE19,(T,Y-16),U,3\u00a0 //\u00a0 imprime sprite1 to laser<br/>\u00a0 \u00a0PUTSPRITE18,(T,Y),U,3\u00a0 //\u00a0 imprime sprite2 to laser<br/>\u00a0 \u00a0SOUND0,255-(Y+24)\u00a0 //\u00a0 define frequ\u00eancia no canal A<br/>\u00a0 \u00a0SOUND8,(y+24)\\13\u00a0 //\u00a0 define volume no canal A</p>\n<p>DATA6912,AF7C010FADEC060F\u00a0 //\u00a0 valores atributos dos sprites\u00a0</p>\n<p>6-------------------------------------\u00a0 //\u00a0\u00a0<br/>E=PEEK(&amp;HF3E7)AND32\u00a0 //\u00a0 verifica se houve colis\u00e3o entre sprites</p>\n<p>BB=0\u00a0 //\u00a0 regulador de volume do canal B<br/>\u00a0 \u00a0//\u00a0\u00a0<br/>FORL=0TO9\u00a0 //\u00a0 \u00a0loop controlador dos UFOS</p>\n<p>A=A(L):S=S(L):D=D(L):F=F(L):G=G(L):H=H(L):J=J(L)\u00a0 //\u00a0 transfer\u00eancia de valores das vari\u00e1veis de matriz dos ufos para vari\u00e1veis simples</p>\n<p>\u00a0// descri\u00e7\u00e3o das vari\u00e1veis\u00a0 //\u00a0\u00a0<br/>A,status\u00a0 //\u00a0\u00a0<br/>S,posi\u00e7\u00e3o X\u00a0 //\u00a0\u00a0<br/>D,posi\u00e7\u00e3o Y\u00a0 //\u00a0\u00a0<br/>F,posi\u00e7\u00e3o X destino\u00a0 //\u00a0\u00a0<br/>G,incremento de X\u00a0 //\u00a0\u00a0<br/>H,incremendo de Y\u00a0 //\u00a0\u00a0<br/>J,cor\u00a0 //\u00a0\u00a0</p>\n<p>BL=31-L\u00a0 //\u00a0 c\u00e1lculo do layer do sprite do ufo</p>\n<p>B=6914+BL*4\u00a0 //\u00a0 c\u00e1lculo da posi\u00e7\u00e3o na VRAM dos atributos do sprite</p>\n<p>S=S+G\u00a0 //\u00a0 movimento X (S) doUFOpelo incremento G</p>\n<p>VS=P+1\u00a0 //\u00a0 Valor de Score do UFO</p>\n<p>IFI=0ANDA=0THEN\u00a0 //\u00a0 \u00a0verifica se o tempo de spawn e se oUFOest\u00e1 inativo caso sim, inicia um ufo<br/>\u00a0I=1\u00a0 //\u00a0 incrementa contador de spawn para n\u00e3o criar mais de umUFO<br/>\u00a0A=1\u00a0 //\u00a0 status doUFOativo<br/>\u00a0S=RND(1)*200+20\u00a0 //\u00a0 define posi\u00e7\u00e3o X aleat\u00f3ria<br/>\u00a0D=80\u00a0 //\u00a0 define posi\u00e7\u00e3o Y<br/>\u00a0F=S\u00a0 //\u00a0 iguala posi\u00e7\u00e3o X destino com posi\u00e7\u00e3o X atual<br/>\u00a0G=0\u00a0 //\u00a0 neutraliza o incremento de movimenta\u00e7\u00e3o em X<br/>\u00a0O=(O+1)MOD(2+P)\u00a0 //\u00a0 contador de quantidade deUFOpor onda<br/>\u00a0P=P-(O=0)\u00a0 //\u00a0 contador de ondas<br/>\u00a0J=PMOD6+2\u00a0 //\u00a0 define a cor doUFOpela onda<br/>\u00a0H=(P*2)+1\u00a0 //\u00a0 define o incremento de movimento Y doUFO(o 2 pode regular dificuldade do jogo)<br/>\u00a0IFP&gt;29THEN\u00a0 //\u00a0 define a onda final\u00a0<br/>\u00a0 P=30\u00a0 //\u00a0 mantem a onda final eterna<br/>\u00a0 J=RND(1)*6+2\u00a0 //\u00a0 \u00a0faz cadaUFOda onda final com uma cor diferente\u00a0</p>\n<p>7-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFA=1THEN\u00a0 //\u00a0 verifica status ativo do ufo<br/>\u00a0D=D+H\u00a0 //\u00a0 movimento Y do ufo<br/>\u00a0K=D/10\u00a0 //\u00a0 posi\u00e7\u00e3o Y doUFOna tela<br/>\u00a0PUTSPRITEBL,(S,K),J,2\u00a0 //\u00a0 imprime sprite do ufo<br/>\u00a0IFK&gt;192THEN\u00a0 //\u00a0 \u00a0verifica se oUFOsaiu por baixo da tela<br/>\u00a0 A=0\u00a0 //\u00a0 desativa o status doUFO<br/>\u00a0 ELSE<br/>\u00a0IFEANDR=1ANDABS(S-T)&lt;8ANDABS(K-Y)&lt;32ANDU=JTHEN verifica se houve colis\u00e3o de sprite, status ativo do laser, e se oUFOest\u00e1 dentro da \u00e1rea de colis\u00e3o com o laser\u00a0 //\u00a0\u00a0<br/>\u00a0 A=2\u00a0 //\u00a0 status doUFOem explos\u00e3o\u00a0<br/>\u00a0 VPOKEB,5\u00a0 //\u00a0 \u00a0sprite doUFOem explos\u00e3o<br/>\u00a0 SOUND13,0\u00a0 //\u00a0 define envelope de efeito sonoro<br/>\u00a0 SOUND10,16\u00a0 //\u00a0 dispara efeito sonoro no canal C (definido para ru\u00eddos na linha1)<br/>\u00a0 LOCATE(S-16)\\8,K\\8\u00a0 //\u00a0 calcula posi\u00e7\u00e3o na tela para impress\u00e3o do valor de Score do UFO<br/>\u00a0 PRINTVS\u00a0 //\u00a0 imprime valor de Score do UFO<br/>\u00a0 ELSE<br/>\u00a0IFS=FTHEN\u00a0 //\u00a0 \u00a0verifica se a posi\u00e7\u00e3o X atual doUFO\u00e9 igual \u00e0 posi\u00e7\u00e3o X destino<br/>\u00a0 F=RND(1)*200+20\u00a0 //\u00a0 sorteia nova posi\u00e7\u00e3o X destino<br/>\u00a0 G=SGN(F-S)\u00a0 //\u00a0 calcula o incremento para movimento em X\u00a0<br/>\u00a0 ELSE<br/>\u00a0ELSE<br/>\u00a0IFA=2THEN\u00a0 //\u00a0 verifica status doUFOem explos\u00e3o<br/>\u00a0A=0\u00a0 //\u00a0 status doUFOinativo<br/>\u00a0VPOKEB,0\u00a0 //\u00a0 gr\u00e1fico do sprite doUFO\u00e9 apagado\u00a0<br/>\u00a0V#=V#+VS\u00a0 //\u00a0 score \u00e9 somado pelo valor de Score do UFO<br/>\u00a0 \u00a0//\u00a0\u00a0</p>\n<p>8-------------------------------------\u00a0 //\u00a0\u00a0<br/>IFEANDA=1ANDABS(S-Q)&lt;12ANDK\\8=21THEN\u00a0 //\u00a0 verifica se houve colis\u00e3o de sprite, status ativo do ufo, e se oUFOest\u00e1 dentro da \u00e1rea de colis\u00e3o com o player<br/>\u00a0N=1\u00a0 //\u00a0 encerra o loop gameplay<br/>\u00a0ELSE<br/>IFK&lt;64ANDZ=0ANDA=1THEN\u00a0 //\u00a0 verifica posi\u00e7\u00e3o Y doUFOem um ter\u00e7o de cima da tela, status desativado do tiro do ufo, status ativo do ufo<br/>\u00a0Z=1\u00a0 //\u00a0 status do tiro doUFOativo<br/>\u00a0X=S*10\u00a0 //\u00a0 define posi\u00e7\u00e3o X do tiro do ufo<br/>\u00a0C=K\u00a0 //\u00a0 define posi\u00e7\u00e3o Y do tiro<br/>\u00a0VV=(Q*10-X)\\((175-C)\\3)\u00a0 //\u00a0 calcula incremento de X para movimentar o tiro do ufo<br/>\u00a0SOUND2,255\u00a0 //\u00a0 define frequencia no canal B<br/>\u00a0SOUND9,15\u00a0 //\u00a0 define volume no canal B<br/>\u00a0ELSE<br/>IFEANDZ=1ANDABS(Q-(X\\10))&lt;8ANDC\\8=22THEN\u00a0 //\u00a0 verifica se houve colis\u00e3o de sprite, status ativo do tiro do ufo, e se o tiro doUFOest\u00e1 dentro da \u00e1rea de colis\u00e3o com o player<br/>\u00a0N=1\u00a0 //\u00a0 encerra o loop gameplay<br/>\u00a0ELSE<br/>IFA=1ANDK&gt;BBTHEN\u00a0 //\u00a0 verifica status ativo doUFOe se posi\u00e7\u00e3o Y doUFO\u00e9 maior que o regulador de volume do canal B\u00a0\u00a0<br/>\u00a0BB=K\u00a0 //\u00a0 regulador de volume do canal B se iguala \u00e0 posi\u00e7\u00e3o Y do ufo</p>\n<p>DATA14344,1010382844FEFE28000000384454FE38101010101010\u00a0 //\u00a0 valores gr\u00e1ficos dos sprites<br/>\u00a0 \u00a0//\u00a0\u00a0</p>\n<p>9-------------------------------------\u00a0 //\u00a0\u00a0<br/>A(L)=A:S(L)=S:D(L)=D:F(L)=F:G(L)=G:H(L)=H:J(L)=J\u00a0 //\u00a0 transfer\u00eancia dos valores de vari\u00e1veis simples para vari\u00e1veis na matriz dos ufos</p>\n<p>NEXTL\u00a0 //\u00a0 encerra loop controlador dos UFOS</p>\n<p>SOUND2,RND(1)*255\u00a0 //\u00a0 define frequ\u00eancia aleat\u00f3ria no canal B</p>\n<p>SOUND9,(BB+16)\\13\u00a0 //\u00a0 define volume no canal B</p>\n<p>LOCATE0,1\u00a0 //\u00a0 define posi\u00e7\u00e3o de impress\u00e3o na linha 1</p>\n<p>PRINTCHR$(27)+\"L\"\u00a0 //\u00a0 insere linha na linha1</p>\n<p>LOCATERND(1)*29,1\u00a0 //\u00a0 define impress\u00e3o em coluna aleat\u00f3ria na linha1</p>\n<p>PRINT\"\u00f8\";\u00a0 //\u00a0 imprime caractere de estrela</p>\n<p>IFZ=1THEN\u00a0 //\u00a0 \u00a0verifica status ativo do tiro do ufo<br/>\u00a0X=X+VV\u00a0 //\u00a0 atualiza movimento X do tiro do ufo<br/>\u00a0C=C+3\u00a0 //\u00a0 atualiza movimento Y do tiro do ufo<br/>\u00a0PUTSPRITE20,(X\\10,C),RND(1)*13+2,4\u00a0 //\u00a0 imprime sprite do tiro doUFOcom cor aleat\u00f3ria<br/>\u00a0IFC&gt;192THEN\u00a0 //\u00a0 \u00a0verifica se o tiro doUFOsaiu por baixo da tela<br/>\u00a0 Z=0\u00a0 //\u00a0 status inativo do tiro doUFO</p>\n<p>DATA1984,0000103810000000\u00a0 //\u00a0 \u00a0valores do gr\u00e1fico do caractere estrela</p>\n<p>10------------------------------------\u00a0 //\u00a0\u00a0</p>\n<p>LOCATE0,0\u00a0 //\u00a0 define posi\u00e7\u00e3o de impress\u00e3o na tela</p>\n<p>PRINTV#;\u00a0 //\u00a0 imprime score</p>\n<p>FORL=0TO3\u00a0 //\u00a0 loop para regular o framerate</p>\n<p>L=TIME\u00a0 //\u00a0 regulagem de framerate</p>\n<p>NEXTL,N\u00a0 //\u00a0 encerra os loops de framerate e gameplay</p>\n<p>SOUND8,0\u00a0 //\u00a0 silencia o canal A</p>\n<p>SOUND9,0\u00a0 //\u00a0 silencia o canal B</p>\n<p>SOUND12,200\u00a0 //\u00a0 aumenta a dura\u00e7\u00e3o do efeito de \u00e1udio</p>\n<p>SOUND13,1\u00a0 //\u00a0 define o efeito de \u00e1udio</p>\n<p>SOUND10,16\u00a0 //\u00a0 dispara o efeito de \u00e1udio no canal C</p>\n<p>VPOKE6914,5\u00a0 //\u00a0 altera o gr\u00e1fico do player para explos\u00e3o</p>\n<p>TIME=0\u00a0 //\u00a0 zera contagem do clock do computador</p>\n<p>FORN=0TO300\u00a0 //\u00a0 loop pausa de 10 segundos</p>\n<p>N=TIME\u00a0 //\u00a0 esperando 10 segundos</p>\n<p>NEXTN\u00a0 //\u00a0 encerra loop pausa</p>\n<p>SOUND12,50\u00a0 //\u00a0 volta a dura\u00e7\u00e3o do efeito de \u00e1udio para o normal do jogo</p>\n<p>IFV#&gt;R#THEN\u00a0 //\u00a0 \u00a0verifica se Score foi maior que Recorde<br/>\u00a0R#=V#\u00a0 //\u00a0 Recorde iguala a Score<br/>\u00a0GOTO3\u00a0 //\u00a0 \u00a0vai para a linha 3<br/>\u00a0ELSE3\u00a0 //\u00a0 \u00a0vai para a linha 3</p>\n<p>DATA14366,10100000103810000000105438FE385410007E42C3C3427E0000,8198,A1A1\u00a0 //\u00a0 valores gr\u00e1ficos de sprites e cor amarela para os caracteres de n\u00fameros</p>", "metacritic": null, "released": "2021-03-04", "tba": false, "updated": "2021-03-05T07:33:32", "background_image": "https://media.rawg.io/media/screenshots/ba7/ba76035d7358662e70ed1f86451a9f9b.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 19, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Shooter"], "publishers": [], "esrb_rating": null}