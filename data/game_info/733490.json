{"id": 733490, "slug": "bastilude-by-marcos-retrobits", "name": "Bastilude by Marco's Retrobits", "name_original": "Bastilude by Marco's Retrobits", "description": "<p>Bastilude</p>\n<p>BASIC 10-Liner action videogame for the Sinclair ZX Spectrum</p>\n<p>Marco Varesio (Marco\u2019s Retrobits) https://retrobits.itch.io/</p>\n<p>English language blog: https://retrobits.altervista.org/</p>\n<p>Italian language blog: https://somebitsofme.altervista.org/</p>\n<p>YouTube channel: https://www.youtube.com/channel/UCWTxG8paNsOUEU5mPcNklXA</p>\n<p>Play online/download link: https://retrobits.itch.io/bastilude</p>\n<p>Gameplay video: </p>\n\n<p>Bastilude (Basic Hastilude) is an action videogame written in just 10 lines of BASIC programming language, for the Sinclair ZX Spectrum home computer.</p>\n<p>It is my entry to the 2022 edition of the BASIC 10 Liner Contest, PUR-80 (max 80 characters per logical line, abbreviations allowed) category.</p>\n<p>Bastilude is inspired by the Joust arcade game, developed by Williams and first released in 1982.</p>\n<p>Gameplay</p>\n<p>========</p>\n<p>The player controls (with a lot of imagination) a knight riding a green dragon. The objective is to unseat the opponent knights, riding magenta dragons, in a joust, or hastilude. The winner of a joust is the rider whose mount is highest at the moment of contact. A collision of equal height repels the characters apart. The difficulty level progressively increases as the opponents are defeated and they become faster.</p>\n<p>When the program starts, the title screen is shown.</p>\n<p>Thou can start the game by pressing any key. The \u2018o\u2019 and \u2018p\u2019 keys control the dragon\u2019s horizontal direction and velocity, while the \u2018z\u2019 key makes the dragon fly. Only a single command is accepted at a time, so you can either control the horizontal speed and direction or flap the dragon's wings.</p>\n<p>In the lower part of the screen, the program keeps track of the player\u2019s current lives left and score and of the high score. A quick reminder of the controls is also shown.</p>\n<p>Program description</p>\n<p>===================</p>\n<p>Variables</p>\n<p>---------</p>\n<p>C Player X position</p>\n<p>R Player Y position</p>\n<p>X Player X position on screen (integer part of C)</p>\n<p>Y Player Y position on screen (integer part of R)</p>\n<p>V Player horizontal velocity</p>\n<p>W Player vertical velocity</p>\n<p>B Opponent X position</p>\n<p>A Opponent Y position</p>\n<p>H Opponent X position on screen (integer part of B)</p>\n<p>G Opponent Y position on screen (integer part of A)</p>\n<p>F Opponent horizontal velocity</p>\n<p>E Opponent vertical velocity</p>\n<p>L Lives left</p>\n<p>S Current score</p>\n<p>T High score</p>\n<p>Z Random number 0&lt;=Z&lt;1</p>\n<p>I Loop iterator</p>\n<p>Program listing</p>\n<p>---------------</p>\n<p>1 BRIGHT 1: BORDER 6: PAPER 0: CLS: FOR i=1 TO 7: PRINT AT i+6,i+6;INK i;\"BASTILUDE\": NEXT i: LET r=21: LET c=15: IF PEEK 25102=128 THEN LET t=0</p>\n<p>2 INK 4: LET v=0: LET w=1: LET a=10: LET b=15: LET e=.2: LET f=-.2: LET g=0: LET h=0: LET l=2: LET s=0: GO SUB 10: PAUSE 0: BORDER 6: CLS: GO SUB 10</p>\n<p>3 LET x=INT c: LET y=INT r: LET g=INT a: LET h=INT b: PRINT AT y,x;CHR$(61+SGN v+(v=0));INK 3;AT g,h;CHR$(61+SGN f+(f=0)): IF h&lt;&gt;x THEN GO TO 6</p>\n<p>4 IF g=y-1 THEN BORDER 3: RANDOMIZE: LET l=l-1: LET r=21: LET c=8+16*(h&lt;15): LET v=0: BEEP .5,-23: PRINT AT y,x;\" \": GO SUB 10: GO TO 1+2*(l&gt;-1)</p>\n<p>5 IF y=g-1 THEN BORDER 4: RANDOMIZE: LET s=s+1: LET a=RND*22: LET b=RND*32: LET e=ABS e+.05: LET f=ABS f+.05: BEEP .1,12: PRINT AT g,h;\" \":GO SUB 10: GO TO 3</p>\n<p>6 LET k$=INKEY$: LET v=v+.2*(k$=\"p\")*(v&lt;1)-.2*(k$=\"o\")*(v&gt;-.8): IF e&gt;.95 THEN LET e=.95</p>\n<p>7 LET w=-1*(k$=\"z\")*(y&gt;0) +(k$&lt;&gt;\"z\")*(y&lt;21)+(y=0): LET z=RND: IF y=g AND h=x THEN LET f=-f: LET v=-SGN f*ABS v</p>\n<p>8 LET c=c+v: LET c=c-32*(c&gt;=32)+32*(c&lt;0): LET b=b+f: LET b=b-32*(b&gt;=32)+32*(b&lt;0): LET r=r+w</p>\n<p>9 LET a=a+e*SGN(y-1-g)*(g&gt;0)+(g=0): PRINT AT y,x;\" \";AT g,h;\" \": LET f=-f*(z&lt;.05)+f*(z&gt;=.05): GO TO 3</p>\n<p>10 LET t=t*(t&gt;s)+s*(t&lt;=s): PRINT #1;PAPER 6;INK 1;AT 0,0;\"Sc:\";s,\"Hi:\";t,\"Lives:\";l,\"<o>p ^z\": BORDER 1: RETURN</o></p>\n<p>Source code explained</p>\n<p>---------------------</p>\n<p>Initialization</p>\n<p>Lines 1 and 2 display the title screen and perform variables initialization.</p>\n<p>1 BRIGHT 1: BORDER 6: PAPER 0: CLS: FOR i=1 TO 7: PRINT AT i+6,i+6;INK i;\"BASTILUDE\": NEXT i: LET r=21: LET c=15: IF PEEK 25102=128 THEN LET t=0</p>\n<p>2 INK 4: LET v=0: LET w=1: LET a=10: LET b=15: LET e=.2: LET f=-.2: LET g=0: LET h=0: LET l=2: LET s=0: GO SUB 10: PAUSE 0: BORDER 6: CLS: GO SUB 10</p>\n<p>The first two lines are executed every time a new game starts, but the high score T must be defined and initialized to zero only once. This is done by inspecting the variables area in memory by means of the PEEK statement at line 1; 25102 (0x620E) is, in fact, the address at which the high score variable identifier is expected (this address has been empirically determined, based on the program length). At the first execution of the PEEK 25102 statement, only the loop variable I and the R and C variables have been defined and this location will contain the terminator value 128 (0x80), so the T variable is defined and initialized to 0. On subsequent executions, the location will contain the value 116 (0x74), corresponding to the code of the \u201ct\u201d character, so the comparison with 128 will fail and the T variable value will not be set to 0 anymore.</p>\n<p>Game loop</p>\n<p>The actual game loop starts at line 3.</p>\n<p>3 LET x=INT c: LET y=INT r: LET g=INT a: LET h=INT b: PRINT AT y,x;CHR$(61+SGN v+(v=0));INK 3;AT g,h;CHR$(61+SGN f+(f=0)): IF h&lt;&gt;x THEN GO TO 6</p>\n<p>The integer part of the player\u2019s and opponent\u2019s coordinates are computed and are used for PRINTing them on screen. Both player and opponents are depicted using the \u201c&lt;\u201d (code 60) or \u201c&gt;\u201d (code 62) characters, depending on their horizontal direction (facing left or right).</p>\n<p>If the X coordinates of player and opponent differ, there cannot be any collision and the program jumps to line 6.</p>\n<p>Otherwise, if the opponent is above the player (line 4), the player loses one life and the game status is updated. If there are no more lives left, the program jumps to line 1, otherwise the player is positioned at the bottom line of the screen and the game loop continues at line 3.</p>\n<p>4 IF g=y-1 THEN BORDER 3: RANDOMIZE: LET l=l-1: LET r=21: LET c=8+16*(h&lt;15): LET v=0: BEEP .5,-23: PRINT AT y,x;\" \": GO SUB 10: GO TO 1+2*(l&gt;-1)</p>\n<p>If the player is above the opponent (line 5), the player scores one point, a new opponent appears at a random position and the opponent horizontal and vertical velocities increase. The game status is updated and the game loop continues at line 3.</p>\n<p>5 IF y=g-1 THEN BORDER 4: RANDOMIZE: LET s=s+1: LET a=RND*22: LET b=RND*32: LET e=ABS e+.05: LET f=ABS f+.05: BEEP .1,12: PRINT AT g,h;\" \":GO SUB 10: GO TO 3</p>\n<p>Line 6 reads the keyboard status and if either the \u201co\u201d (left) or \u201cp\u201d (right) key is pressed, the player\u2019s horizontal velocity V is updated accordingly. The opponent\u2019s vertical velocity E is limited so that it cannot become greater than 0.95, otherwise it would become impossible for the player to win the joust.</p>\n<p>6 LET k$=INKEY$: LET v=v+.2*(k$=\"p\")*(v&lt;1)-.2*(k$=\"o\")*(v&gt;-.8): IF e&gt;.95 THEN LET e=.95</p>\n<p>Line 7 checks if the \u201cz\u201d key is pressed and updates the player\u2019s vertical velocity W accordingly. If the player is ascending and hits the top of the screen (Y=0), it \u201cbounces\u201d down.</p>\n<p>The collision check is completed in the second part of line 7: if the player and opponent occupy the same position, the joust is a draw and the characters horizontal velocities are updated so that they will move to opposite directions.</p>\n<p>7 LET w=-1*(k$=\"z\")*(y&gt;0) +(k$&lt;&gt;\"z\")*(y&lt;21)+(y=0): LET z=RND: IF y=g AND h=x THEN LET f=-f: LET v=-SGN f*ABS v</p>\n<p>Line 8 updates both player\u2019s and opponent\u2019s X positions (C and B) based on horizontal velocities V and F. The player\u2019s Y position R is updated based on vertical velocity W.</p>\n<p>8 LET c=c+v: LET c=c-32*(c&gt;=32)+32*(c&lt;0): LET b=b+f: LET b=b-32*(b&gt;=32)+32*(b&lt;0): LET r=r+w</p>\n<p>In line 9, the opponent\u2019s Y coordinate A is updated based on vertical velocity E and player\u2019s Y position; in fact, the opponent tries to fly one position above the player in order to win the joust. Then, both characters are erased from screen; they will be displayed at the updated coordinates in the next game loop iteration. To add some unpredictability to the game, with a probability of 5% the opponent\u2019s horizontal direction is inverted. Finally, the program jumps back to the beginning of the game loop at line 3.</p>\n<p>9 LET a=a+e*SGN(y-1-g)*(g&gt;0)+(g=0): PRINT AT y,x;\" \";AT g,h;\" \": LET f=-f*(z&lt;.05)+f*(z&gt;=.05): GO TO 3</p>\n<p>Print game status routine</p>\n<p>The subroutine at line 10 first checks if current score S is greater than high score T and updates T accordingly. Then, it prints current score, high score, player\u2019s lives left and a reminder of the game controls at the bottom of the screen. Before returning to the caller, the border colour is restored to blue.</p>\n<p>10 LET t=t*(t&gt;s)+s*(t&lt;=s): PRINT #1;PAPER 6;INK 1;AT 0,0;\"Sc:\";s,\"Hi:\";t,\"Lives:\";l,\"<o>p ^z\": BORDER 1: RETURN</o></p>\n<p>Program lines length proof</p>\n<p>--------------------------</p>\n<p>By replacing each BASIC token with a single character and removing redundant blank spaces, each line in the resulting source code does not exceed the 80 characters limit:</p>\n<p>1B1:b6:C0:v:fi=1 F7:pIi+6,i+6;Xi;\"BASTILUDE\":ni:lr=21:lc=15:uO25102=128 Glt=0</p>\n<p>2X4:lv=0:lw=1:la=10:lb=15:le=.2:lf=-.2:lg=0:lh=0:ll=2:ls=0:h10:m0:b6:v:h10</p>\n<p>3lx=Rc:ly=Rr:lg=Ra:lh=Rb:pIy,x;U(61+Fv+(v=0));X3;Ig,h;U(61+Ff+(f=0)):uh&lt;&gt;x Gg6</p>\n<p>4ug=y-1 Gb3:t:ll=l-1:lr=21:lc=8+16*(h&lt;15):lv=0:Z.5,-23:pIy,x;\" \":h10:g1+2*(l&gt;-1)</p>\n<p>5uy=g-1 Gb4:t:ls=s+1:la=T*22:lb=T*32:le=Ge+.05:lf=Gf+.05:Z.1,12:pIg,h;\" \":h10:g3</p>\n<p>6lk$=XEY$:lv=v+.2*(k$=\"p\")*(v&lt;1)-.2*(k$=\"o\")*(v&gt;-.8):ue&gt;.95 Gle=.95</p>\n<p>7lw=-1*(k$=\"z\")*(y&gt;0) +(k$&lt;&gt;\"z\")*(y&lt;21)+(y=0):lz=T:uy=g Yh=x Glf=-f:lv=-Ff*Gv</p>\n<p>8lc=c+v:lc=c-32*(c&gt;=32)+32*(c&lt;0):lb=b+f:lb=b-32*(b&gt;=32)+32*(b&lt;0):lr=r+w</p>\n<p>9la=a+e*F(y-1-g)*(g&gt;0)+(g=0):pIy,x;\" \";Ig,h;\" \":lf=-f*(z&lt;.05)+f*(z&gt;=.05):g3</p>\n<p>10lt=t*(t&gt;s)+s*(t&lt;=s):p#1;C6;X1;I0,0;\"Sc:\";s,\"Hi:\";t,\"Lives:\";l,\"<o>p ^z\":b1:y</o></p>\n<p>Therefore, Bastilude is a suitable entry to the PUR-80 category of the BASIC 10 Liner Contest.</p>\n\n<p>References</p>\n<p>Joust Wikipedia entry: https://en.wikipedia.org/wiki/Joust_(video_game)</p>\n<p>Joust Atari 2600 manual: https://archive.org/details/Joust_1982_Atari/</p>", "metacritic": null, "released": "2022-02-01", "tba": false, "updated": "2022-02-04T06:44:34", "background_image": "https://media.rawg.io/media/screenshots/fa9/fa9fe6f8223b5d8c7301df83ade0991f.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 12, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Fighting"], "publishers": [], "esrb_rating": null}