{"id": 760957, "slug": "find-the-exit-red-by-out-bush", "name": "Find the Exit Red by Out Bush", "name_original": "Find the Exit Red by Out Bush", "description": "<p>Find the Exit Red</p>\n\n<p>Story:</p>\n<p>Red is now stuck within a Rectangular grid and has to Find the location of the Exit which has been randomly placed somewhere on the Grid.\u00a0</p>\n<p>As well as the Exit to Find, Red has to avoid Grumpy whose out to get him, though Red can only Visit a Square Once, so he must be careful not to cut himself off from a Square which is the Exit!\u00a0</p>\n<p>Like the original there's 5 Levels to get through, with each stage becomming smaller and again Grumpy also moves faster, though this game ends if Level 5 is completed, though returns to Level 1 if Grumpy gets Red.</p>\n\n<p>Controls:</p>\n<p>Use Cursor Keys to move Red Left, Right, Up &amp; Down.</p>\n<p>Requirements:</p>\n<p>An Amstrad CPC Emulator with SOUND capabilities</p>\n<p>For Windows:</p>\n<p>* Winape 2.0 Alpha 18 or later, though should work on earlier Alpha released</p>\n<p>* WinCPC</p>\n<p>* CPCE v1.94\u00a0</p>\n<p>For Mac:</p>\n<p>* Retro Virtual Machine 2.0</p>\n<p>I have supplied Tape Images (CDT file) as well as an DISC Image (DSK file). I've tested this game with Locomotive BASIC 1.0 using Winape 2.0 Alpha 18 and was working fine with Locomotive BASIC 1.1.</p>\n\n<p>Code Explanation:</p>\n<p>1: Set variable to Integer</p>\n<p>\u00a0 \u00a0Set screen mode 0</p>\n<p>\u00a0 \u00a0Set INK Colour 0 (Background) to 11 (Sky Blue)</p>\n<p>\u00a0 \u00a0Set INK Colour 1 (Pen 1) to 0 (Black)</p>\n<p>\u00a0 \u00a0Set INK Colour 4 (Pen 4) to 3 (Red)</p>\n<p>\u00a0 \u00a0Select Pen 3 (Bright Red) &amp; Select Paper 4 (Red)</p>\n<p>\u00a0 \u00a0Redefine Text Matrix to define Red</p>\n<p>\u00a0 \u00a0Setup variables l,r,t &amp; b for Text Window</p>\n<p>\u00a0 \u00a0Create a Function 'n', which returns a random number within the range of the window</p>\n<p>2: Create another Function 'a', which reads the direction keys defined from k array.</p>\n<p>\u00a0 \u00a0m = level number</p>\n<p>\u00a0 \u00a0Clear Screen Mode, this is important for clearing the Board when going to the next level</p>\n<p>\u00a0 \u00a0Set INK Colour 3 to 6 (Bright Red)</p>\n<p>\u00a0 \u00a0Set Border Colour to 11 (Sky Blue)</p>\n<p>\u00a0 \u00a0Set INK Colour 5 to 6 (Bright Red):</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; this is done so the nasty doesn't real the location of the exit should they move over it.</p>\n<p>\u00a0 \u00a0PRINT level number</p>\n<p>\u00a0 \u00a0x = xpos of your character</p>\n<p>\u00a0 \u00a0y = ypos of your character.</p>\n<p>\u00a0 \u00a0w = xpos position of the enemy &amp; position calculated is right side of the window.</p>\n<p>\u00a0 \u00a0z = ypos position of the enemy &amp; position calculated is bottom side of the window.</p>\n<p>\u00a0 \u00a0c = calculates the size of the window, to quickly print a block</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; I've modified this calculation from the original</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; so the WINDOW is larger than the Drawn Grid</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; and prevents the WINDOW from Rolling when Multicoloured Characters are used.</p>\n<p>\u00a0 \u00a0r$ = Main Character:</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; PEN 1 (Black) for Main Body which follows it</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; Turn on Transparent Mode, followed by Backspace</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; PEN 11(Pink) for the Face</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; Turn off Transparent Mode</p>\n<p>3: Define 2D Array:</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; this becomes larger than the Window</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; so checks with border edge prevent any out of range errors</p>\n<p>\u00a0 \u00a0Setup Text Window</p>\n<p>\u00a0 \u00a0PRINT some squares within</p>\n<p>\u00a0 \u00a0u = FNn - XPOS position of the exit</p>\n<p>\u00a0 \u00a0v = FNn - YPOS position of the exit</p>\n<p>\u00a0 \u00a0m(u,v) = holds the position within the array of the exit.</p>\n<p>\u00a0 \u00a0n = the value held where the nasty is and is restored later on.</p>\n<p>\u00a0 \u00a0The Keyboard Buffer is flushed if INKEY$ contains something:</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; this is a friendly way of doing it without any side effects a CALL &amp;BB03 has</p>\n<p>\u00a0 \u00a0 \u00a0-&gt; and is compatable with all CPCs, though does cost some extra keystorkes.</p>\n<p>4: Setup Boundary information to prevent out of range errors.</p>\n<p>\u00a0 \u00a0DATA consisting of key number, directional value (xpos), directional value (ypos)</p>\n<p>5: READ the DATA from Line 4.</p>\n<p>\u00a0 \u00a0PRINT the main character.</p>\n<p>\u00a0 \u00a0Play a character placement sound.</p>\n<p>\u00a0 \u00a0Wait for any Keypress to start game.</p>\n<p>6: Main game loop, exit if the enemy reaches you or if you find the exit</p>\n<p>\u00a0 \u00a0The FOR loop is used:</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; to read the players movement (4 way movement),\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; provided an edge or enemy isn't found.</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; continue to Line 9 subroutine to move that character.</p>\n<p>7: A short delay is added to slow the game slightly</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; As the character moves over the blocks they change from Bright Red to Dark Red</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; and your character can no longer move over them</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; this routine adds the delay, making the game slightly fairer</p>\n<p>\u00a0 \u00a0o = a counter</p>\n<p>\u00a0 \u00a0IF 'o' counter reaches value 8 minus 'm' (level) then</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; o returns to 0</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; Array m(w,z) equals value previously stored in 'n'</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; Set either Pen 3 &amp; 5 (Bright Red)</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; PRINT block</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; GOSUB 10 where the rest of the enemy movement is handled</p>\n<p>8: Main game loop ends here</p>\n<p>\u00a0 \u00a0Counter returns to 0</p>\n<p>\u00a0 \u00a0IF m(x,y) equals 2, then the exit is found, though if level is less then 5 then:</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; reduce the size of the right side of the window\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; reduce the size of the bottom side of the window</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; RESTORE the data for the next level</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; ERASE the main array, so a new smaller one can be defined</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; GOTO 2</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; If exit is found on Level 5, change Border Colour to 3 &amp; 6 and END since game has been completed,</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; otherwise Enemy has reached you.</p>\n<p>9: LOCATE xpos,ypos of character, PEN 4 (Dark Red), Draw Block,</p>\n<p>\u00a0 \u00a0m(x,y) equals 1 so square cannot be revisited</p>\n<p>\u00a0 \u00a0Increment/Decrement xpos or ypos based on value found in d(a)/e(a)</p>\n<p>\u00a0 \u00a0LOCATE xpos,ypos of new position, PRINT main character\u00a0</p>\n<p>\u00a0 \u00a0Play a SOUND based on where the main character is moving.</p>\n<p>10: w, y = XPOS/YPOS positon of the enemy, when SGN(x-w) / SGN(y-z) is used:</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; the enemy can follow based on your position.</p>\n<p>\u00a0 \u00a0 n = the value found at m(w,z)\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 -&gt; prevents exit from being erased if the enemy moves over it.</p>\n<p>\u00a0 \u00a0LOCATE xpos,ypos of the new enemy position</p>\n<p>\u00a0 \u00a0m(w,z) equals 1, allowing the main Loop to exit should they land on you.</p>\n<p>\u00a0 \u00a0PEN 15 = Standard Flashing Grumpy person, then PRINT enemy.\u00a0</p>\n<p>\u00a0 \u00a0Play a Grumpy Note.\u00a0 \u00a0</p>", "metacritic": null, "released": "2022-03-26", "tba": false, "updated": "2022-03-28T06:52:28", "background_image": "https://media.rawg.io/media/screenshots/be9/be95c7fe7e587732b3fae43de3a1c572.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 35, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}