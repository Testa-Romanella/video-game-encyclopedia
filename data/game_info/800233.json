{"id": 800233, "slug": "raiden-game-stg-demo", "name": "Raiden Game STG Demo", "name_original": "Raiden Game STG Demo", "description": "Game Preview\r\n\r\n\n<p>An air combat-themed shooter game perfectly replicates the STG gameplay just like Raiden - a 1990 vertically scrolling shooter arcade video game.</p>\n<p>https://en.wikipedia.org/wiki/Raiden_(video_game)</p>\n\n<p>STG has always been a popular category in the game market, largely because of its simple gameplay and high plasticity.</p>\n\n<p>In this project, we have created smooth combat experience, cool screen performance, and unexpected game settings, it perfectly integrates survival and exploration. Let's take a look at the technical realization highlights.</p>\n\r\nWant to make similar games like this one?\r\n<p>Buy game dev gigs from us. We will teach you how to make similar cool games like this one.</p>\n<p>Each game UI page will be stored as a panel prefab separated from the scene.\r\n</p>\n<p>\n</p>\n<p>It is known that at least one object with a rigidbody is required in the game scene.\r\n</p>\n<p>In this project, the rigid body is set on the player, and the rest (bullets, enemy aircraft) don't have rigidbody components.\r\n</p>\n<p>(Player character path: resources -&gt; prefab -&gt; model -&gt; player -&gt; player)\r\n</p>\n<p>\n</p>\n\n<p><strong>Bullet and halo effect</strong>\n</p>\n<p>In order to create a stronger visual impact, we have added various explosions and smoke effects which are achieved by particle system and Shader.\r\n</p>\n<p>\n</p>\n<p>Animations usually control the rotation of particles, so that particles are not looking too stiff when moving and emitting.\r\n</p>\n<p>There are many kinds of bullets designed in the game, and each bullet is realized by combining quad object+particle system/animation. The GPU batching option is used to minimize rendering Draw Calls.\r\n</p>\n<p><strong>Explosions and smoke effects</strong>\n</p>\n<p>Shooting down a plane or destroying a part of a boss requires a lot of explosions and smoke effects.\r\n</p>\n<p>\n</p>\n<ul><li><strong>The flame generated by the explosion: </strong>made by the particle system, using the TextureAnimaionModule function of the particle system to play the sequence frame pictures of the flame explosion.\r\n</li><li><strong>Fragments of the body explosion: </strong>Made by particle system, because it is more resource-intensive to use real models to make aircraft fragments, I chose to use some blocky textures to simulate aircraft fragments.\r\n</li><li><strong>Black smoke generated by the explosion of the body:</strong> made by particle system, making random changes in size, angle and transparency for smoke particles.\r\n</li><li><strong>The halo of the explosion of the body: </strong>made by particle system, the exposure of the range produced by the explosion of the body is also simulated by textures, which reduces the consumption compared to the production of real lights.\r\n</li><li><strong>Martian particles produced by the explosion of the body: </strong>Made by particle system, using VelocityOvertimeModule to make particles have the effect of spraying from high speed to slowing down.\r\n</li><li><strong>The shock wave generated by the explosion of the body:</strong> Made by particle system, the air waves generated by the explosion are simulated with textures.\r\n</li></ul>\r\nSmooth Game Control Experience\r\n<p>As a shooter game, the player control system is the foundation of good UX. We mainly use touch events by listening to TOUCH_START, TOUCH_MOVE, and TOUCH_END in the game.\r\n</p>\n<p>Since the coordinates of touch events are calculated in screen coordinates, and the plane is in the 3D world, coordinate mapping is required here.\r\n</p>\n<p>In this game, we added an interesting mechanism, which is \"time slowing down\". When the player's finger leaves the screen during the game, the speed of bullets and enemy planes will become slower, allowing players to quickly find a way to move in the dazzling bullets and props.<br/></p>\n\n\r\nObject pooling mechanism for bullets and aircrafts\r\n\r\n<p>As you can see, in the game, both bullets and enemy planes are always generated continuously. In terms of technical implementation, we will make each bullet and enemy aircraft a separate prefab, and attach a control script to perform its own life control.\r\n</p>\n<p>Initially, we will create prefabs when we need them, and destroy them after the use. However as more and more objects need to be created and destroyed, we will find that the game becomes more and more expensive to run. This is because the creation of prefabs needs to go through an instantiation process, and this process has a certain overhead. With the increase of objects, the overhead is constantly accumulating.\r\n</p>\n<p>Therefore, we use \"node pool\" to cache nodes. Develop an object generation and recycling mechanism, take objects from the pool every time you need them, and put them back into the pool after use. This will save the time for instantiating reused objects and saves runtime overhead.\r\n</p>\r\nGameplay Difficulty configuration\r\n\r\n<p>Choosing difficulty allows players to customize their own gaming experience\r\n</p>\n<p>This game provides three difficulty options. By increasing the output frequency of the aircraft, changing the combination of the aircraft, increasing the HP of the aircraft, and changing the bullet firing mode of the aircraft, the difficulty is gradually increased and the player's desire to survive is stimulated.\r\n</p>", "metacritic": null, "released": "2022-06-07", "tba": false, "updated": "2022-06-10T11:58:17", "background_image": "https://media.rawg.io/media/screenshots/8d2/8d2ccb8e5fe73d71630e192becfd39ee.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 88, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["oldmario"], "genres": ["Shooter"], "publishers": [], "esrb_rating": null}