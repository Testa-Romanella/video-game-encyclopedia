{"id": 945171, "slug": "roguelike-10", "name": "Roguelike 10", "name_original": "Roguelike 10", "description": "<p>This game was written for the Basic 10-Liner Contest 2023 in the PUR-80 category. It's written for Commodore 64/128 computers.</p>\n<p>\n</p>\r\nAim of the game\r\n<p>As in all rogue-like games, your aim is to explore as many randomly generated dungeons as possible, not get slain and find as much gold as you can carry!</p>\n<p>With joystick in port 2, your hero character can move and attack only in 4 directions while creatures can move and attack also diagonally.</p>\n<p>To attack a creature, move towards its position on the screen. In melee combat, you lose 1 HP (hit point).</p>\n<p>It takes only one hit to kill a creature. When you are on one a field next to the creature, you will also lose 1 HP.</p>\n<p>Get 1 HP back with each health potion you collect.</p>\n<p>Good luck in your quest! And may your name be remembered!</p>\n\r\nWhat's on the screen\r\n<p>In the top left part of the screen you can see remaining hit points, current dungeon level and amount of gold.</p>\n<p>For example, \"9HP 5L 6G\" indicates that hero has 9 hit points remaining, is currently exploring 5th level of dungeons and has 6 pieces of gold.</p>\n<p>The rest of the screen contains current level dungeon. Only the area surrounding your hero is revealed, so be careful where you move!</p>\n<ul><li>your hero is represented with the \"X\" character</li><li>floor is represented with the chessboard pattern</li><li>health potions are represented with the plus sign (\"+\")</li><li>creatures are represented with the white spade character</li><li>gold is represented with the diamond character</li><li>stairs to the next level are represented with the equal sign character (\"=\")</li></ul>\n\r\n\r\nLoading and running the game\r\n<p>Double click on the d64 image when using emulation. The program should be autoloaded. On the real hardware, just load with:</p>\r\n\r\nLOAD\"*\",8\r\nRUN\r\n<p>To play again after a game over, you have to type RUN: followed by Return key again.</p>\n<p>The game was tested on a real hardware and with WinVice 2.4 emulator.</p>\n\r\nConstants and variables\r\n<ul><li>A - global constant, start of the screen memory (1024)</li><li>A$ - string used to position cursor back left on a single dungeon chamber vertical draw</li><li>B - on dungeon generation, prints row of single chamber vertically up to Y</li><li>B - on dungeon reveal, used to iteratate in horizontal position </li><li>B$ - global constant, string with dungeon floor pattern used while drawing a single chamber</li><li>C - on main loop, joystick position state (-1 for left, 1 for right, otherwise 0)</li><li>C$ - string used to position cursor back up on dungeon chamber draw so the next chamber can be drawn next to it</li><li>D - on main loop, joystick position state (-1 for up, 1 for down, otherwise 0)</li><li>D$ - on dungeon generation, builds one row of a dungeon chamber with randomised object</li><li>E - global variable, player position, reset to screen memory location 1270 for each level</li><li>E$ - string with all objects in the following order: floor (102), gold (90), creature (65), health potion (43), stairs (61)</li><li>F - global constant of 40</li><li>F$ - global constant, sets position and light blue colour for the HUD</li><li>G - on dungeon generation, used to iterate for the first or the second row of chambers</li><li>G - on creature movement, switch between 0 and 1 to slow down creature movement</li><li>H - on player move, calculates destination position in order to see if player can move there</li><li>I - on dungeon generation, increments until 5 chambers are drawn horizontally</li><li>I - on dungeon reveal, used to iterate in vertical position</li><li>J - global variable, value of joystick port 2</li><li>K - screen colour address offset by the starting position of player</li><li>L - on dungeon reveal, calculates position to reveal in order to check if there's any creature to activate</li><li>M - global variable, amount of gold</li><li>N - global variable, hit points (or eNergy)</li><li>O - on creature movement, calculate new position of creature that follows player (combines horizontal and vertical sign in range -41:41 to 41:41)</li><li>P - on creature movement, check if relative position of creature and player are different horizontally</li><li>Q - on creature movement, result of PEEKing a screen character to check if creature can move there, or if player to attack is there</li><li>R - global variable, dungeon level</li><li>S - global constant, floor character (102)</li><li>T - on player move, gets screen value for player destination position to see if player can move there</li><li>U - on creature movement, round player's vertical position against screen grid (40 blocks per row resolution)</li><li>V - global constant, screen border colour address</li><li>W - on creature movement, round creature's vertical position against screen grid (40 blocks per row resolution)</li><li>X - on dungeon generation, randomised size of a chamber (min: 2, max: 6)</li><li>X$ - clear screen and offset position to draw a dungeon level</li><li>Y - on dungeon generation, randomised size of a chamber (min: 2, max: 6)</li><li>Z - global constant, joystick port 2 address</li></ul>\n\r\n\r\nScopes\r\n<ul><li>on dungeon generation</li><li>on main loop</li><li>on player move</li><li>on dungeon reveal</li><li>on creature movement</li></ul>\n\r\n\r\nCreature movement\r\n<p>\u00a0\u00a0 \u00a0Simplified condition to move to a field if PEEK(screen) &gt; 61\u00a0\u00a0 \u00a0</p>\n<p>\u00a0\u00a0 \u00a0Do not move if:</p>\n<ul><li>\u00a0\u00a0\u00a0\u00a0player (24)</li><li>\u00a0\u00a0\u00a0 wall (32)</li><li>\u00a0\u00a0\u00a0 health potion (43)</li><li>\u00a0\u00a0\u00a0 stairs (61)\u00a0\u00a0\u00a0 </li></ul>\n<p>\u00a0\u00a0 \u00a0Move if:</p>\n<ul><li>\u00a0\u00a0\u00a0 another creature (65)</li><li>\u00a0\u00a0\u00a0 gold (90)</li><li>\u00a0\u00a0\u00a0 floor (102)</li></ul>\n\r\nCode line by line\r\n<p>- Line 0:</p>\n<p>\u00a0 \u00a0- Define function to return randomised number within the range 1 to N</p>\n<p>\u00a0 \u00a0- Initialise global constants in the following order: A, F, K, S, V, Z, A$, B$, C$, E$, X$</p>\n<p>\u00a0 \u00a0- Set screen colour and border to black</p>\n<p>\u00a0 \u00a0- Set initial hit points to N=10</p>\n<p>\u00a0 \u00a0- Define in Z$ the position and the colour of HUD</p>\n<p>- Line 1 (dungeon generation):</p>\n<p>\u00a0 \u00a0- Set initial position of player's character to E=1270</p>\n<p>\u00a0 \u00a0- Dungeon generation begins</p>\n<p>\u00a0 \u00a0- Clear the screen and set the position of dungeon (set in X$, then TAB(6))</p>\n<p>\u00a0 \u00a0- Increase dungeon level by 1 with R=R+1</p>\n<p>\u00a0 \u00a0- Outer FOR G=0 TO 1 loop to generate inner loop twice (for two rows of chambers)</p>\n<p>\u00a0 \u00a0- Inner FOR I=1 TO 5 loop to generate 5 chambers horizontally</p>\n<p>\u00a0 \u00a0- Randomise width (X) and height (Y) of a single chamber</p>\n<p>\u00a0 \u00a0- DATA line for global constants A, F and K</p>\n<p>- Line 2:</p>\n<p>\u00a0 \u00a0- Set in D$ a single row of a chamber</p>\n<p>\u00a0 \u00a0- In the middle of a chamber, one of the first 4 objects is randomly set (1 = floor, 2 = gold, 3 = creature, 4 = health potion) if it's not the last chamber in the row (result of -(I&lt;5)*FNR(4))</p>\n<p>\u00a0 \u00a0- Exceptionally, for the last chamber in a row, stairs object (5) is always set (result of -(I=5)*5 is -1)</p>\n<p>\u00a0 \u00a0- Nested FOR B=1 TO Y loop to draw a single chamber vertically</p>\n<p>\u00a0 \u00a0- Print string of floor characters determined by chamber width (X) followed by printing an object only if it's the second row of a chamber (-(B=2)+1)</p>\n<p>- Line 3:</p>\n<p>\u00a0 \u00a0- Continue printing the last floor object followed by moving cursor to the beginning of the next row determined by chamber width (X)</p>\n<p>\u00a0 \u00a0- Next loop for B to continue drawing chamber vertically</p>\n<p>\u00a0 \u00a0- Position cursor up to glue the next chamber to the previous one (using C$)</p>\n<p>\u00a0 \u00a0- Next loop for I to continue the next chamber</p>\n<p>\u00a0 \u00a0- Moving cursor at the start of the second row of 5 chambers - it starts in the different position thanks to randomisation width of 5 chambers from the first row</p>\n<p>\u00a0 \u00a0- Next loop for G to continue drawing the second row of 5 chambers</p>\n<p>\u00a0 \u00a0- As there was no free variable left, re-use variable G for slowing down creature movement, as it's out of the dungeon generation scope, setting it to 0</p>\n<p>\u00a0 \u00a0- Jump to line 5 to reveal initially a surrounding area</p>\n<p>Line 4 (main loop):</p>\n<p>\u00a0 \u00a0- Print HUD with the following information: HP (hit points), L (current dungeon level), G (gold)</p>\n<p>\u00a0 \u00a0- Read joystick in port 2</p>\n<p>\u00a0 \u00a0- Set in variable C if joystick has been pushed in horizontal position</p>\n<p>\u00a0 \u00a0- Set in variable D if joystick has been pushed in vertical position</p>\n<p>\u00a0 \u00a0- If joystick directions not pressed, go to line 4</p>\n<p>\u00a0Line 5:</p>\n<p>\u00a0 \u00a0- Check if player can move in the desired position by reading character from screen memory</p>\n<p>\u00a0 \u00a0- No matter if player can move, clear it from the position by drawing the floor character (POKE E,S) and set colour to blue (POKE K+E,6)</p>\n<p>\u00a0 \u00a0- Set new player position if field to enter is different than space character, otherwise it remains the same (E=E-(T&lt;&gt;32)*(H-E))</p>\n<p>\u00a0 \u00a0- Set player's colour (POKE K+E,8) and (POKE E,24) at the new screen position</p>\n<p>\u00a0 \u00a0- Increment gold by 1 in case player steps on the gold object (M=M-(T=90))</p>\n<p>Line 6:</p>\n<p>\u00a0 \u00a0- Increment player's hit points by 1 in case player steps on the health potion (43) and decrease by 1 if player gets into the fight with a creature (65) (calculated in one equation: N=N-(T=43)+(T=65))</p>\n<p>\u00a0 \u00a0- In case player steps on the stairs, go to line 1 to generate the next dungeon (ON -(T=61) GOTO 1)</p>\n<p>\u00a0 \u00a0- Dungeon reveal starts here, by revealing 5x5 fields around the player character</p>\n<p>\u00a0 \u00a0- Outer FOR I=0 TO 4 loop to iterate vertically</p>\n<p>\u00a0 \u00a0- Inner FOR B=0 TO 4 loop to iterate horizontally</p>\n<p>\u00a0 \u00a0- Calculate offset starting from the top-left corner (L=I*F+B+E-82), 82 because it offsets two fields up and left from current player's screen position\u00a0 (40 * 2 + 2 = 82)</p>\n<p>\u00a0 \u00a0- If creature character found during reveal, jump to line 8 to move creature towards the player (ON -(PEEK(L)=65) GOTO 8)</p>\n<p>- Line 7:</p>\n<p>\u00a0 \u00a0- Set colour of an object character on the screen (POKE K+L,PEEK(L)), by re-using character code as a colour (see: Tricks and notes, point 1)</p>\n<p>\u00a0 \u00a0- Next loop for B to continue revealing area horizontally</p>\n<p>\u00a0 \u00a0- Next loop for I to continue revealing area vertically</p>\n<p>\u00a0 \u00a0- Use simple enable / disable mechanism to slow down creature's movement every second move of player (G=1-G)</p>\n<p>\u00a0 \u00a0- Check if player has any hit points left, if yes, go to the main loop in line 4 (ON -(N&gt;0) GOTO 4)</p>\n<p>\u00a0 \u00a0- Otherwise, display RIP and END the program</p>\n<p>\u00a0 \u00a0- DATA line for global constants S, V, Z and A$</p>\n<p>- Line 8:</p>\n<p>\u00a0 \u00a0- Calculate new position of creature to follow player character's screen position when in visible range, X and Y are extracted separately from single screen position value</p>\n<p>\u00a0 \u00a0- Store screen character in Q variable</p>\n<p>\u00a0 \u00a0- Draw floor on the screen in the place where creature character is (POKE L,S)</p>\n<p>- Line 9:</p>\n<p>\u00a0 \u00a0- Set the colour of the floor so there's no artefact of creature's colour left on the screen on movement (POKE K+L,6)</p>\n<p>\u00a0 \u00a0- In case creature can move to the given position, set it if movement (switched in G) is enabled (L=L-(G&gt;61)*O*G)</p>\n<p>\u00a0 \u00a0- Draw creature character on the screen, note that L might be updated now (POKE L,65)</p>\n<p>\u00a0 \u00a0- In case creature wanted to move to the position of player character, decrease player's hit points by 1 (N=N+(Q=24))</p>\n<p>\u00a0 \u00a0- Go back to line 7 (used are some sort of a RETURN to continue loop, see: Tricks and notes, point 3)</p>\n<p>\u00a0 \u00a0- Data line for global constants B$, C$, E$ and X$</p>\n\r\nTricks and notes\r\n<ol><li>I had no space to set colours of different objects, but displaying everything in grey looked really dull. I used a trick to re-use the character and set it as the colour of the object. The result was better than I expected. The whole revealed area of the dungeon turned to blue, and all other objects, especially creatures, are visible.</li><li>I determined which objects (screen characters) are the best to group them into one that creature can walk in or not. This way I improved a logic of checking if character is one of 3 (e.g. -(Q=24 AND Q=32 AND Q=61)) just into greater than a certain value (-(Q&gt;61), see: line 9). Lot of characters saved!</li><li>In line 6 I used GOSUB initially so I can get back to the loop, but then when game over was added, there is no way in BASIC to use ON in combination with RETURN. What helped was to use GOTO in line 6, and return to line 7 just with GOTO. I just needed to be sure that there won't be anything else remaining in the line 6 after the jump.</li></ol>", "metacritic": null, "released": "2023-03-23", "tba": false, "updated": "2023-03-24T06:14:04", "background_image": "https://media.rawg.io/media/screenshots/567/567831e2a38aa3bfb844e39f22ed8aad.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 66, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Commocore"], "genres": ["RPG"], "publishers": [], "esrb_rating": null}