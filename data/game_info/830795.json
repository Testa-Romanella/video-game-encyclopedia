{"id": 830795, "slug": "wormhole-simulator", "name": "Wormhole Simulator", "name_original": "Wormhole Simulator", "description": "<p>A simple ray-tracing simulation of a wormhole between two regions of space.</p>\n<p><strong>Controls</strong></p>\n<ul><li>Use WASD to move forward/backward/left/right</li>\n<li>Use shift to move up, Control to move down</li>\n<li>Press escape or space to bring up or close the menu</li></ul>\n<p>If the mouse isn't captured properly in full-screen (i.e. you can still see the mouse), try pressing space to open the settings menu and then close it again.</p>\n<p><strong>Options (and what they mean)</strong></p>\n<p>Throat length and curvature radius control the size of the wormhole (see below for more details on exactly what these mean.</p>\n<p>There are several options for the textures to be used around the wormhole, which can be moved through in the menu.<br/><br/>\"Only look around while clicking\" - when active, mouse movements will only move the camera while the left mouse button is clicked. (This is intended to help when used in browser and the mouse isn't captured)</p>\n<p><strong>What on Earth is Going on Here?</strong></p>\n<p>This simulation works by a custom implementation of ray tracing in four dimensions - the space you move around in is 3d, but embedded in four dimensions.<br/><br/>To have any hope of thinking about that, try instead thinking about how this would work in one less dimension - you are a flat, 2d creature living on a 2d surface. To make a wormhole, we need this flat 2d surface to secretly be living in three dimensions so that we can curve the surface - the diagram shows what's happening here.<br/><br/>(If you want a better diagram, I can't help you)</p>\n<p>On the diagram, the distance labelled t is the throat length, and the distance labelled r is the curvature radius.</p>\n<p>To move to three dimensional space, it turns out to be a very easy change in the algebra, but then impossible to think about.</p>\n<p>Better explanation, attempt at a diagram, and source code are available upon request (but the code might not be very helpful for other projects because it only works in a custom-written ray-tracing environment, not - say - an actual game engine environment that someone might actually want to work in)</p>\n<p><strong>Credits etc.</strong></p>\n<p>All code written by me</p>\n<p>Some assets by Screaming Brain Studios<br/><br/>Created in Godot</p>", "metacritic": null, "released": "2022-08-03", "tba": false, "updated": "2022-08-05T11:42:16", "background_image": "https://media.rawg.io/media/screenshots/6a6/6a69485fd90cba629a0166ebfc27675b.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 64, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web", "Linux", "macOS", "PC"], "developers": ["TheJackOfClubs"], "genres": ["Simulation"], "publishers": [], "esrb_rating": null}