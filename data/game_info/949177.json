{"id": 949177, "slug": "project-arms", "name": "Project ARMS", "name_original": "Project ARMS", "description": "<p>This was the main project I was working on while I partook in the Mastered Bootcamp. My aim for this project was to increase my familiarity with\u00a0Unreal Engine 5.\u00a0\u00a0</p>\n<p>In this vertical slice you play as a customisable robot that can have it's parts changed which in turn changes it's abilities and appearance (this feature was inspired by games such as custom robo arena and LBX).\u00a0\u00a0</p>\n<p>To earn credits to buy more parts, you can try to complete the test stage,\u00a0 every completion will reward you with 10 credits.</p>\n<p>Controls:</p>\n<p>Left MB: Ability 1</p>\n<p>Right MB Ability 2</p>\n<p>Space: Jump (or Air jump if airborne)</p>\n<p>This project utilises mainly c++ code but also uses Blueprints</p>\n<p>Github repo: https://github.com/Kurovah/ProjectARMS</p>\n<p>---------------------------------------------------</p>\n<p>Breakdown</p>\n<p>Data Assets:</p>\n\n<p>Main method of storing data was to use Data Assets. For this to work I created data asset classes that all inherit from a base attachment data asset class. I added the extra layer of abstraction so that it would be easier to reference the in other functions.</p>\n<p>Locking and Unlocking:</p>\n\n<p>To allow the game for have locked content, I created a struct that holds a pointer to the the attachment's data, wether it's been unlocked or not and it's price in the shop. I Then created a Data asset the holds a list of these, which is later referenced by the\u00a0 Gameinstance and allows the unlock status of all items to be accessible in any scene.\u00a0</p>\n<p>This is mainly used by the shop and garage as the listings displayed are dependant on the\u00a0 unlock status.</p>\n<p>Hitboxes:</p>\n\n<p>Hitbxes are a sphere mesh that check to see if they overlap with a hurtbox child actor component, if they do that they first check to see that the actor the hurtbox belongs to is not thier own actor and that create a hit context for the hurtbox to use on it's own actor.\u00a0</p>\n\n<p>All Hitboxes are spawned in by and reference a manager, which is what they use to check if they are hitting thier own actor. I also make sure that projectiles also reference the actor that created them's manager so I don't end up with a null reference</p>", "metacritic": null, "released": "2023-03-28", "tba": false, "updated": "2023-03-31T14:42:00", "background_image": "https://media.rawg.io/media/screenshots/7c0/7c0a4c1eafea4fd33e2059d48a1b665f.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 57, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Kurovah"], "genres": ["Action"], "publishers": [], "esrb_rating": null}