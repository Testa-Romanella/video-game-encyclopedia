{"id": 759426, "slug": "jupiter-ss-firestorm-gamma-by-mr-sql", "name": "Jupiter SS Firestorm Gamma by Mr SQL", "name_original": "Jupiter SS Firestorm Gamma by Mr SQL", "description": "<p>------</p>\n<p>Program Design from RelationalFramework, download more examples of 10 line games and SuperCharger BASIC:</p>\n<p>http://relationalframework.com/Atari2600gamesonline.htm</p>\n\n<p>Features:</p>\n<p>---------</p>\n<p>This game includes parallex scrolling and color cycling in BASIC with five algorithmic interactive chiptunes that can be mixed with the gameplay.</p>\n<p>Some interesting BASIC intrinsics used:</p>\n<p>print %11111110(virtualworld,x)</p>\n<p>This prints the binary string to the virtualworld, which is much larger than the screen.</p>\n<p>A for next loop is used to cover the territory in the setup initialization section, lines 1 and 2.</p>\n<p>Note: print can be overloaded like the BIN$ BASIC function:</p>\n<p>print 254(virtualworld,x)\u00a0</p>\n<p>This will print the same binary string, like the BIN$ function.\u00a0</p>\n<p>(Thank you AMSDOS on AtariAge for sharing this interesting function and the example!)</p>\n<p>Character animation frame compression technique:\u00a0\u00a0</p>\n<p>data F \"H88&lt;88,&lt;088888,&lt;0$&lt;&lt;88,&lt;DD$8^8,&lt;Cd&lt;&lt;&lt;8,&lt;6d&lt;Z&lt;8&lt;&lt;Cb&lt;Z&lt;0&lt;&lt;0($&lt;&lt;&lt;8&lt;0x8888,&lt;DD$8^8,&lt;088888,&lt;0$&lt;&lt;88,&lt;DD$8^8,&lt;Cd&lt;&lt;&lt;\"</p>\n<p>7-bit ASCII data is stored for the sprite animation allowing many more frames than otherwise possible.</p>\n<p>The 7-bit subset requires approximations for all 8-bit patterns.\u00a0</p>\n<p>Animation for the Firestorm:</p>\n<p>This already was built into the program and is read back when the 7-bit pseudo graphics frames complete.</p>\n<p>Layered Sprite animation technique:</p>\n<p>Sprite layering animation takes 8 frames to change a sprite instead of changing the sprite in a single frame.</p>\n\n<p>Program Listing:</p>\n<p>----------------</p>\r\n\r\n0 data F \"H88&lt;88,&lt;088888,&lt;0$&lt;&lt;88,&lt;DD$8^8,&lt;Cd&lt;&lt;&lt;8,&lt;6d&lt;Z&lt;8&lt;&lt;Cb&lt;Z&lt;0&lt;&lt;0($&lt;&lt;&lt;8&lt;0x8888,&lt;DD$8^8,&lt;088888,&lt;0$&lt;&lt;88,&lt;DD$8^8,&lt;Cd&lt;&lt;&lt;\"\r\n1 if g&gt;0 then goto 3 else g=1:e=1:player0y=30:player0x=30:NUSIZ0=16:NUSIZ1=16:COLUP1=99: rem Smart method \r\n2 for x=50 to 120:print %11111110(virtualworld,x):for y=4 to 9:rowcolors(y)=y*16:player0colors(y)=y*48:next x,y\r\n3 if player0y=8 then e=1:t=t+16 else scrollvirtualworldtoggle=1:rem Play as the Torch, Flame on!Jump Fjords,catch Stars!\r\n4 if f&lt;8 then player0(f)=F(n):rowcolors(f)=rowcolors(f)+16:n=n+1:f=f+1:return else f=0:COLUBK=t:SUSTAINFORFRAMES=7\r\n5 if e=1 and player0y&lt;94 then AUDC0=11:AUDC1=player0y:AUDF1=n:player0y=player0y+4 else e=0:player0y=player0y-1:rem ID\r\n6 if joy0right=1 and player0x&lt;156 then player0x=player0x+1:REFP0=0:AUDF0=n:AUDC0=3:AUDF1=f*4:BITIndex=BITIndex+1\r\n7 if joy0left=1 and player0x&gt; 8 then player0x=player0x-2:REFP0=8:AUDF0=player0x/3:AUDC0=6:BITIndex=BITIndex-1:rem doh,\r\n8 missile1x=missile1x+1:missile1y=missile1y+3:missile0x=missile0x+2:missile0y=missile0y+1::rem dohdoh That's all folks!\r\n9 if CXM0P&amp;64=64 or CXM1P&amp;128=128 then CXCLR=0:COLUBK=64:AUDC1=7:AUDF1=20:AUDF0=30:missile1y=0:missile0x=0:rem end of 9", "metacritic": null, "released": "2022-03-22", "tba": false, "updated": "2022-03-25T10:49:02", "background_image": "https://media.rawg.io/media/screenshots/962/962bfe45ba71874bbb6aa714995044df.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 5, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}