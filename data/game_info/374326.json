{"id": 374326, "slug": "eae6320_assignment3_writeup", "name": "EAE6320_Assignment3_WriteUp", "name_original": "EAE6320_Assignment3_WriteUp", "description": "<p><strong>Details of Assignment:</strong>\n</p>\n<ul><li>The main part of the assignment was to make the graphics class completely platform independent\r\n  </li><li>The Second task was to create 3D objects using an Index buffer and a vertex buffer, Vertex Buffer is a list of all vertices in a shape whereas the Index buffer is the order/winding of all vertices needed to create the shape (for Reference, to create a Square with 2 Triangles, vertex buffer would be 4 corners of the square, and index buffer would be 6, 3 vertices * 2 triangles, which will reference to vertex buffer to get the location of the vertex)\r\n  </li><li>Lastly, I need to create a second object with a new shader effect\r\n  </li></ul>\n<p><strong>Running Part of Assignment:</strong>\n</p>\n<ul><li>The Image below shows running on all 4 configurations</li></ul>\n\n<p><em>Fig 1. Image of all configuration running</em><br/></p>\n\n<p><strong>How I Reach till this Point:</strong>\n</p>\n<ul><li>The biggest challenge of the assignment was to make Graphics.cpp platform independent\r\n  <ul><li>To do that, first of all I found all the differences between the Open GL and Direct 3D graphics file\r\n  </li><li>By doing that, I found that the differences were present in views which is part of Direct 3D rendering\r\n  </li><li>To separate the view section, I created a new header file cViewData.h and platform dependent .cpp files for Direct 3D and OpenGL\r\n  </li><li>\u00a0Along with view functions, I added the Clear Background and swap buffer into the cViewData.h and combined them because I think they are related to viewing.\r\n  </li></ul></li><li>Than, I changed the back buffer color, by calling the function through viewData object\r\n</li></ul>\n\n<p><em>Fig 2. Screenshot for clearing back-buffer with Red Color</em><br/></p>\n\n<p><em>Fig 3. Screenshot of frame being clear with red color</em><br/></p>\n<ul><li>Then I changed my function related to graphics and shader effects to make them dynamic and not fixed to Graphics<br/>\n</li><li>For shader effects, I gave 2 character arrays (string) variables as a parameters which are actually the location for both vertex and fragment shaders, because these location are the one that specifies what shaders effects are bind to a object so passing these locations make the function dynamic\r\n</li></ul>\n\n<p><em>Fig 4. Screenshot of my shader effect data being initialized</em></p>\n<ul><li>The Size of shader effect object for Direct 3D is 12 Byte and for Open GL is 16 Byte</li><li>For both Direct 3D and Open GL there are 3 common variables which holds the shader data (vertex shader, fragment shader and rendering state), each being 4 Byte, while Open GL has extra 4 bytes for program ID which hold data for your program and links your shaders to it. So, I think the size 12 for D3D and 16 for Open GL is as minimum it needs to work</li></ul>\n<ul><li>For Graphics the user needs to specify 4 values, vertex Count, vertex data, index count, index data.<br/>\n</li></ul>\n\n<p><em>Fig 5 screenshot of my geometry object being initialized</em></p>\n<ul><li>My Geometry object takes 32 Byte for Direct3D and 16 Byte for OpenGL\r\n  </li><li>My Geometry class has 4 variables for both Direct 3D and Open GL, 1 common and 3 separates. <br/>\n</li><li>The common variable is the length for index buffer which is 4 Byte. \r\n  </li><li>The need for index count is because we need to know how many objects are created which can be easily know by length of index buffer as that many vertices needs to be drawn on the screen. \u00a0\r\n  </li><li>Open GL has 3, 4 Byte variable, each for storing ID for index buffer, vertex buffer and vertex array.</li><li>\u00a0On the other hand, Direct 3D have 2 pointers to the buffers (index and vertex buffers) which are 8 Bytes each and a 12 Bytes vertex format.</li><li>Which are all required and hold important data for the shape.</li><li>So, I think the Geometry class is also as small it can be for the program to work.</li></ul>\n<p><strong>Optional Challenge:</strong></p>\n<ul><li>The Optional challenge for this assignment was to make the back-buffer color animate to different color\r\n  </li><li>To do that I took simulation time and passed it to sin function resulting into multiple colors</li><li>I have divided the simulation time with a constant number, the reason for that is each would generate a different value which results in different values for each (R, G, B), values there by creating a greater number of color than it can do for same value\u00a0</li></ul>\n\n<p><em>Fig 6. Code for making the back-buffer animate\u00a0</em>\n</p>\n<p><strong>It took me around 8-9 hours to do this assignment</strong><br/></p>", "metacritic": null, "released": "2019-09-10", "tba": false, "updated": "2019-09-13T07:55:54", "background_image": "https://media.rawg.io/media/screenshots/cee/ceeeda3ce87852b96735e8802b5496c7.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 0, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["M17D05"], "genres": [], "publishers": [], "esrb_rating": null}