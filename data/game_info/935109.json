{"id": 935109, "slug": "queso-run-part-duh-the-cheese-strikes-back-c64-by-", "name": "Queso Run Part Duh: The Cheese Strikes Back (C64) by octasoft", "name_original": "Queso Run Part Duh: The Cheese Strikes Back (C64) by octasoft", "description": "<p>Queso Run Part Duh: The Cheese Strikes Back</p>\n<p>2023 octasoft</p>\n<p>In this highly anticipated sequel of the 2021 hit, Queso Run, Charles E. Queso attempts to extract his revenge on the pilot and occupants of the Millenial Falco by lauching cheese balls at them from his super space fortress, the Charcuterie Board. Your mission, should you choose it, is to pilot the Millenial Falco and avoid the fluffy flying flavorful foods. Louie Lou-Baca, your Snookie co-pilot, says that Franz Yolo scored well over 5000 points.</p>\n<p>Starting the game</p>\n<p>Ensure that there are no fastload/freeze cartridges plugged into your Commodore 64 or enabled in your emulator. Turn on or boot the machine and mount the .d64 file. Type Load \u201c*\u201d,8 and tap the Return key. When finished loading, type Run and tap Return. Be ready to have your finger on the controls, or should I say control. Due to some earlier conflicts in the Queso universe, the ship's navigation is broken and is drifting right. It needs to be counter-steered to the left to stay on course. To control the Millennial Falco, press the letter 'A' to move the ship to the left. Avoid the cheese balls and rack up a hi-score.</p>\n<p>Developer notes</p>\n<p>I was looking for a fast routine to scroll characters down the screen in Basic 2.0 on the Commodore 64 and thought there must be something in the kernal because it inserts lines and scrolls down when you are editing on the screen. After some searching I found a youtube video by 'madcommodore'.</p>\n\n\n<p>He did not lay out exactly how to use it, but with some playing around I got it going. First I wrote a 1 line starfield program, then thought it might be fast eough to put in a 10 liner game. The moving sprites in this game are quite jerky, but Basic 2.0 is not known for speed or smoothness, but overall, I am happy with the results. I was able to make a top down scolling starfield, move/control some sprites, keep score, and add some colorful graphics to the side of the screen in 10 lines.</p>\n<p>I stored a 12 in memory location 648 (hi byte of screen memory - default $04) to switch where the computer thinks the screen is outputting to in order to print the sprite data directly to memory. I converted my sprite data to screen code characters that represent the numbers needed to make the sprites. This takes slightly fewer bytes than using traditional data statements since data statements contain commas and up to 3 characters for a number, whereas the numbers 0-127 only take 1 character in this format and no commas. The numbers between 128-255 take 3 characters since reverse needs to be turned on and off to get them printed properly. You will notice in the code that you see {18} and {146} in the sprite data. That is turning the reverse function on and off. You could also use {reverse on} and {reverse off} in CBM prg Studio, but I preferred to keep the code as compact as possible.</p>\n<p>Program Explanation</p>\n<p>0 Define Variables</p>\n<p>1 Read some sprite data. Switch screen memory location to where the sprite data will be stored and start printing sprite data directly into that memory location</p>\n<p>2 More printing(storing) of sprite data</p>\n<p>3 Setting intial sprite parameters for ship, cheese asteroid and side screen ship graphics</p>\n<p>4 More sprite parameters defined.</p>\n<p>5 A few more sprite settings and print Score and Hi Score text at top of screen</p>\n<p>6 Game Loop starts here - clear collision register, increment cheese speed, print star and scroll the screen, get keyboard input and calculate new ship location.</p>\n<p>7 Calculate cheese location and set to 0 if off bottom of screen. Add points to score</p>\n<p>8 Move cheese, check for collision and go to 9 if true. Return to game loop. Also sprite data</p>\n<p>9 Collision - change sprite to explosion, game over, create Hi score, start over.</p>\n<p>You can copy and paste the code file into CBM prg Studio and it should build properly.</p>", "metacritic": null, "released": "2023-03-01", "tba": false, "updated": "2023-03-03T11:02:06", "background_image": "https://media.rawg.io/media/screenshots/fc7/fc797dabf9ca4f281a96668ed8d6c1af.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 16, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}