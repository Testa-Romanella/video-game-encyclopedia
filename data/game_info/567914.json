{"id": 567914, "slug": "remake-cute-the-rope-2021-unity", "name": "Remake Cute The Rope - 2021 - Unity", "name_original": "Remake Cute The Rope - 2021 - Unity", "description": "<p>Remake of the game Cute The Rope\u00a0for the purpose of learning the Unity video game development platform at the\u00a0<strong>3W Academy</strong>\u00a0training school.</p>\n\r\nGeneration of ropes and their Hinge Joint 2D\r\n\r\nIn the Awake method, the ropes attached to the pine are generated on the fly.<br/><br/>These ropes are created from sprites and each have a <strong>Hinge Joint 2D\u00a0</strong>that connects them together.The\u00a0<strong>Hinge\u00a0</strong>Joint 2D\u00a0component allows a\u00a0<strong>GameObject</strong>\r\n\u00a0controlled by\u00a0<strong>RigidBody</strong>\r\n\u00a02D physics to be attached to a point in space around which it can rotate.<br/><br/>Here is the <strong>GenerateRopes</strong> <strong>class </strong>below which generates the strings and links.<br/><br/>To obtain a graphic and animated rendering as beautiful as the original game, it is necessary to use the <strong>Line Renderers</strong> which allow to have a more natural and less \"broken\" rendering, but the code to be created is heavier and is not discussed here.\r\n\r\npublic class GenerateRopes : MonoBehaviour\r\n{\r\n    [SerializeField] private Transform _rope;\r\n    [SerializeField] private Transform _candy;\r\n    [SerializeField] private int _ropesNumber;\r\n    private Transform[] _ropesArray;\r\n    private Transform _transform;\r\n    private void Awake()\r\n    {\r\n        _transform = GetComponent&lt;transform&gt;();\r\n        // Instantiate ropes given in parameters\r\n        _ropesArray = new Transform[_ropesNumber];\r\n        for (int i = 0; i &lt; _ropesNumber; i++)\r\n        {\r\n            _ropesArray[i] = Instantiate(_rope, Vector2.zero, Quaternion.identity);\r\n            _ropesArray[i].gameObject.SetActive(true);\r\n            // Storage of the ropes in their parent pine\r\n            _ropesArray[i].transform.parent = gameObject.transform;\r\n            if (i == 0)\r\n            {\r\n                // Link the first instantiated rope to the Pin\r\n                _transform.GetComponent&lt;hingejoint2d&gt;().connectedBody = _ropesArray[0].GetComponent&lt;rigidbody2d&gt;();\r\n            }\r\n            else\r\n            {\r\n                // Link with the following rope\r\n                _ropesArray[i - 1].GetComponent&lt;hingejoint2d&gt;().connectedBody = _ropesArray[i].GetComponent&lt;rigidbody2d&gt;();\r\n            }\r\n        }\r\n        // Link the last intantiated rope to the candy\r\n        _ropesArray[_ropesNumber - 1].GetComponent&lt;hingejoint2d&gt;().connectedBody = _candy.GetComponent&lt;rigidbody2d&gt;();\r\n    }\r\n}\r\n\r\nCute of the rope and trail renderer effects\r\nWe have to create a <strong>GameObject</strong> containing the <strong>Trail Renderer</strong>\u00a0componant and the script (bellow).<br/>We need to use a Raycast to detect the collision. BUT, if the mouse moving to fast, the raycast will NOT hit the rope!<br/><br/>So, <strong>to get better accuracy, we need to draw a raycast between mouse position from the last frame to the current frame.<br/></strong><br/>The distance is calculated from the substraction of target vector minus origin vector.<br/><br/>And then, the CuteTheRope() method just tests the ropes colliders, and if it returns true, the rope is inactivated.<br/><strong>It is safer to deactivate first</strong>\u00a0and then destroy the object when you know that there is no longer any interaction around it.<br/>\r\nAnother solution: instead of deactivating a rope, we could also have removed a Hinge Joint 2D.\r\n\r\nprivate void Update()\r\n{\r\n    if (Application.platform == RuntimePlatform.Android)\r\n    {\r\n        // [...] The source code is almost identical, we focus on the web version below ;-)\r\n    }\r\n    else\r\n    {\r\n        if (Input.GetMouseButton(0))\r\n        {\r\n            mouseWorldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);\r\n\r\n            // Trail renderer effect position on _transform (the current gameObject that contains this script)\r\n            _transform.position = mouseWorldPos;\r\n\r\n            // Calculate the direction of the vector between last frame and current frame.\r\n            Vector2 dir = (mouseWorldPos - mouseWorldLastPos).normalized;\r\n            float dist = Vector2.Distance(mouseWorldPos, mouseWorldLastPos);\r\n            Debug.DrawRay(mouseWorldPos, dir, Color.red);\r\n\r\n            // We must do a raycast between the previous frame and the current frame.\r\n            // This is necessary because if we move the mouse too fast, the cut of the string\r\n            // will pass between two frames and will not be affected by the raycast!\r\n            _hit = Physics2D.Raycast(mouseWorldPos, dir, dist);\r\n\r\n            CuteTheRope();\r\n\r\n            mouseWorldLastPos = mouseWorldPos;\r\n        }\r\n        else\r\n        {\r\n            mouseWorldLastPos = Vector2.zero;\r\n        }\r\n    }\r\n}\r\nprivate void CuteTheRope()\r\n{\r\n    if (_hit.collider != null\r\n        &amp;&amp; _hit.collider.tag == \"Rope\")\r\n    {\r\n        // Remove the portion of the hit rope.\r\n        _hit.collider.gameObject.SetActive(false);\r\n    }\r\n}\r\n\r\n<p><em>Game originally created in 2010 by ZeptpLab, a Russian company.</em><em>\u00a0This game\u00a0has been downloaded more than 405 million times since its release!</em></p>", "metacritic": null, "released": "2021-03-01", "tba": false, "updated": "2021-03-05T11:35:38", "background_image": "https://media.rawg.io/media/screenshots/d1e/d1e0f9cf772a0b13e2c184b7880507eb.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 14, "game_series_count": 0, "reviews_count": 0, "platforms": ["Android", "Web"], "developers": ["Geogalion"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}