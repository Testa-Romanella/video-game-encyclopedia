{"id": 901831, "slug": "tetraagon", "name": "Tetra/Agon", "name_original": "Tetra/Agon", "description": "<p><strong>Introduction</strong></p>\n<p>\n</p>\n<p>You find yourself alone in an industrial district. A strange metallic box floats nearby. You're posed with a puzzle in a strange script, and a choice on what happens next.<br/></p>\n<p>You're being tested. What for? Who is testing you? Will you ever find out?</p>\n<p>Tetra/Agon is a puzzle/action FPS game. In it's current v0.1 form it's a single-level demonstration of enemy AI, weapon handling and puzzle gameplay.<br/></p>\n<p><strong>Instructions</strong></p>\n<p>WASD or arrow keys - Movement<br/>Space - Jump<br/></p>\n<p>1-4 - Select weapon<br/>Left mouse - Shoot/press button<br/>Right mouse - Interact</p>\n<p>Hint: Some weapons are better choices against different enemies. If you get stuck, remember that the checkpoint is saved before you pick your new weapon upgrade so you can go back and try a different weapon.<br/></p>\n<p>\n</p>\n<p><strong>Why Tetra/Agon?</strong></p>\n<p>Tetra/Agon is the first 3D project that I've added to my profile here on Itch. There were a number of specific elements I had in mind at conception:</p>\n<ul><li>First person shooter: As a massive FPS gamer, I've been looking forward to getting stuck in to building a FPS game myself. A major consideration for me here is having a selection of weapons which are all useful but varied in meaningful ways.</li><li>3D dynamic path finding: I wanted enemies that have full 3D dynamic path finding, which I don't think I've seen in any major FPS game. In other games I've encountered flying enemies they're either \"fake\" flying (i.e. hovering at a set height using 2D navmesh path finding), following preset paths, navigating in spaces without obstacles, or relying on \"sliding\" along obstacles to get to targets.</li><li>Puzzle box: I wanted a \"puzzle box\" feature, a type of non-repeating puzzle that could be included easily multiple times. I wanted this to be under time pressure (after the first \"learner\" box) to bring the challenge of switching between the kind of thinking required for fast FPS action and for logic puzzles under time pressure.</li><li>Pattern of four: I had a vision of the patterns of four throughout the game - four core challenges (solve, shoot, survive and strengthen), numbers in base four, four parts to each puzzle, four puzzles to each puzzle box, four weapons, four enemies. It was an interesting challenge to hold within this pattern within reason, and this sort of deep equilibrium can be useful in communicating implicitly with the player.</li></ul>\n<p>\n</p>\n<p><strong>Learning points</strong></p>\n<p>\n</p>\n<ul><li>Deterministic gameplay - Deviating from my highly stochastic shoot-em-up games, as a challenge and experiment I decided to make this game without any random elements. Gameplay in Tetra/Agon follows strict deterministic rules and there are no random elements used to determine gameplay.</li><li>Object libraries - I invested fully in using object libraries for Tetra/Agon: all enemies, projectiles, particles, etc are stored in object libraries so there are no objects instantiated at run time.</li><li>A Star algorithm - I've experimented with this previously in a very early  prototype 2D project, however Tetra/Agon takes it much further by implementing it in a 3D space with higher quantities of nodes. Path finding data is pre-generated and stored in the game files, so it does not need to be calculated at run time.</li><li>3D node map - To enable enemies that can move in three dimensions, I built a 3D node map for the A Star algorithm to navigate and a system for generating and linking the nodes easily.</li><li>Finite State Machines - With Tetra/Agon I used a hierarchical FSM structure for enemy behaviour as a suitable match for relatively low enemy complexity.</li><li>Quaternions - I avoided using Euler angles as much as possible in Tetra/Agon, instead making use of more Quaternion-specific methods to solve problems.</li><li>Explicit referencing - I have used singletons a lot in my previous games, but as they can sometimes cause problems I avoided using them at all in TetraAgon as an exercise. Every connection between classes is\u00a0explicitly\u00a0defined.</li><li>Music Manager - It was interesting to  create a dynamic music manager, which transitions smoothly between a selection of music tracks depending on the game state.</li></ul><strong>Future features</strong><br/>\n<ul><li>Additional scenes. I used just one (pre-generated) scene for v0.1 as my primary focus was building the AI and gameplay. I could expand Tetra/Agon to have multiple scenes and with events triggered as the player moves through the scenes as well as adding more depth to the story behind them.</li><li>Models and skins. Currently the models used for weapons are combinations of simple primitives, and all skins used are quite minimal. Visuals could be improved here fairly significantly.</li><li>Additional puzzle types. I'd like to add some additional types of puzzle between waves, such as puzzles with pattern matching, moveable puzzle pieces, or that require rotating and inspecting the puzzle.</li><li>Additional enemy strategies. Though the enemies have a decent amount of variety in behaviour, there are some more advanced tactics (e.g. hit and run, hiding, attacking from behind, coordinating with other enemies) that I'm interested in implementing in their behaviour.</li><li>Boss-type enemies. Occasional enemies with combinations of weapons, multiple damage stages and advanced attack patterns would bring an interesting change in gameplay.</li></ul>\n<p>\n</p>\n<p><strong>Credits</strong></p>\n<p><strong>Game design, development and coding</strong></p>\n<p>Joseph Norris/CoSeph Games</p>\n<p><strong>Level design</strong></p>\n<p>Gameplay scene - demo scene from RPG/FPS Game Assets for PC/Mobile (Industrial Set v2.0) - Dmitrii Kutsenko</p>\n<p>https://assetstore.unity.com/packages/3d/environments/industrial/rpg-fps-game-as...</p>\n<p><strong>Code samples and tutorials</strong></p>\n<p>Outline script - Chris Nolet</p>\n<p>https://github.com/chrisnolet/QuickOutline</p>\n<p>Stair climbing - Cobertos</p>\n<p>https://cobertos.com/blog/post/how-to-climb-stairs-unity3d</p>\n<p>Finite state machine - Mina P\u00eacheux</p>\n<p>https://medium.com/c-sharp-progarmming/make-a-basic-fsm-in-unity-c-f7d9db965134</p>\n<p><strong>Fonts</strong></p>\n<p>Graalen - Pixel Sagas - Neale Davidson</p>\n<p>https://www.1001freefonts.com/graalen.font</p>\n<p>Alien Ravager - Darrell Flood</p>\n<p>https://www.fontspace.com/alien-ravager-font-f78813</p>\n<p><strong>Models</strong></p>\n<p>Low poly space craft assets - Trockk</p>\n<p>https://trockk.itch.io/collection-of-low-poly-space-craft-assets</p>\n<p><strong>Textures</strong></p>\n<p>Free PBR Metal Plates - Yughues</p>\n<p>https://assetstore.unity.com/packages/2d/textures-materials/metals/yughues-free-...</p>\n<p><strong>Sounds</strong></p>\n<p>Running sound - Albert Balbastre</p>\n<p>https://freesound.org/people/bulbastre/sounds/103965/</p>\n<p>Landing/jumping sound - Sean Porio</p>\n<p>https://freesound.org/people/SeanPorio/sounds/519262/</p>\n<p>Various effect sounds - FreeSFX pack from Kronbits</p>\n<p>https://kronbits.itch.io/freesfx</p>\n<p>Various sound effects - Prunus Productions Scifi Sound Pack</p>\n<p>https://prunusproductions.itch.io/scifi-sound-pack</p>\n<p><strong>Music</strong></p>\n<p>Space Music Pack - Goose Ninja</p>\n<p>https://gooseninja.itch.io/space-music-pack</p>", "metacritic": null, "released": "2022-12-29", "tba": false, "updated": "2022-12-30T06:31:08", "background_image": "https://media.rawg.io/media/screenshots/67a/67aa86d23c9fb8cd4f8b5a3c4c669596.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 154, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Seph"], "genres": ["Action", "Puzzle"], "publishers": [], "esrb_rating": null}