{"id": 728223, "slug": "snake-prototype-baxter-dulieu", "name": "Snake Prototype (Baxter Dulieu)", "name_original": "Snake Prototype (Baxter Dulieu)", "description": "Singleplayer Overview:\r\n<p><strong><em>(Scroll to bottom for RULES and GAME DOWNLOAD)</em></strong></p>\n<p>My plan for this game was to recreate a classic game that I loved and to add to it using efficient and creative techniques.\u00a0 The primary challenge I gave myself was to create the entire games functionality using a 2D array and to make my code as efficient as possible. The 2D array stores three unique values,</p>\n<p><strong>4 </strong>= The head of the snake, determines what the tail segments follow</p>\n<p><strong>2 </strong>= the body of the snake / the tail segments. If the heads next grid position equals 2, the player will die.</p>\n<p><strong>3 </strong>= Apples, whenever a player head overlaps an apple a tail segment will be\u00a0 added to the end of the snake</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0</p>\n\n<p>The functionality of this game doesn't use Unity's built in update function, rather the functionality of the game occurs every nth seconds (depending on the difficulty) using the InvokeRepeating() feature. This therefore determines the speed of the snake as well as ensures that code isn't running every frame.</p>\n<p>Every time a player eats an apple a new tail segment will be instantiated and added to a List&lt;&gt;.\u00a0 Every time the main Movement function is called, starting from the last object in the List, each object will move to the position of the object in front of them.</p>\n<p>All collisions including wall collisions are handled using the 2D grid system.\u00a0</p>\n<p><em><strong>Important Note: (Player's can not move the direction that they have just come from).</strong></em></p>\n\n\n\r\nMultiplayer Overview:\r\n\r\n<p><strong><em>(Scroll to bottom for RULES and GAME DOWNLOAD)</em></strong>\n</p>\n<p>\u00a0This level uses the same system as singleplayer, however some notable changes include that there are now two seperate players. <strong>Player 1</strong> is controlled using the WASD keys and\u00a0<strong>Player 2</strong> is controlled using the Arrow Keys.\u00a0</p>\n<p>Player's will compete to achieve the highest score via collecting apples before the other player and cutting eachother off. At the end of each game the player's will be reported with <strong>1 point</strong> for each apple they won throughout the game and <strong>5 points</strong> if they cut off the other player, causing them to die.\u00a0</p>\n<p>To make this game mode more enjoyable for the players, they will not be punished for running into walls and can even hide their length from the other player.</p>\n\n\n\r\nAI Overview:\r\n<p><strong><em>(Scroll to bottom for RULES and GAME DOWNLOAD)</em></strong>\n</p>\n<p>The AI level uses the A* Algorithm to control the snake and find the fastest path to each apple.\u00a0 This of course means that its impossible for the snake to actually win the game as it is not considering the safest path, rather the quickest. However I have adapted this algorithm to give the snake AI the best possible chance of surviving.</p>\n<p>Whenever the snake manages to cut itself off, instead of searching for the quickest path to the next apple\u00a0(which would return null as there is no possible path), it will move the its nearest neighbour that isnt populated by the snake or any of its tail segments.\u00a0</p>\n<p>The algorithm takes into account the grid positions that it's tail segments are currently in and will not accept that as a valid node position and therefore attempt to find a valid way around it.</p>\n<p>This level uses a combination of custom Nodes as well as the same 2D array seen in the singleplayer mode. These nodes contain the\u00a0</p>\n<ul><li>GridValue (value of position\u00a0in the 2D array, e.g 0, 2, 4)</li><li>xPosition (x value in 2D array)</li><li>yPosition (y value in 2D array)<br/>\n</li><li>GScore</li><li>HScore</li><li>FScore</li><li>indexPosition (The position of the node in the AllNodes array)</li><li>ConnectedNodes (array of nodes adjacent to the current node)</li><li>CameFrom (The previous node on the path)</li></ul>\n\n\r\nRules\r\nSingleplayer Rules\r\n\r\n<ul><li>WASD to move laterally.</li><li>\u00a0Eating Apples (Red Cubes) will grow the player's tail, granting you 10 points each.</li><li>Eating your tail\u00a0will cause the game to end</li><li>Hitting a wall will cause the game to end</li><li>Try get a high score, with a max of 6250 to win!</li></ul>\r\nMultiplayer\u00a0Rules\r\n\r\n<ul><li>Player 1 uses WASD to move, Player 2 uses the arrow keys\r\n</li><li>The player won't die if they hit a wall but will die if they run into themselves or the other player.\r\n</li><li>At the end of the game the player is granted 1 point for each apple they have eaten and 5 points if the other player caused the game to end\u00a0(ran into them)\r\n</li></ul>\r\nAI Level\u00a0Rules\r\n\r\n<ul><li>No rules, sit back and see how many points the AI can score\r\n</li></ul>", "metacritic": null, "released": "2022-01-26", "tba": false, "updated": "2022-01-28T07:20:42", "background_image": "https://media.rawg.io/media/screenshots/94f/94fb0def8b0af70a7f168b0c298af51e.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 19, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC", "macOS"], "developers": ["Baxter Dulieu"], "genres": [], "publishers": [], "esrb_rating": null}