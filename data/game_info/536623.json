{"id": 536623, "slug": "vector-flight-why485", "name": "Vector Flight (Why485)", "name_original": "Vector Flight (Why485)", "description": "Warning! This is an UNSUPPORTED\u00a0tech demo and requires an Xbox One controller!\r\n<p>This started as yet another one day experimental flight model, but along the way also morphed into more practice using Shapes to draw a HUD. Shapes looks <strong>amazing</strong> for HUD stuff since you can set it to additive and it effectively works like vector graphics. No matter how high the resolution gets, this stuff still looks amazing.<br/></p>\r\nControls\r\n<p>Since this was just a personal tech demo that I decided to release, input has not been generalized. <strong>This game requires an Xbox One controller.</strong></p>\r\nInputGamepadPitch/YawLeft ThumbstickThrottle up/downA/BNozzle up/downX/Y\r\nShapes for HUDs\r\n\n<p>That said, it's a bit tricky to use, because you can't use it in screen space the same as normal UI. If you want to project things onto a HUD, you'll probably need to use\u00a0RectTransfomUtility to project things out in the distance to a HUD canvas. While Shapes is <strong>not</strong>\u00a0a UI library, it\u00a0can be drawn relative to an arbitrary RectTransform, so they can still be positioned on Canvases using anchors. If you have static Shapes, you can also create them in the Editor itself and just reposition them as needed.</p>\n<p>Shapes works best when you can draw it directly into the world. I think if you were making a more sci-fi game, or just a more video gamey game in general, you could make some really awesome stuff appear in the world.</p>\r\nThe Numbers!\r\n\n<p>Where I really went too far, was writing my own way to draw numbers. I'm basically manually drawing all of the individual numbers on the HUD using my own very simple custom made print function. That's probably not something I would keep up, and just use a normal font instead, but it's possible if somebody were so motivated.</p>\r\nRuminations on the Tiny Combat flight model\r\n<p>The thought that\u00a0the current Tiny Combat flight model\u00a0might be too complicated for its own good has been keeping me up at night. The more I play my own game as it's been maturing, the more I've been wondering that the current flight model isn't actually making the game any\u00a0<em>better.</em> It almost feels like the fun parts of the game are fun <em>despite </em>some particulars, and not because of it.</p>\n\n<p>For example, the complex way that drag is handled is at least based in reality, even featuring things like wave drag to make breaking the sound barrier a more notable event for the planes that can do it. Each of the wings and control surfaces are\u00a0physically simulated, with its own lift and drag curve that's being calculated and applying forces on the plane over a hundred times a second. However, even that system is already \"compromised\" because a realistic configuration isn't very fun to fly. All the wings and control surface are neatly lined up with axes of rotation and don't match their apparent location or shape.</p>\n<p>I also have a more long term problem with it, which is that the added complexity makes creating new aircraft much more difficult. I\u00a0recently did a major rework to how the AI aircraft are built that resulted in a <em>tremendous</em> boost to the efficiency of adding new AI planes. Adding a new plane, from scratch, can\u00a0be done in a single day if everything goes well.</p>\n\n<p>One of the reasons this was possible is because AI planes use a simplified flight model. Configuring a new one is fairly straightforward and mostly involves just plugging some numbers in.\u00a0Honestly, I\u00a0feel like the current AI flight model could stand on its own as the player flight model in a more arcadey game, but it can't handle landing or VTOL. If it weren't for those two things, I'd be seriously considering moving the player over to the AI flight model. That move would\u00a0also have the awesome benefit of\u00a0opening up all the AI aircraft to be flyable, though they would still require cockpit art.</p>\n<p>If I\u00a0want to change the player flight model\u00a0(which to be absolutely clear is something I'm\u00a0<strong><em>not\u00a0</em></strong>committing to right now), it would require something new. Something that's in between where the current AI and player flight models stand.\u00a0</p>\n<br/>\n<p>A hypothetical new flight model would need to preserve the things that I think the current one does well, and that I\u00a0think are actually fun and contribute to the game.\u00a0Specifically that would be: VTOL, the damage model, ground handling, and takeoffs/landings.\u00a0</p>\n<p>Figuring out if there is a\u00a0way to maintain those three things, but in a simpler format, has been really eating away at me lately.\u00a0A simpler flight model would not only make it easier to fly and more predictable (I\u00a0could even remove some of the crazy PID things I'm doing), but it would also make adding new player aircraft (in the future) much easier, as one of the biggest difficulties with adding new player aircraft is just how complex the flight model is for them.</p>\r\nThe Vector Flight Model\r\n\n<p>I actually came back to a concept I had in\u00a0Tiny Combat Arcade, where a very simple cruciform configuration of wings\u00a0are used only for straightening out the velocity vector. Rotations are\u00a0<em>mostly</em> handled through applying magic torques, however some physically generated torques are created naturally by shifting the wings around a bit.</p>\n<p>This model is hardly \"finished\", but it shows potential. I'll probably come back to it, since there's\u00a0still a few ideas I\u00a0have for tweaking and experimentation. I feel like I could mimic many of the interesting effects of the current Tiny Combat flight model simply by shifting the wings around or playing with center of gravity. Since its already physically based (i.e. using Rigidbodies and forces) it would also work perfectly with the custom landing gear wheels and suspension I have.</p>\n<p>Features of this flight model:\u00a0</p>\n<p><strong>Vectored thrust for VTOL aircraft</strong></p>\n<ul><li>The direction thrust is applied can be varied. Point it down to go up. Point it forward to go forwards.</li></ul>\n<p><strong>Stall speed whi</strong><strong>ch pushes the nose down</strong></p>\n<ul><li>This is accomplished by moving the wings slightly backwards, creating a pitching down moment as the center of lift is behind the center of mass. This is actually how real aircraft are generally configured, but it gets trimmed out and compensate for with a horizontal stabilizer.</li></ul>\n<p><strong>Turning while banking is possible</strong></p>\n<ul><li>This is something that every arcade flight model has to come up with a weird workaround for when not using physics. Tiny Combat Arcade used this method, where a bank angle automatically yaws the plane in that direction. This flight model accomplishes the same thing through physical means. The vertical wing is offset backwards slightly, which induces a yawing torque at speed while banked\u00a0for the same reason a rearward offset wing causes the nose to drop. This results in a very natural feel where the \"tail\" of the plane is physically causing the rotation.</li></ul>\n<p><strong>Linear drag model</strong></p>\n<ul><li>Lifted right out of Freelancer due to its predictability, drag and angular drag forces are simply linearly proportional to velocity. This isn't \"correct\" but I was curious how it would feel and it's trivially easy to derive theoretical performance numbers like max speed. (Though after the fact, I did figure out how to do it for the typical drag formula.)</li></ul>\n<p><strong>G limited turns</strong></p>\n<ul><li>Using the above, I\u00a0can figure out the exact max turn rates generated by forces and drags, which\u00a0also means I can go <em>backwards</em>\u00a0and figure out what forces generate specific turn rates. This allows me to limit G, not through a reactive method like a PID or dampening input, but by actually limiting the torque applied in a turn to precisely what would generate that turn rate. This is a much better, and much more predictable, means of G-limiting.</li></ul>\n<p><strong>Induced drag</strong></p>\n<ul><li>Using the wings for lift works great. Using them for drag causes more drag than I'd like, but I still wanted them to slow the plane down when turning.\u00a0I\u00a0worked around this by making it so that drag is modified by G, such that when no G is being pulled, wings generate no drag. This isn't strictly correct, but it gives the results I\u00a0wanted in both losing speed when turning, but keeping speed very predictable.</li></ul>\n<p><strong>Induced drag</strong></p>\n<ul><li>Using the wings for lift works great. Using them for drag causes more drag than I'd like, but I still wanted them to slow the plane down. I\u00a0worked around this by making it so that the wings generate drag in relation to G rather than AOA. This isn't strictly correct, but it gives the results I\u00a0wanted.</li></ul>", "metacritic": null, "released": "2020-12-21", "tba": false, "updated": "2020-12-25T07:50:51", "background_image": "https://media.rawg.io/media/screenshots/792/7922c61365a8b217a978b12e49dbc94e.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 30, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Why485"], "genres": ["Simulation"], "publishers": [], "esrb_rating": null}