{"id": 851218, "slug": "wireworld", "name": "Wireworld", "name_original": "Wireworld", "description": "<p>Wireworld is a cellular automaton proposed by Brian Silverman in 1987, as part of his program Phantom Fish Tank. Which; widely became popular after an article\u00a0by A. K. Dewdney\u00a0in the January 1990 edition of Scientific American.</p>\n\n<p>If you do find any bugs please report them in the comments. I am immensely grateful to those that do so. Thank you.</p>\n\r\nRULES:\r\n<p>A Wireworld cell can be in one of four different states, usually numbered 0\u20133 in software, modeled by colors in the examples here:</p>\n<p>\n</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0\u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0empty (black),</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0electron head (blue),</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0electron tail (red),</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0conductor (yellow).</p>\n\n<p>As in all cellular automata, time proceeds in discrete steps called generations (sometimes \"gens\" or \"ticks\") or in our case cycles/N. Cells behave as follows:</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0empty \u2192 empty,</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0electron head \u2192 electron tail,</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0electron tail \u2192 conductor,</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0conductor \u2192 electron head if exactly one or two of the neighboring cells are electron heads, otherwise remains conductor.</p>\n\n<p>Wireworld uses what is called the Moore neighborhood, which means that in the rules above, neighboring means one cell away (range value of one) in any direction, both orthogonal and diagonal.</p>\n\r\nControls:\r\n<p>\u00a0 \u00a0 1. Copper</p>\n<p>\u00a0 \u00a0\u00a02. Electron Head</p>\n<p>\u00a0 \u00a0\u00a03. Electron Tail</p>\n<p>\u00a0 \u00a0\u00a0R. clear screen</p>\n<p>\u00a0 \u00a0\u00a0WASD Move</p>\n<p>\u00a0 \u00a0\u00a0Mouse Wheel Zoom</p>\n<p>\u00a0 \u00a0\u00a0Escape opens menu</p>\n<p>\u00a0 \u00a0\u00a0Space runs simulation</p>\n\n\r\nInstall:\r\n<p>\u00a0 \u00a0\u00a01. Extract WireWorld.zip</p>\n<p>\u00a0 \u00a0\u00a02. Run main.exe</p>\n\n\r\nLogic Elements:\r\n\r\nCycles:\r\n\n<p>The Cycle/ Period/ N is calculated by the distance between electron heads starting at 0.</p>\n\r\nBasic Elements:\r\n<br/>\n<p>1. 3 cycle Clock</p>\n<p>2. 4 Cycle Clock</p>\n<p>3. Data Copying</p>\n<p>4. Delaying Data</p>\n<p>5. Diodes<br/></p>\n<p>6. Active Control Line Transistor (ANDNOT)<br/></p>\n<p>7. Inactive Control Line Transistor (AND)<br/></p>\n\n\r\nLogic Gates:\r\n\n\r\nAND Gate:\r\n\n<p><em>An AND gate emits an electron if there are incoming electrons at both input wires.</em></p>\n\n\n\r\nANDNOT Gate:\r\n<br/>\n<p><em><em>The ANDNOT gate can be seen as a data-driven NOT gate: ANDNOT(A, B) = AND(A, NOT(B)).</em></em><br/></p>\n\r\nNAND Gate:\r\n\n<p><em>A NAND gate always emits an electron except when there are incoming electrons at both input wires.</em></p>\n\n\r\nNOT Gate:\r\n<br/>\n<p><em>A NOT gate emits an electron if and only if there is no incoming electron.</em><br/></p>\n\r\nOR Gate:\r\n\n<p><em>An OR gate emits an electron if there is an incoming electron at one of the two input wires.</em></p>\n\n\r\nXOR Gate:\r\n\n<p><em>An XOR gate emits an electron if there is an incoming electron at one of the two input wires, but not on both.</em><br/></p>\n\n\r\nEQUAL Gate:\r\n\n<p><em>An EQUAL gate emits an electron if there are incoming electrons at both input wires and also if there is no incoming electron on either wire.</em><br/></p>\n\n\r\nUseful Things:\r\n\n\r\nFrequency Doublers and Halvers:\r\n\n<p>1-4.\u00a0Frequency doublers</p>\n<p>5-7 Frequency Halvers</p>\n\n\r\nFuses:\r\n\r\n<p><em><em>A signal to the fuse will cause it to stop all data flowing. Depending on how long the wire to the transistor (transistors) on the right is being fashioned, the data will stop only after a certain delay.</em></em></p>\n<p>1.\u00a04-cycle Fuse</p>\n<p>2.\u00a05-cycle fuses</p>\n<p>3.\u00a05-cycle fuses</p>\n<p>4.\u00a0Two 6-cycle fuses</p>\n\n\r\nWire Crossings:\r\n\n\n\r\nMemory:\r\n\r\nROM:\r\n\r\n<p><em>Several combined ANDNOT/OR gates can be arranged in a rectangular pattern to form a read-only memory. Here we have three input lines, each associated with four stored bits. The bits are those gates that have a missing 'ear'. An incoming electron moves toward the top right. Whenever the electron encounters a stored bit, it creates a twin. This twin then travels towards the bottom right, where it exits.\u00a0 Check how this corresponds to the missing 'ears' of the gates.</em></p>\n\n\r\nFlip-Flops, RS Latch:\r\n\n<p><em>A flip-flop or latch is a circuit that has two stable states and can be used to store state information.\u00a0</em><em>It is the basic storage element in sequential logic.</em></p>\n\n\r\nDetectors:\r\n\r\nPositive and Negative edge detectors:\r\n\n<p><em>A positive-edge detector emits a signal when it finds the first One (electron) in a row of Ones.\u00a0</em><em>A negative-edge detector emits a signal when it finds the first Zero (missing electron)after a series of Ones.</em></p>\n\n\r\nSwitches:\r\n\r\nMultiplexer, Demultiplexer:\r\n\n<p><em>A positive-edge detector emits a signal when it finds the first One (electron) in a row of Ones.\u00a0</em><em>A negative-edge detector emits a signal when it finds the first Zero (missing electron)after a series of Ones.</em></p>\n<p>1. Multiplexer N &gt; 4</p>\n<p>2. Demultiplexer N &gt; 4</p>\n\n\r\nShift Register:\r\n\n<p><em>A shift register activates a series of memory cells one by one.\u00a0</em><em>A shift register is also called a 'serial to parallel converter' because the first signal is directed to the first output wire, the second signal to the second output wire, and so on</em><br/></p>\n\n\r\nMathematical Operations:\r\n\r\nBinary Adder:\n<p><em>Input: one string of consecutive electrons representing a number Output: a series of active or inactive flip-flips, representing a binary number.</em></p>\n\n\n<p>I do not own Wireworld nor did I come up with any of the components\u00a0shown, but all code, art, and animations were\u00a0done by me (Jakester).</p>\r\n\r\nCheck Out:\r\n<p>https://en.wikipedia.org/wiki/Wireworld</p>\n<p>https://www.quinapalus.com/wi-index.html</p>\n<p>https://web.archive.org/web/20080124093712/http://karl.kiwi.gen.nz/CA-Wireworld....</p>\n<p>https://content.wolfram.com/uploads/sites/13/2018/07/27-1-2.pdf<br/></p>\r\n\r\nSource Code:\r\n<p>https://github.com/McCoy1701/Web-Wireworld<br/></p>\r\n\r\n\r\nGates Designed By:\r\n\r\n<p><strong>Karl Scherer\r\n</strong></p>\n<p><strong>Nyles Heise\r\n</strong></p>\n<p><strong>Klaus Mogensen\r\n</strong></p>\n<p><strong>Michael Greene</strong></p>\n<p><strong>David Moore\u00a0</strong></p>\n<p><strong>Mark Owen</strong></p>", "metacritic": null, "released": "2022-09-15", "tba": false, "updated": "2022-09-16T12:08:59", "background_image": "https://media.rawg.io/media/screenshots/180/180657db10540ff22d70fa867e6a036c.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 13, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Jakester"], "genres": ["Simulation"], "publishers": [], "esrb_rating": null}