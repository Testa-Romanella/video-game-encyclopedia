{"id": 202660, "slug": "cmyk-nick-rush-cooper", "name": "CMYK (Nick Rush-Cooper)", "name_original": "CMYK (Nick Rush-Cooper)", "description": "I am making a-game-a-week(ish).\r\nThese will be short prototypes, very unpolished, probably broken.\r\n<p>A Sokoban-style game next.\u00a0Based upon the CMYK subtractive color model.<br/></p>\n<ul><li>Made in ~8 hours using PuzzleScript</li><li>Source Code</li></ul>\r\n\r\nNotes:\r\nThe game:\r\n<p>The decision to try out PuzzleScript this week came first, so I was immediately faced with the prospect of having to design a puzzle game. Having absolutely no idea how to even <em>start\u00a0</em>designing a puzzle game, the 'made in' estimate above should probably include another couple of\u00a0hours spent just doodling ideas whilst otherwise marking exam papers,\u00a0before I even had any clue what direction to take...</p>\n<p>I started with a vague notion of a theme of 'pirates'; something about finding treasure. This did not lend itself to anything obvious in terms of game mechanics. After mulling over a number of possible themes,\u00a0I realised that unless a theme had a really obvious mechanic that tumbled out of it, that was not the way to go about designing a puzzle game; I needed a core mechanic. So\u00a0I gave up, and thought 'I'll just make a maze game' of some kind. My very first idea was the kind of \"loops and traps\" stye maze (similar to the 'red doors' maze from\u00a0<em>The Crystal\u00a0Maze</em>)</p>\n<p>Actual inspiration came from the printer at work; it needed new ink, and as I was looking for a new cartridge, I noticed the colours were Cyan,\u00a0Magenta,\u00a0Yellow and blacK (CMYK). I'd seen this before for in printing, and wondered why screens used an RGB system but printing used CMYK. A little read of Wikipedia later and I had my mechanic: A maze game with 'logic gates' where colour was subtracted from the player.</p>\n<p>Turns out, mazes are really dull.\u00a0And super easy to solve, especially if you can just see the whole thing, and inventing difficult or interesting mazes was a challenge. Without moving the whole thing to DungeonScript (a fork of PuzzleScript that runs in a first person view), I needed something more than mazes and gates and things to collect.\u00a0So I caved in and added blocks.\u00a0Turns out, this made making puzzle so much easier; with the layer of complexity that subtracting colour fields adds, even simple block pushing puzzles became tricky enough to call challenges.\u00a0</p>\n<p>I'm not sure that the core mechanic is a particularly good idea, in the end. It involves trying to remember a 'tree' of cascading colour subtraction so that you can work out how to take a white block. The earlier puzzles need to spend far too long teaching this core mechanic, and in the later puzzles,\u00a0I tried to avoid creating levels where the primary challenge was simply remembering how to move from one colour to another. The diagram was supposed to work as an aid, but more serves to show just how overly complex this design is. The super-flat art style is a product of placeholder design that\u00a0I never got\u00a0 around to updating, and ended up quite licking anyway in the end.\u00a0The ability to shove blocks past a field when the player can't follow started out as a bug in the code, but turned out to be the only way to make solvable puzzles that weren't super simple, so it stays in, even if a bit unintuitive.</p>\r\nThe engine:\r\n<p>PuzzleScript is the first text-based coding used in this series. It presents as a area to edit code on the left, with the play-space and output logs on the right. It's language, however, is quite unusual. The code itself is built from very specific section; a list of objects (and their drawing as 5x5 blocks), sounds, collision layers, rules and levels. Importantly, for novice developers, all of these sections, apart from rules, are entirely descriptive. For example, levels are simply a grid of letters, numbers and other characters, each character being a square on the grid of the level as it will appear, and each character representative of an object\u00a0(or layer of objects) as defined in the 'Legend' section. Levels can be immediately loaded by simply Ctrl+click-ing them, and there's even an in-built level editor for easier editing.</p>\n<p>The 'Rules'' section in the only 'proper' bit of coding that\u00a0PuzzleScript uses. It is, however, based upon description, like rest of the system. Fundamentally, it is primarily made from 'IF' statements, albeit not using that statement. Every single rule has a condition on the left hand side that the game 'looks' for at the end of each move (or per user-defined time period, if you set the game to be realtime) and, on the right-hand side, what will occur if that condition is found.</p>\n<p>For example, there is no 'red' in a cyan coloured player object.\u00a0So cyan fields need to stop red players. It looks like this:</p>\r\n\r\n[ &gt; player_r | gate_c ] -&gt; [ stationary player_r | gate_c ]\r\n\r\n<p>On the left, it looks for a RED player moving towards a CYAN field (gate). The vertical bar means adjacency, the '&gt;' refers to relative movement (the player moving forwards, into an adjacent gate). The result simply stops the player moving by marking it stationary. The most simply Sokoban-style games can be built from just one rule.\u00a0CMYK in built from a bit over 50 rules.\u00a0However, many of these are duplicates to account for the various colours. Without these colours, there would just be four rules.</p>", "metacritic": null, "released": "2018-05-24", "tba": false, "updated": "2019-01-09T12:41:06", "background_image": "https://media.rawg.io/media/screenshots/ba1/ba1f7be6c1db4f4edb16b8260bd45a0c.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 26, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Nick Rush-Cooper"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}