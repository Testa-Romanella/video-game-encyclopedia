{"id": 558716, "slug": "10miglia-by-marcos-retrobits", "name": "10Miglia by Marco's Retrobits", "name_original": "10Miglia by Marco's Retrobits", "description": "<p>10 Miglia: a BASIC 10 Liner driving game for the Sinclair ZX Spectrum<br/>===============================================================</p>\n<p>Marco Varesio\u00a0</p>\n<p>Marco's Retrobits: https://retrobits.itch.io<br/>English language blog: https://retrobits.altervista.org<br/>Italian language blog: https://somebitsofme.altervista.org<br/>YouTube channel: https://www.youtube.com/channel/UCWTxG8paNsOUEU5mPcNklXA</p>\n<p>Warm up your car's engine for the most exciting 10-liner race in the 8-bit computer world! Three, two, one... GO!<br/>10 Miglia is a BASIC driving game for the Sinclair ZX Spectrum home computer. It is my entry to the 2021 edition of the BASIC 10 Liner Contest, PUR-80 category.\u00a0<br/>This means that the program is made up of 10 lines of BASIC code (max 80 characters per logical line).\u00a0<br/>Select your favourite track and drive your shiny red vintage car, avoiding accidents with other cars and going off the road.\u00a0<br/>Achieve the highest score by going as far as you can.<br/>Controls: steer your car with \"z\" (left) and \"x\" (right).</p>\n<p>Game description<br/>================</p>\n<p>When the program starts, it informs you about the controls and prompts you to select your desired track, by tapping any key.<br/>After selecting the track, the game starts. Your car is the red one in the top line of the screen and heads towards the bottom.\u00a0<br/>Use the \"z\" and \"x\" keys to steer your car and avoid crashes.<br/>The highest score is recorded during the gaming session.\u00a0<br/>The game is over either when your car hits another car or when it goes off the road.\u00a0<br/>When the game is over, both your current score and the highest score are shown.<br/>The game will restart with selected track by hitting any key.\u00a0<br/>Reload the program to play a different track; it's only 10 lines, so loading is fast! ;-)</p>\n<p>Program description<br/>===================</p>\n<p>Variables<br/>---------</p>\n<p>H\u00a0 \u00a0High score\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>S\u00a0 \u00a0Score\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>D\u00a0 \u00a0Random seed\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>A\u00a0 \u00a0Random number\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>M\u00a0 \u00a0Screen permanent attributes [system variable]memory address\u00a0<br/>I\u00a0 \u00a0Loop iterator; road segment Y position\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>R\u00a0 \u00a0Road segment left side X position\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>B\u00a0 \u00a0Other cars ink colour, alternating between 0 (BLACK) and 1 (BLUE)\u00a0<br/>C\u00a0 \u00a0Other car X position\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>P\u00a0 \u00a0Previous other car X position (used to avoid car overlapping)\u00a0<br/>X\u00a0 \u00a0Player car x position\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>Z\u00a0 \u00a0Screen attribute of the next car fron position; used for collision detection\u00a0<br/>A$\u00a0 Crash (game over) message\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>B$\u00a0 Single space string; used to \"erase\" the car from its previous position\u00a0<br/>E$\u00a0 Car rear user-defined graphics (UDG) character (code 90 HEX)\u00a0<br/>F$\u00a0 Car front user-defined graphics (UDG) character (code 91 HEX)\u00a0<br/>K$\u00a0 User input pressed key\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p>\n<p>Program listing<br/>---------------</p>\n<p>1 LET M=23693:LET H=0:PRINT\"Steer: 'z' or 'x'\",\"Any key: select track\":PAUSE 0:LET D=CODE INKEY$:LET B$=\" \":RANDOMIZE D<br/>2 LET E$=\"{90}\":LET F$=\"{91}\":RESTORE 10:FOR I=0TO15:READ A:POKE 65368+I,A:NEXT I:BORDER 4:POKE M,34:CLS:READ A$:LET R=11:LET X=R+2<br/>3 FOR I=21TO0 STEP -1:GO SUB 9:BEEP .2*(I=0)+.1*(INT(I/6)=I/6),20+5*(I=0):NEXT I:LET I=21:LET B=0:LET P=0:LET S=0<br/>4 POKE M,62:PRINT AT 0,X;B$;AT 1,X;B$:POKE M,34:LET K$=INKEY$:LET A=USR 3582:GO SUB 9:LET A=RND:LET X=X+(K$=\"x\")-(K$=\"z\")<br/>5 LET Z=PEEK(22560+X):POKE M,58:PRINT AT 0,X;E$;AT 1,X;F$:LET R=R+(R&lt;20)*RND-(R&gt;2)*A:LET A=A*10<br/>6 IF A&lt;6 THEN POKE M,56+B:LET C=INT(R+1+A):IF C&lt;&gt;P THEN LET P=C:PRINT AT 20,C;E$;AT 21,C;F$<br/>7 IF Z&lt;&gt;62 THEN LET H=(H&gt;S)*H+(H&lt;=S)*S:PRINT#1;A$;S;\" HIGH:\";H:BORDER 2:BEEP .5,-15:RANDOMIZE D:PAUSE 0:GO TO 2<br/>8 LET S=S+1:LET B=(B=0):GO TO 4:REM MARCO V. 2021 MARCO'S RETROBITS https://retrobits.itch.io<br/>9 POKE M,87:PRINT AT I,R;\"{86}\";:POKE M,62:PRINT\"\u00a0 \u00a0.\u00a0 \u00a0\";:POKE M,87:PRINT\"{89}\"<br/>10 RETURN:DATA 60,126,231,195,255,126,126,126,66,66,231,255,255,126,90,60,\"CRASH! SCORE:\"</p>\n<p>Please note that this program listing is formatted in order to be used with the bas2tap utility, which converts a BASIC listing in an ASCII file to a .TAP emulator tape image.\u00a0<br/>In particular, the ZX Spectrum ASCII character values are represented as hexadecimal values in curly braces.\u00a0<br/>For example, the characters that represent the sides of the road are \"{86}\" and \"{89}\".\u00a0<br/>If you want to type this listing (on a real or emulated machine) rather than loading the provided tape image, you must replace these values with the corresponding characters.\u00a0<br/>The same applies to the car user defined graphic charcters, with hex codes 90 and 91.</p>\n<p>Source code explained<br/>---------------------</p>\n<p>Line 1 is executed only once when the program is loaded; it performs some initializations and prompts the player to choose the desired track by pressing any key. Tracks are (pseudo) randomly generated; however, the code of the character associated to the pressed key will be used as seed for the random generator. In this way, each track will always look the same, even across different plays.</p>\n<p>1 LET M=23693:LET H=0:PRINT\"Steer: 'z' or 'x'\",\"Any key: select track\":PAUSE 0:LET D=CODE INKEY$:LET B$=\" \":RANDOMIZE D</p>\n<p>The first statement stores in M the address of the system variable ATTR_P, containing the screen INK (foreground colour) and PAPER (background colour) attributes.\u00a0<br/>This allows to set these values by writing to this memory location, thus using only one POKE instruction instead of the INK, PAPER pair.\u00a0<br/>The second LET statement initializes the high score H to 0.\u00a0<br/>Then, the program prints some instructions and waits for a key press. The code of the corresponding character is stored in D; this value is finally used to initialize the pseudorandom generator.\u00a0<br/>B$ is initialized to the space character, and will be used to \"erase\" the player's car from its previous position, before drawing it to the new position at each game loop.</p>\n<p>Line 2 performs some other initializations and displays the road. It is called every time a new game starts:</p>\n<p>2 LET E$=\"{90}\":LET F$=\"{91}\":RESTORE 10:FOR I=0TO15:READ A:POKE 65368+I,A:NEXT I:BORDER 4:POKE M,34:CLS:READ A$:LET R=11:LET X=R+2</p>\n<p>E$ and F$ are assigned to the user-defined graphic characters corresponding to the rear and front of the cars; then, the FOR loop loads the shape of these graphics, by READing them from line 10.\u00a0<br/>The BORDER colour is set to green (4) and the POKE M, 34 statement is used to set the PAPER colour to green (4) and INK colour to red (2); see the screen memory layout documentation: http://www.breakintoprogram.co.uk/computers/zx-spectrum/screen-memory-layout for details.\u00a0<br/>The CLS statement clears the screen by setting it to the previously set PAPER colour (green). A$ is initialized to the game over message, read from line 10. The road left edge position R is set to 11 and the player's car horizontal position is set 2 characters right to the left edge of the road.</p>\n<p>Line 3 draws the road and performs other initializations:</p>\n<p>3 FOR I=21TO0 STEP -1:GO SUB 9:BEEP .2*(I=0)+.1*(INT(I/6)=I/6),20+5*(I=0):NEXT I:LET I=21:LET B=0:LET P=0:LET S=0</p>\n<p>The for loop is used to draw the road, by calling 22 times (one for each screen row, from bottom to top) the routine that draws a road segment, located at line 9.\u00a0<br/>While the road is being displayed, the BEEP statement is executed 4 times\u00a0 (when the iterator value I is a multiple of 6).\u00a0<br/>The sounds are used to warn the user that the race is starting (Thre, Two, One, GO!, you know). The last beep (when I=0) is longer and has a higher pitch.\u00a0<br/>Current score S is initialized to 0, as well as helper variables B and P.</p>\n<p>The actual game loop starts at line 4:</p>\n<p>4 POKE M,62:PRINT AT 0,X;B$;AT 1,X;B$:POKE M,34:LET K$=INKEY$:LET A=USR 3582:GO SUB 9:LET A=RND:LET X=X+(K$=\"x\")-(K$=\"z\")</p>\n<p>The first POKE statement sets the screen attributes to the road colours (PAPER 7, which corresponds to white - actually grey - for the asphalt and INK 6, which represents yellow, for the road line).\u00a0<br/>In this way, the effect of the subsequent PRINTs of white spaces at the player's car position is to \"erase\" the player's car.\u00a0<br/>The next POKE sets again the screen attributes to green paper, so that when the screen is scrolled up, the new line added at the bottom will be green.<br/>The USR statement implements a call to the scrolling routine, located in the ZX Spectrum ROM at address 3582 (HEX: 0DFE), which scrolls the screen up by one character line.\u00a0<br/>The new empty line at the bottom of the screen is filled with a new row segment, by calling the subroutine at line 9.\u00a0<br/>A new random number, that will be used later, is generated and stored into A. Then, if either the \"z\" or the \"x\" key is pressed, the variable storing the new X position of the player's car is incremented or decremented by 1 respectively.\u00a0<br/>In fact, if the pressed key is 'z', (K$=\"x\") evaluates to 0 and (K$=\"z\") evaluates to 1, so X is decremented by 1: (K$=\"x\")-(K$=\"z\") = 0-1 = -1.\u00a0<br/>Conversely, if the pressed key is 'x', the expression (K$=\"x\")-(K$=\"z\") evaluates to 1-0 = 1 and X is incremented by 1.</p>\n<p>Line 5 prepares for collision detection, draws the player's car at the new calculated position and determines the next row segment horizontal position:</p>\n<p>5 LET Z=PEEK(22560+X):POKE M,58:PRINT AT 0,X;E$;AT 1,X;F$:LET R=R+(R&lt;20)*RND-(R&gt;2)*A:LET A=A*10</p>\n<p>The PEEK statement reads the screen attributes of the new position of the player's car front.\u00a0<br/>This information will be used for collision detection. The POKE M, 58 statement sets the screen attributes to the player's car colours, i.e. red (2) INK on white/grey paper (7).\u00a0<br/>Now we can print the player's car at the new X position in the top lines of the screen.\u00a0<br/>After that, the horizontal displacement of the next road segment to be printed R is randomly determined: it will be either the same as current one or on character left or one character right.\u00a0<br/>The program also ensures that the road segment stays within the screen, i.e. the left side of the road stays within columns 2 and 20.\u00a0<br/>Finally, A is multiplied by 10 on order to have a random number between 0 and 10.</p>\n<p>Line 6 draws a new opponent car:</p>\n<p>6 IF A&lt;6 THEN POKE M,56+B:LET C=INT(R+1+A):IF C&lt;&gt;P THEN LET P=C:PRINT AT 20,C;E$;AT 21,C;F$</p>\n<p>With a probability of a bit less than 60% (A&lt;6), the program draws a new opponent car at the bottom of the screen. The opponent car INK colour will be either black (0) or blue (1) based on the value of B, while the PAPER colour is white/grey.\u00a0<br/>The opponent car horizontal position C is randomly calculated within the sides of the road and the car is printed only if its position C is different from the previously added opponent car position P. The newly calculated C value is saved into P.</p>\n<p>Line 7 handles collision with either another car or one of the sides of the road:</p>\n<p>7 IF Z&lt;&gt;62 THEN LET H=(H&gt;S)*H+(H&lt;=S)*S:PRINT#1;A$;S;\" HIGH:\";H:BORDER 2:BEEP .5,-15:RANDOMIZE D:PAUSE 0:GO TO 2</p>\n<p>From the PEEK statement in line 5, the Z variable holds the colour values of the position the player's car is heading to.\u00a0<br/>So, if this value corresponds to the empty road colours (yellow INK on white/grey PAPER), there is no collision; otherwise, the player's car is either over the edge of the road or over another car.\u00a0<br/>If so, high score H is updated to the maximum between previous high score and current score S and then the \"CRASH!\" game over message is\u00a0 printed.\u00a0<br/>The border colour is set to red (2) and a sad tone is BEEPed.<br/>Finally, the program reinitializes the random generator and waits for any key press before starting a new game, by jumping to line 2.</p>\n<p>If the game is not over, the program executes line 8:</p>\n<p>8 LET S=S+1:LET B=(B=0):GO TO 4:REM MARCO V. 2021 MARCO'S RETROBITS https://retrobits.itch.io</p>\n<p>Current score is incremented by one and the INK colour of the next opponent car to be added is updated: if the pevious car was black, the next car will be blue and vice-versa.\u00a0<br/>The program goes to line 4 and the game loop restarts.</p>\n<p>Line 9 contains the subroutine that prints a road segment:</p>\n<p>9 POKE M,87:PRINT AT I,R;\"{86}\";:POKE M,62:PRINT\"\u00a0 \u00a0.\u00a0 \u00a0\";:POKE M,87:PRINT\"{89}\"</p>\n<p>The POKE M,87 statement is used to set the colour of the road edges (bright red INK on bright white PAPER), while 62 is the usual attributes value for the road itself.<br/>The edges are displayed by means of the chequered characters with codes 86 HEX and 89 HEX, while the road is nothing else but 6 spaces with a full stop in the middle.\u00a0<br/>The road segment is printed at row I, column R.</p>\n<p>The last line contains the RETURN statement for returning from the subroutine starting at the previous line and DATA for the cars graphics and game over message:</p>\n<p>10 RETURN:DATA 60,126,231,195,255,126,126,126,66,66,231,255,255,126,90,60,\"CRASH! SCORE:\"</p>\n<p>Program lines length proof<br/>--------------------------</p>\n<p>By replacing each BASIC token with a single character and removing redundant blank spaces, each line in the resulting source code does not exceed the 80 characters limit:</p>\n<p>1lM=23693:lH=0:p\"Steer:'z' or 'x'\",\"Any key:select track\":m0:lD=IN:lB$=\" \":tD<br/>2lE$=\"{90}\":lF$=\"{91}\":S10:fI=0F15:AA:o65368+I,A:nI:b4:oM,34:v:AA$:lR=11:lX=R+2<br/>3fI=21F0 D-1:h9:Z.2*(I=0)+.1*(INT(I/6)=I/6),20+5*(I=0):nI:lI=21:lB=0:lP=0:lS=0<br/>4oM,62:pI0,X;B$;I1,X;B$:oM,34:lK$=N:lA=L3582:h9:lA=T:lX=X+(K$=\"x\")-(K$=\"z\")<br/>5lZ=O(22560+X):oM,58:pI0,X;E$;I1,X;F$:lR=R+(R&lt;20)*T-(R&gt;2)*A:lA=A*10<br/>6uA&lt;6 GoM,56+B:lC=INT(R+1+A):uC&lt;&gt;P GlP=C:pI20,C;E$;I21,C;F$<br/>7uZ&lt;&gt;62 GlH=(H&gt;S)*H+(H&lt;=S)*S:p#1;A$;S;\" HIGH:\";H:b2:Z.5,-15:tD:m0:g2<br/>8lS=S+1:lB=(B=0):g4:eMARCO V. 2021 MARCO'S RETROBITS https://retrobits.itch.io<br/>9oM,87:pII,R;\"{86}\";:oM,62:p\"\u00a0 \u00a0.\u00a0 \u00a0\";:oM,87:p\"{89}\"<br/>10y:D60,126,231,195,255,126,126,126,66,66,231,255,255,126,90,60,\"CRASH! SCORE:\"</p>\n<p>Considering that the above listing contains graphic character hexadecimal codes instead of the actual graphic characters, the length of lines 2 and 9 could be further reduced.<br/>Therefore, 10 Miglia is a suitable entry for the PUR-80 category of the BASIC 10 Liner Contest.</p>\n<p>Loading instructions<br/>====================</p>\n<p>10 Miglia is provided in TAP tape image format, which can be easily loaded in most ZX Spectrum emulators and on the real machines, either equipped with devices such as the DivMMC or by playing it through the MIC port using tools like PlayTZX or WinTZX.</p>\n<p>The following instructions apply to the Fuse open source emulator (http://fuse-emulator.sourceforge.net/), which is available for Unix, Linux, Windows, macOS and many other platforms. For other emulators or devices, please refer to their specific documentation for loading TAP files.<br/>Start the Fuse emulator and select the Spectrum 48K model in \"Machine\" -&gt; \"Select...\"<br/>Make sure that automatic loading of tape image files is enabled, by checking the corresponding options in \"Options\" -&gt; \"Media...\"<br/>Open the 10miglia.tap file, either by selecting it in \"File\"-&gt;\"Open...\" or by dragging and dropping it on the emulator window.</p>\n<p>To see the program listing, BREAK the program by pressing <shift> + <space bar=\"\">\u00a0 (<shift> is usually mapped to the <caps shift=\"\"> ZX Spectrum key).<br/>The \"L BREAK into program\" message will be displayed.\u00a0<br/>Then press the <k> key, followed by the <enter> key. Now you will see the first page of the program listing; to scroll to the next page, press any key except <space bar=\"\">.</space></enter></k></caps></shift></space></shift></p>\n<p>If your emulator of choice does not support automatic tape loading, after mounting the tape image you must manually issue the tape loading command, by pressing the <j> key, followed by <ctrl> + <p> twice (<ctrl> is usually mapped to the <symbol shift=\"\"> ZX Spectrum key) and then by <enter>.</enter></symbol></ctrl></p></ctrl></j></p>\n<p>If you are emulating a 128K ZX Spectrum model, to start loading simply select \"Tape Loader\" using the cursor keys in the main system menu and press <enter></enter></p>\n<p>A bonus artwork tape image file with the game logo (10Miglia_BonusArtwork.tap) is also included.\u00a0<br/>To prevent the \"OK\" message from breaking the image, use the following command to load and wait for a key press after loading: LOAD \"\" SCREEN$ : PAUSE 0</p>\n<p>Enjoy your drive!</p>\n<p>Marco</p>", "metacritic": null, "released": "2021-02-12", "tba": false, "updated": "2021-02-15T07:23:22", "background_image": "https://media.rawg.io/media/screenshots/eee/eee55bb6633154a628848877fd414be0.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 8, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Racing"], "publishers": [], "esrb_rating": null}