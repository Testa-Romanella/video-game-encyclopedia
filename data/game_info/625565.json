{"id": 625565, "slug": "mathsticks-10", "name": "Mathsticks 10", "name_original": "Mathsticks 10", "description": "<p>This game was written for ASCII Basic Game 10Liner competition 2021.<br/></p>\n<p>It's inspired by classic quiz games I remember from some newspapers and also just from several matchboxes.</p>\n\r\nAim of the game\r\n<p>Try to solve as many equations as possible, and as quickly as possible!<br/></p>\n<p>Find the right equation by moving one match from one place to another only.</p>\n<p>Signs of the equation cannot be changed, you can modify numbers only.</p>\n<p>You have to enter the first digit, followed by the second one and the result of the addition.</p>\n<p>When the correct answer is provided, you earn a point and progress to the next equation.</p>\n<p>Otherwise game ends. Then, you will see the number of points scored and how long have you played\u00a0in seconds. The highest score is the best one only if scored in the shortest time,\u00a0this is what all champions aim for!</p>\n\r\nNotes\r\n<p>When the program runs via emulation with autorun, randomisation doesn't work properly.\u00a0On each run, all numbers are returned in the same sequence without the user's interaction (explanation here).</p>\n<p>In order to avoid this behaviour, break the execution of the program on run\u00a0with ESC key, and type RUN followed by ENTER to start the game again. From now on,\u00a0the sequence will be randomised.</p>\r\nCoding challenges\r\n<p>What makes this challenge harder, was not only that a program has to fit in ten lines but also in the 72 characters per line limit. Because of that, I played with different ideas and\u00a0in the end, I created four versions including a different approach of locating matches on\u00a0the screen, numbers randomisation, and answer validation. This involved a lot of commands\u00a0swapping to squeeze them in a single line and finding some patterns after writing a portion\u00a0of code to make things clever. Or, just shorter, as I still think there is a way to make this\u00a0code more clever! There must be, right? It was some sort of a question about the infinity\u00a0of possible solutions against the finite amount of lines available.</p>\n<p>The simplest trick I used was to spread variable initialization by using READ and DATA.\u00a0Iteratively I needed to move things to different lines and see if it fits. Lots of swapping,\u00a0and saving of the character space like the one with the most common numbers occurring\u00a0in the game. \"10\" takes two places, but when assigned to a \"Z\" variable, it takes one!</p>\n<p>To save some character space I also defined a function for randomisation which saved just\u00a0a few characters, but a few I needed.</p>\n<p>Another idea to save some characters space was to define the graphical representation\u00a0of all matches not within DATA but with printing values as PETSCII characters on the screen.</p>\n<p>I used the same colour as the background to print them, so they are not visible but you can\u00a0find them on the very top of the screen. So, instead of using an array that needed to be\u00a0assigned from DATA values, PEEK was used to read data from the screen.</p>\n<p>As the space available is really small, code is not able to replace one match ahead before\u00a0drawing all matches on the screen. It might happen then, that during the rendering of the\u00a0equation, a match taken from one place cannot be moved to another. In such situations,\u00a0I added a fallback to re-shuffle an equation which will cause also a redraw of the screen.\u00a0Not a big deal, but I really had no free space to write some sort of a dry-run or provide\u00a0some fixed possibilities.</p>\n<p>One of the earlier versions had a naive approach of accepting an answer as a correct one\u00a0only when the first and the second digit were exactly the same as the numbers randomised by\u00a0the program. What could happen though is that when the program randomises that 2 + 3 = 5 and the player\u00a0provides 3 + 2 = 5, it would be treated as an incorrect answer?! Everyone knows that\u00a0addition is commutative, meaning that order does not matter. So the program needed to\u00a0behave the same way. But there was no free space left. 10 lines of code taken already!</p>\n<p>Moving a match with some pointer rather than providing values from the keyboard would be\u00a0a perfect solution. The program would only need to check then if the shapes of all matches are\u00a0referring to numbers, but again, there was no space left! Using INPUTs instead is just the shortest.</p>\n<p>It seemed that the project cannot be finished, but I knew there must be a way. And I found one by\u00a0having a eureka moment during some random walk. What I realized was that to solve this problem\u00a0I have to think about the BALANCE. When one match goes somewhere else, the balance is still there\u00a0so the program has to validate the player's input to see if the amount of matches is the same and that\u00a0the equation makes sense. Of course, under some circumstances, there is room for some other answers,\u00a0but it's rare. This way I saved a lot of space by re-using the same code which already renders matches\u00a0on the screen to add another dimension to it: to not render but count a number of matches provided from the player's equation.\u00a0This solution saved the project!</p>\n<p>In the end, I learned that when autostarting the game you'll get the exact same seed every time\u00a0the game runs. As the result, all equations were not random at all but followed the same sequence each time\u00a0the game ran! It's caused by no user interaction. I managed to fix it by\u00a0calling RND(-IT) but\u00a0in the case the game is executed with autorun via emulation,\u00a0this behaviour can be fixed by breaking the execution and running the program again.</p>\n\r\nLine by line explanation\r\n<ul><li>Line #0:<br/><br/> 0rEs,z,s$,m$,v:dEfnr(x)=int(rN(1)*x):pOv,5:pOv+1,6:x=rN(-ti):gO5:dA60,10<br/><br/>Length: 72<br/><br/>This line is executed only once. It starts from assigning values used for several calculations and screen displaying, defining a function for randomisation used for retrieving two digits for equation and also used for removing and adding a match stick. Before jumping to line 5, a trick to shuffle a randomisation seed is performed.</li></ul>\n<ul><li>Line #1:<br/><br/>1fori=0to6:t=fnr(8):u=pE(1024+c)aN2^i:y=-(u&gt;0):w=-(l=0aNy=1aNt&gt;4):m=m+y<br/><br/>Length: 71<br/><br/>A procedure to display a number from matches. Used also to count matches of a number (kept in variable M). Variable T contains the result from the randomisation and it's one of a component used\u00a0for determining\u00a0if a match should be added or removed from a number.\u00a0Variable W contains the flag if a\u00a0match should be removed from a number.</li></ul>\n<ul><li>Line #2:<br/><br/>2v=-(l=1aNy=0aNt&gt;4):l=l-(w+v&gt;0):on-(l&lt;3aN(v=1or(y=1aNw=0)))goS3:next:reT<br/><br/>Length: 72<br/><br/>Variable V contains the flag if a match should be added to a number. Variable L keeps the information if a match was already taken or added, it progresses up. In case a match should be displayed, GOSUB to line 3 is performed.</li></ul>\n<ul><li>Line #3:<br/><br/>3pO214,int(i/3)*4+o-int(o/z)*z:dA\"{clr}{blu}{CBM-Y}$]{CBM-Z}.{CBM-Q}{CBM-F}%{CBM-B}{CBM-P}\",\"{down}{left}B{down}{left}B{down}{left}BCCC\",53280<br/><br/>Length: 68<br/><br/>Render a match on the screen starts here.</li></ul>\n<ul><li>Line #4:<br/><br/>4pO211,4+o/z-(i=2ori=5)*4:sY58640:?\"{red}Q{orng}\"mI(m$,1-(i=0ori=3ori=6)*9,9):reT<br/><br/>Length: 72<br/><br/>Continuation of a match rendering.</li></ul>\n<ul><li>Line #5:<br/><br/>5?s$:l=0:m=0:o=4:a=fnr(9):b=fnr(9):c=a:goS1:o=68:i=0:goS3:i=1:o=86:goS3<br/><br/>Length: 71<br/><br/>Clear a screen and randomisation of both digits of the equation. Display the first digit followed by a plus sign.</li></ul>\n<ul><li>Line #6:<br/><br/>6o=114:c=b:goS1:o=177:i=0:goS3:o=179:goS3:d=a+b:c=d/z:o=224:on-(d&gt;9)goS1<br/><br/>Length: 72<br/><br/>Display the second digit followed by equal sign, then display tens of the\u00a0second digit (if any).</li></ul>\n<ul><li>Line #7:<br/><br/>7o=o-s*(d&gt;9):c=d+(d&gt;9)*z:goS1:on-(l&lt;2)gO5:l=3:x=ti:n=m:m=0:input\"{down}{down}{wht}a\";j<br/><br/>Length: 72<br/><br/>Display the rest of the result. Time is started to be measured from here on. Input for the first digit.</li></ul>\n<ul><li>Line #8:<br/><br/>8input\"b\";k:input\"=\";r:f=f+(ti-x)/s:c=j:goS1:c=k:goS1:c=r/z:e=r&gt;9:g=g+1<br/><br/>Length: 71<br/><br/>Input for the second digit and the result. All GOSUB 1 jumps are used to count the number of matches from the answer provided by a player.\u00a0Time taken to answer is added to the overall time kept in variable F. Points progress in variable G.</li></ul>\n<ul><li>Line #9:<br/><br/>9on-(e)goS1:c=r+(e)*z:goS1:on-(j+k=raNn=m)gO5:?a\"+\"b\"=\"d;g-1\"pts in\"f\"s\"<br/><br/>Length: 72<br/><br/>In case a match was not replaced, a fallback is used to re-shuffle the equation. In case the answer is correct, another equation will be shuffled (GOTO 5).\u00a0Otherwise, it's a game over. Display points scored and time taken. The program ends execution here as there are no following lines below.</li></ul>\n\n\r\nFrom author\r\n<p>Have good fun with other games submitted to the ASCII Basic Game 10Liner competition!</p>\n<p>Thanks to https://lvllvl.com/c64/ for great JS emulator embedding!</p>\n<p>Check out www.commocore.com for more games and open source projects!</p>\n<p><em>Bartosz \u017bo\u0142y\u0144ski</em></p>", "metacritic": null, "released": "2021-06-18", "tba": false, "updated": "2021-06-21T07:40:00", "background_image": "https://media.rawg.io/media/screenshots/a03/a031a7d03e374e5bce7fb46a11bf4da6.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 17, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Commocore"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}