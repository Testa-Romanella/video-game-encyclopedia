{"id": 583848, "slug": "kaboomer-by-dagershman", "name": "Kaboomer by dagershman", "name_original": "Kaboomer by dagershman", "description": "<p>======================================================================</p>\n<p>Ka-Boomer</p>\n<p>\u00a0 2021 BASIC 10 Liner Submission</p>\n<p>\u00a0 By David A. Gershman - @dagershman</p>\n<p>======================================================================</p>\n<p>Ka-Boomer is a game which pays homeage to the 'ol Atari 2600 game</p>\n<p>\"KaBoom!\".\u00a0 The name variation, \"Boomer\", is proof this version was</p>\n<p>written by an \"older\" person. :)</p>\n<p>======================================================================</p>\n<p>Submission Contents</p>\n<p>======================================================================</p>\n<p>kaboomer.txt\u00a0 \u00a0 : This info file.</p>\n<p>kaboomer.d64\u00a0 \u00a0 : Commodore d64 disk image for use with emulator.</p>\n<p>kaboomer_sample_play.gif</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : Animated .gif of a sample game load and play</p>\n<p>typed_code_with_abbreviations.png</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : Screenshot of the typed program showing 80chars/line</p>\n<p> \u00a0 max. (Note: Line 1 has a typo of '[' instead of ':'</p>\n<p> \u00a0 thanks to fat fingers on a Mac keyboard.\u00a0 The char</p>\n<p> \u00a0 is inside a string so does not affect game play.</p>\n<p> \u00a0 D64 image contains a corrected version of the</p>\n<p> \u00a0 program.</p>\n\n<p>======================================================================</p>\n<p>Play Instructions</p>\n<p>======================================================================</p>\n<p>** Play Options **</p>\n<p>Upon executing the program, the user is prompted for the \"Time</p>\n<p>Limit\".\u00a0 This is the amount of seconds the user wishes to play.\u00a0 30</p>\n<p>seconds is a good value for first-time players.</p>\n<p>The next prompt is the \"Sparcity\" of bombs ranging from .1 to .9.\u00a0 .1</p>\n<p>is hardly any bombs and .9 is a bomb on virtually every line.</p>\n<p>Once these values are entered, your \"bucket\" is put at the top of the</p>\n<p>screen and play begins.\u00a0 Bombs start flowing up to your bucket which</p>\n<p>you need to catch.\u00a0 Time does not start counting down until the screen</p>\n<p>starts actually scrolling.</p>\n<p>The object is to \"catch\" as many bombs as you can within the time</p>\n<p>limit you provided.</p>\n\n<p>** Bucket Movement **</p>\n<p>The bucket can be moved by using numbers 1-6 with 1 being all the way</p>\n<p>on the left and 6 being all the way on the right.</p>\n<p>Alternatively, the user may use the joystick in port 2 to move the</p>\n<p>bucket left or right.</p>\n<p>The difference is the joystick moves the bucket in increments of 1</p>\n<p>while the numbers put the bucket directly in a specific position.</p>\n<p>Both methods may be used during game play.</p>\n\n<p>** Game Completion **</p>\n<p>After time is up, the screen clears except for the last line and you</p>\n<p>are presented with the number of bombs you caught out of the total</p>\n<p>number of bombs displayed.\u00a0 Finally, you are prompted to play again or</p>\n<p>not.</p>\n<p>======================================================================</p>\n<p>Program Listing</p>\n<p>======================================================================</p>\r\n\r\n0 a$=chr$(13):print\"{clr}{white}\"spc(15)\"ka-boomer\"a$a$\"time limit(sec)  :\";:inputtl:print\"spars\";\r\n1 print\"ity (.1-.9):\";:inputf:p(0)=8:fori=1to6:p(i)=p(i-1)+24:next:y=56320:b=53248:z=0\r\n2 fori=3072to3077:readx:pokei,x:next:fori=3078to3135:pokei,0:next:pokeb+39,1:poke2040,48\r\n3 pokeb,p(1):pokeb+1,50:pokeb+21,1:j(4)=-1:j(8)=1:restore:print\"{clr}{down}\":pokeb+32,z:pokeb+33,z:g=0:i=1\r\n4 j=(127-peek(y))and12:i=i+j(j):i=-(i&gt;=1andi&lt;=6)*i+-(i&gt;6)*6+-(i&lt;1):getn:ifntheni=n\r\n5 pokeb,p(i):print\"{white}{CBM-B}{red}\";:x=int(rnd(ti)*18):ifpeek(214)&lt;23thenti$=\"000000\"\r\n6 printspc(x+1);:if(rnd(0)&lt;f)thenprint\"{left}!\";:s=s+1\r\n7 printspc(17-x);:t=tl-int(ti/60):g=g-(peek(b+31)&gt;0):print\"{white}{RVSON}{CBM-B}{RVSOFF}{cyan} t:\"t\" pts:\"g:ift&gt;0then4\r\n8 fori=1to22:print:nexti:print\"{white}final score: \"g\"/\"s:pokeb+21,0:print\"play again [y/n]?\";\r\n9 poke198,0:wait198,1:geta$:ifa$=\"y\"thenclr:goto0:data127,255,254,255,0,255\r\n<p>======================================================================</p>\n<p>Program Explanation</p>\n<p>======================================================================</p>\n<p>************</p>\n<p>** Line 0 **</p>\n<p>************</p>\n<p>a$=chr$(13)</p>\n<p>\u00a0 Typing this program in Linux and using VICE's /petcat/ tool allows</p>\n<p>\u00a0 the use of certain terms, such as \"{return}\" to include carriage</p>\n<p>\u00a0 returns in strings.\u00a0 However, when typing the program in the</p>\n<p>\u00a0 emulator, there is no way to insert a carriage return in a string.</p>\n<p>\u00a0 Instead I had to assign chr$(13) to a variable and then use the</p>\n<p>\u00a0 variable in the string later.</p>\n<p>\u00a0\u00a0</p>\n<p>print\"{clr}{white}\"spc(15)\"ka-boomer\"a$a$\"time limit(sec)\u00a0 :\";</p>\n<p>\u00a0 Display the centered title and prompt the user for the time limit.</p>\n<p>\u00a0\u00a0</p>\n<p>inputtl</p>\n<p>\u00a0 Read in the time limit.</p>\n<p>print\"spars\";</p>\n<p>\u00a0 Maximizing character usage per line sometimes requires breaking up</p>\n<p>\u00a0 strings into pieces on different lines. This is the first part of</p>\n<p>\u00a0 the \"Sparsity:...\" prompt.</p>\n<p>************</p>\n<p>** Line 1 **</p>\n<p>************</p>\n<p>print\"ity (.1-.9):\";</p>\n<p>\u00a0 Finish printing the \"Sparsity...\" prompt</p>\n<p>inputf</p>\n<p>\u00a0 Read in the sparsity factor.</p>\n<p>p(0)=8</p>\n<p>\u00a0 The p-array holds the bucket sprite's possible x-positions. I only</p>\n<p>\u00a0 use positions 1-6 but initialize 0 to 8 in preparation of the next</p>\n<p>\u00a0 'for' loop.\u00a0 In retrospect, I would need this if I initialize p(1)</p>\n<p>\u00a0 and loop from 2 to 6 in the next part.</p>\n<p>fori=1to6:p(i)=p(i-1)+24:next</p>\n<p>\u00a0 Initialize the p-array to the bucket sprite's possible x-positions.</p>\n<p>\u00a0 Later, I'll manipulate a variable which will be the index for the</p>\n<p>\u00a0 array to position the bucket.</p>\n<p>y=56320:b=53248:z=0</p>\n<p>\u00a0 Prep for fewer chars later by setting some variables.\u00a0 'y' is the</p>\n<p>\u00a0 register for Joystick Port #2, 'b' is the start of the Spring VICII</p>\n<p>\u00a0 addresses, and 'z' *was* used for screen/background colors. However,</p>\n<p>\u00a0 I decided to keep both black and thus don't need 'z' either. :(</p>\n<p>\u00a0 (Amazing what you find when you make this writeup at 11:30pm.)</p>\n<p>************</p>\n<p>** Line 2 **</p>\n<p>************</p>\n<p>fori=3072to3077:readx:pokei,x:next</p>\n<p>\u00a0 Load first 6 bytes of sprite #0 to \"draw\" the bucket.</p>\n<p>fori=3078to3135:pokei,0:next</p>\n<p>\u00a0 Clear the rest of the sprite leaving just the bucket.</p>\n<p>pokeb+39,1</p>\n<p>\u00a0 Set sprite #0's color to white.</p>\n<p>poke2040,48</p>\n<p>\u00a0 Set sprite #0's pointer to the data.</p>\n<p>************</p>\n<p>** Line 3 **</p>\n<p>************</p>\n<p>pokeb,p(1)</p>\n<p>\u00a0 Set sprite #0's x-coord to the left most position.</p>\n<p>pokeb+1,50</p>\n<p>\u00a0 Set sprite #0's y-coord.</p>\n<p>pokeb+21,1</p>\n<p>\u00a0 Turn on sprite #0.</p>\n<p>j(4)=-1:j(8)=1</p>\n<p>\u00a0 The joystick register will clear bit *values* 4 and 8 depending on</p>\n<p>\u00a0 if pushed left or right, respectively.\u00a0 This sets the j-array</p>\n<p>\u00a0 positions 4 and 8 to the increment adjustment values for the p-array</p>\n<p>\u00a0 when setting the buckets new x-position.</p>\n<p>restore</p>\n<p>\u00a0 This line had space to reset the data in case the user will want to</p>\n<p>\u00a0 play again on the same execution.</p>\n<p>print\"{clr}{down}\"</p>\n<p>\u00a0 Clear the screen in preparation for game play and move the cursor</p>\n<p>\u00a0 down so the first bomb won't count as a collision (giving a point)</p>\n<p>\u00a0 right away.</p>\n<p>pokeb+32,z:pokeb+33,z</p>\n<p>\u00a0 Set the border/background colors to black.\u00a0 Since I don't change</p>\n<p>\u00a0 either during game play, this is why the 'z' variable is not needed</p>\n<p>\u00a0 and I could have just hard coded 0 (or even period).</p>\n<p>g=0</p>\n<p>\u00a0 Initialize 'g' to 0 which will accumulate the number of bombs</p>\n<p>\u00a0 \"caught\".</p>\n<p>\u00a0\u00a0</p>\n<p>i=1</p>\n<p>\u00a0 Initialize 'i' to 1 which will be used to index the p-array (the</p>\n<p>\u00a0 bucket position 1-6).</p>\n<p>************</p>\n<p>** Line 4 **</p>\n<p>************</p>\n<p>j=(127-peek(y))and12</p>\n<p>\u00a0 \"peek(y)\" is the current value of the Joystick #2 register.</p>\n<p>\u00a0 Unfortunately, that registers is 127 by default (0111111) and</p>\n<p>\u00a0 *clears* the bits when the joystick is moved in a direction.\u00a0 For</p>\n<p>\u00a0 example, left would result in 0111011.\u00a0 Substracting from 127,</p>\n<p>\u00a0 \"flips the bits\" to 1000100.\u00a0 ANDing with 12, masks out only the</p>\n<p>\u00a0 bits for left and right movement.\u00a0 Thus 'j' is set to 4 if the</p>\n<p>\u00a0 joystick is pressed left, or 8 if the joystick is pressed right.\u00a0 If</p>\n<p>\u00a0 the joystick is not touched, the result in 0.</p>\n<p>i=i+j(j)</p>\n<p>\u00a0 Update the index for the p-array by the amount of the increment</p>\n<p>\u00a0 pointed to by the Joystick movement.\u00a0 If 4 (left), j(4) is -1, so</p>\n<p>\u00a0 the index variable 'i' is \"moved left\".\u00a0 If 8 (right), j(8) is 1, so</p>\n<p>\u00a0 the index variable 'i' is \"moved right\".\u00a0 If the joystick is not</p>\n<p>\u00a0 touched, 'j' will be 0 and j(0) is 0, so 'i' won't be changed.</p>\n<p>i=-(i&gt;=1andi&lt;=6)*i+-(i&gt;6)*6+-(i&lt;1)</p>\n<p>\u00a0 Adjusts the index variable, if necessary, to the p-array to ensure</p>\n<p>\u00a0 its value stays between 1 and 6.</p>\n<p>getn</p>\n<p>\u00a0 Check to see if a number was pressed.</p>\n<p>ifntheni=n</p>\n<p>\u00a0 If so, then the index variable gets set to that.\u00a0 Thus, the keyboard</p>\n<p>\u00a0 numbers get priority over the joystick, BUT does still allow either</p>\n<p>\u00a0 methods for game play.</p>\n<p>************</p>\n<p>** Line 5 **</p>\n<p>************</p>\n<p>pokeb,p(i)</p>\n<p>\u00a0 Once the appropriate x-position (index value) is determined, set</p>\n<p>\u00a0 sprite #0's new position.</p>\n<p>print\"{white}{CBM-B}{red}\";</p>\n<p>\u00a0 Print the left border wall and set color for the bomb.</p>\n<p>x=int(rnd(ti)*18)</p>\n<p>\u00a0 Compute random position on the line for the bomb.</p>\n<p>ifpeek(214)&lt;23thenti$=\"000000\"</p>\n<p>\u00a0 Keep the clock at 0 until the screen is full of bombs and they start</p>\n<p>\u00a0 to actually scroll.</p>\n<p>************</p>\n<p>** Line 6 **</p>\n<p>************</p>\n<p>printspc(x+1);</p>\n<p>\u00a0 Space over to where the bomb MAY go.\u00a0 For now, print a space as if</p>\n<p>\u00a0 the bomb WON'T be placed.</p>\n<p>if(rnd(0)&lt;f)thenprint\"{left}!\";</p>\n<p>\u00a0 Get a random number between 0 and 1 and if it is less than the</p>\n<p>\u00a0 factor the user requested, then move back 1 position and print the</p>\n<p>\u00a0 bomb.\u00a0 Else, the bomb is skipped.</p>\n<p>s=s+1</p>\n<p>\u00a0 Remember, BASICv2 does *not* have an 'else'.\u00a0 So this portion is</p>\n<p>\u00a0 only performed if the bomb was printed.\u00a0 So this variable, s, will</p>\n<p>\u00a0 track the total number of bombs displayed so when the score is shown</p>\n<p>\u00a0 at the end, we know how many total bombs were displayed.</p>\n<p>************</p>\n<p>** Line 7 **</p>\n<p>************</p>\n<p>printspc(17-x);</p>\n<p>\u00a0 Finish printing the spaces of the line holding the (possible) bomb.</p>\n<p>t=tl-int(ti/60)</p>\n<p>\u00a0 Compute the remaining time of the game.</p>\n<p>g=g-(peek(b+31)&gt;0)</p>\n<p>\u00a0 Increment player's score if the bucket sprite #0 collided with the</p>\n<p>\u00a0 background (i.e. a bomb).</p>\n<p>print\"{white}{RVSON}{CBM-B}{RVSOFF}{cyan} t:\"t\" pts:\"g</p>\n<p>\u00a0 Display the right wall, time remaining, and current points.</p>\n<p>ift&gt;0then4</p>\n<p>\u00a0 If there's still time in the game, go back and check the</p>\n<p>\u00a0 joystick/keyboard again.</p>\n<p>************</p>\n<p>** Line 8 **</p>\n<p>************</p>\n<p>fori=1to22:print:nexti</p>\n<p>\u00a0 Scroll the game up to clear the screen except the last line.</p>\n<p>\u00a0 Another retrospect...don't need 'i' in \"next i\". :(</p>\n<p>print\"{white}final score: \"g\"/\"s</p>\n<p>\u00a0 Display the final score out of the total number of bombs.</p>\n<p>pokeb+21,0</p>\n<p>\u00a0 Turn off bucket sprite #0</p>\n<p>print\"play again [y/n]?\";</p>\n<p>\u00a0 Prompt the user if they want to play again.</p>\n<p>************</p>\n<p>** Line 9 **</p>\n<p>************</p>\n<p>poke198,0:wait198,1</p>\n<p>\u00a0 Clear the keyboard buffer and wait for an answer to the \"Play again\"</p>\n<p>\u00a0 question.</p>\n<p>geta$:ifa$=\"y\"thenclr:goto0</p>\n<p>\u00a0 Get the answer and if 'y', then go play again.\u00a0 Final</p>\n<p>\u00a0 retrospect...\"clr\" is left over from when I had a dim'd array at the</p>\n<p>\u00a0 beginning.\u00a0 Without 'clr', I'd get a \"redim\" error when the user</p>\n<p>\u00a0 wanted to play again.\u00a0 I ended up removing the dim'd array but</p>\n<p>\u00a0 forgot to remove 'clr'.\u00a0 This line could have been shorter. :(</p>\n<p>data127,255,254,255,0,255</p>\n<p>\u00a0 Data for bucket sprite.</p>", "metacritic": null, "released": "2021-04-06", "tba": false, "updated": "2021-04-13T01:08:17", "background_image": "https://media.rawg.io/media/screenshots/1f8/1f8cd28ad29c551a6049cb3198750346.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 21, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}