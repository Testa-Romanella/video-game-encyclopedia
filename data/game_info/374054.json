{"id": 374054, "slug": "assignment3", "name": "Assignment3", "name_original": "Assignment3", "description": "<p>I think the purpose of this assignment is to make our game engine more flexible. Since the game engine accepted only one buffer with one shader, we could only create monochrome game before, but now we can create colorful game!! And also, this change makes users easier to use. However, to be honest, I still don\u2019t understand why we have to make graphics.cpp identical. There are some functions that require for graphics in DirectX which doesn\u2019t exist in OpenGL, and, in order to make it identical, I need to put some of the function to an additional class which make me hard to track down which functions are in which.\r\n  </p>\n<p>Aside from that, the trouble I also encountered the bug was not always get reproduced. When it happened, the program sometime works without any problem, sometime the program gives you error before it draws, sometime it gives error when you close the window. The only things I did was move some of the static functions to member functions or other way around. Later, I just rewrote the code from the point where doesn\u2019t have problem, and everything works.   </p>\n<p>\u00a0\r\n  </p>\n<p>In order to make Graphics.cpp independent to platform, I take out the functions which both DirectX and OpenGL have, such as clear buffer and swap buffer to GraphicPlatformDependent class, and move the functions that only exist in one platform to GraphicsPlatformDepenedent as well, but for those functions, I place under a specific namespace such as namespace DirectX so that when you see Grahics.cpp you will realize that the line of code is for DirectX.\r\n  </p>\n<p>The code user needs to specify in cEffect is the paths for vertex shader and fragment shader.\r\n  </p>\n<p>The amount of memory a single effect can take up is 12(sizeof(s_vertexShader) + sizeof(s_fragmentShader) + sizeof(s_renderState)) + size of string for the paths for fragment shader + vertex shader in DirectX, 16(sizeof(s_vertexShader) + sizeof(s_fragmentShader) + sizeof(s_renderState) + sizeof(s_programId) ) + size of string for the paths for fragment shader + vertex shader in OpenGL. I don\u2019t know the way to make this smaller anymore.\r\n  </p>\n<p>The data a user needs to specify is vertex data and which vertex to make a triangle.\r\n  </p>\n<p>The data of my object geometry is 40 for OpenGL, and 44 for DirectX. There are some redundant variables in my class, so yes I can make it smaller by deleting those variables.\r\n</p>", "metacritic": null, "released": "2019-09-12", "tba": false, "updated": "2019-09-13T06:41:04", "background_image": "https://media.rawg.io/media/screenshots/84b/84b072024da61b9643e5ec3282d06cc0.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 1, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["dropanddrop"], "genres": [], "publishers": [], "esrb_rating": null}