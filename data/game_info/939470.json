{"id": 939470, "slug": "jumpman-atari-8-bit-by-eric-carr", "name": "Jumpman (Atari 8-Bit) by Eric Carr", "name_original": "Jumpman (Atari 8-Bit) by Eric Carr", "description": "<p>Jumpman - BASIC 10Liner Contest 2023</p>\n<p>====================================</p>\n<p>Author:\u00a0 \u00a0Eric Carr</p>\n<p>Language: FastBasic 4.6</p>\n<p>Platform: Atari 8-bit (tested on 130XE NTSC)</p>\n<p>Category: EXTREM-256</p>\n<p>Video:\u00a0 \u00a0 </p>\n\n<p>Requirements:</p>\n<p>System: Atari 8-bit w/ 48KB+ memory (800, xe, etc) w/ Joystick</p>\n<p>Emulator: Atari800MacX (on Mac) or Altirra (Windows)</p>\n<p>***</p>\n<p>NTSC / PAL NOTE: This game was designed on NTSC. All SOURCE/LISTING/SCREENSHOT is</p>\n<p>for the NTSC version, which is to be considered for the 10 Liner contest.</p>\n<p>As an EXTRA, I did include PAL executables, which is nearly the same code with colors</p>\n<p>that look better in a PAL emulator. The game runs much faster on PAL and so is</p>\n<p>more challenging to play than the NTSC.</p>\n<p>***</p>\n\n<p>How to play</p>\n<p>===========</p>\n<p>This is a randomly generated endless scroller where Jumpman runs</p>\n<p>automatically and you control his jumping.</p>\n<p>Go as far as you can to make the highest score!</p>\n<p>Every 200 points, level changes and it gets harder!</p>\n<p>1. Only the joystick button is used.</p>\n<p>2. Press the button to jump. Hold the button to jump higher.</p>\n<p>3. Jumpman runs automatically.</p>\n<p>4. The game ends if you fall off the screen.</p>\n\n<p>Listing the Source</p>\n<p>==================</p>\n<p>To LIST the source:</p>\n<p>1. Boot Jumpman.ATR disk</p>\n<p>2. Type \"FB\" and press [Enter]</p>\n<p>3. It will load the FastBasic IDE and show the listing</p>\n\n<p>Compiling the Source</p>\n<p>====================</p>\n<p>1. Jumpman-source.BAS is in Atascii format so it will look strange if you\u00a0</p>\n<p>\u00a0 \u00a0view it on PC/Mac outside of a hex editor.</p>\n<p>2. You can compile it directly to XEX using the FastBasic cross compiler</p>\n<p>\u00a0 \u00a0on PC/Mac (e.g. \"fastbasic Jumpman-source.BAS\").</p>\n\n<p>Background</p>\n<p>==========</p>\n<p>This is my first 10-liner entry and an homage to Mario (originally</p>\n<p>known as Jumpman).\u00a0 The melodies/sounds are based on Super Mario Bros.</p>\n<p>Inspiration began when I was testing fine scrolling in Atari Basic and</p>\n<p>decided to try a simple Mario Run style game. It quickly became too</p>\n<p>slow for fine pixel scrolling, so I went with a 40x12 multicolor\u00a0</p>\n<p>character mode that lets me scroll coarsely by 4 pixels (1 char width)</p>\n<p>using FastBasic's move command to quickly move memory contents. This</p>\n<p>replaces using strings to move memory in the built-in Atari BASIC.</p>\n<p>I looked at world block sprites from Super Mario 1 (which</p>\n<p>are 16x16 pixels) and made similar tiles by hand as 12x12</p>\n<p>(rendered as 6 4x8 chars). This let me fit more blocks on the screen</p>\n<p>horizontally, but the tall vertical height meant less chars to render</p>\n<p>and scroll (better for speed).</p>\n<p>For the Jumpman character, SprEd Library already had a Mario animation,</p>\n<p>which was very helpful in understanding how the 3rd color works for Atari</p>\n<p>PMG. I modified it slightly and added a jump frame.</p>\n<p>Atari normally has space above and below the playfield, so to achieve</p>\n<p>ground at the true bottom of the screen similar to Super Mario, I used</p>\n<p>a Display List to add extra blank space between the top score rows and</p>\n<p>the rest of the playfield.</p>\n<p>FastBasic's IDE supports only 255 characters per line, so I used the</p>\n<p>FastBasic cross compiler on my pc to compile a source file with 256</p>\n<p>characters/line. The source file is still formatted for the Atari</p>\n<p>platform (Atascii) and can be LISTed on the machine/emulator via TYPE</p>\n<p>or in the FB IDE.</p>\n<p>Part of the challenge would be getting the data (playfield, PMG sprites,</p>\n<p>music, level setup) as small as possible to allow enough room for the game</p>\n<p>logic and some sound. I experimented with hex, base64, dictionary and RLE</p>\n<p>compression and finally settled on RLE in raw strings, replacing \"new line\"</p>\n<p>and quotes with unused substitute characters. I also used a contiguous unused\u00a0</p>\n<p>set of byte values so RLE could be done with 2 characters. For instance,</p>\n<p>bytes 175-185 would support RLE runs of 3 to 13 chars. So, {175}{65} means</p>\n<p>three {65} chars. {176}{65} means four {65} chars and so on.\u00a0</p>\n<p>For the world generation, I settled on creating a few different \"sections\"</p>\n<p>of blocks, and every 6 frames I randomly pick a new section to render</p>\n<p>off-screen, which is then scrolled into view, at different Y locations.</p>\n<p>Certain sections (anything but a pipe) can repeat a random duration.</p>\n<p>I originally made custom 0-9 numbers, but that took too much extra space</p>\n<p>so I ended up copying alpha/numeric from the atari rom and displaying on</p>\n<p>the top two lines as a single color text mode using the Display List.</p>\n<p>While the frame rate isn't as smooth as I'd like, I'm happy with the result</p>\n<p>and learned some optimization lessons by taking up the 10 liner challenge.</p>\n<p>This went through a repeated process of \"It's as small as I can make it!\" to</p>\n<p>looking at it a day later and squeezing out 20 more characters and adding small</p>\n<p>things. It originally had just a single set of colors and music. Aligning the</p>\n<p>line endings as close to 256 chars meant shuffling things around every time</p>\n<p>I made a change.</p>\n<p>I've included the un-minified source code, with longer variable names and</p>\n<p>comments to breaks down the logic and my thought process. It is be a mix</p>\n<p>of full statements (IF..THEN..ELSE..END) and minified (I. T. EL. E.) but</p>\n<p>have comments for nearly every line.</p>\n\n<p>Tools Used</p>\n<p>==========</p>\n<p>- FastBasic 4.6 Cross Compiler - Compile BASIC to XEX</p>\n<p>\u00a0 https://github.com/dmsc/fastbasic/releases/tag/v4.6</p>\n<p>- Visual Studio Code - Editing the file</p>\n<p>\u00a0 https://code.visualstudio.com/download</p>\n<p>- Atari FontMaker - Defining chars as block sprites</p>\n<p>\u00a0 http://matosimi.websupport.sk/atari/atari-fontmaker/</p>\n<p>- SprEd - Player Missle Graphics Sprite editor</p>\n<p>\u00a0 https://bocianu.gitlab.io/spred</p>\n<p>- Atari800MacX and Altirra - Emulators</p>", "metacritic": null, "released": "2023-03-06", "tba": false, "updated": "2023-03-10T18:53:56", "background_image": "https://media.rawg.io/media/screenshots/119/119d0b5a5cc70b438a2650037860c287.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 6, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}