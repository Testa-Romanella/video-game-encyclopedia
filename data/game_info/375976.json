{"id": 375976, "slug": "assignment4", "name": "Assignment4", "name_original": "Assignment4", "description": "<p>The reason why we have to submit things to a single frame is because we don\u2019t want to have flickering screen. If we only have one buffer and thread for a drawing screen, the screen will be flickering while we are sending our data.\r\n  </p>\n<p>The size of each class eventually become like this\u2026.\r\n  </p>\n<p>\u00a0\r\n  </p>\n<p>OpenGL \u00a0\u00a0s3dobjectgeometry -&gt; 28\r\n  </p>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shader\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-&gt; 32\r\n  </p>\n<p>DirectX -&gt; s3dobjectgeometry -&gt; 48\r\n  </p>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shader\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-&gt; 40\r\n  </p>\n<p>\u00a0\r\n  </p>\n<p>I made the variables of tracking number of vertices and triangle\u2019s count from integer class to unsigned short class which made -4 byte space for OpenGL. The moment I\u2019m writing this write-up, I just realize those tracking number variables are not necessary to keep inside s3Objectgeometry class (but I think I\u2019m too lazy to change the structure right now).\r\n  </p>\n<p>For the shader class, I change the variables for the pass for the shaders from std::string to char const * class which size down the whole size from 80 to 32 in OpenGL\r\n  </p>\n<p>\u00a0\r\n  </p>\n<p>In term of the memory budget for the render frames, I made the structure for storing objectgemetry and effect as vectors, so it is hard to say exactly how much memory it takes. Since the data I restore in the vectors are pointers, I would say I limited it for 100 elements which will end up the total budged in 32bits to be   </p>\n<p>2 * (28 + 32) * 100 + 32*4 + 144 = 12272 byte\r\n  </p>\n<p>(2 buffers) * (size of objectgeometry and shader) * (number of elements) + (size of background color) + (size of frame class)\r\n  </p>\n<p>Also, because the way I store date is by pointer, this doesn\u2019t include the actual data storage for the coordination and so on.\r\n  </p>\n<p>\u00a0\r\n  </p>\n<p>For the control\r\n  </p>\n<p>Space -&gt; change background color\r\n  </p>\n<p>Enter -&gt; change the geometry showing up on screen\r\n  </p>\n<p>Esc\u00a0\u00a0\u00a0 -&gt; Exit the game\r\n</p>", "metacritic": null, "released": "2019-09-16", "tba": false, "updated": "2019-09-20T07:20:47", "background_image": "https://media.rawg.io/media/screenshots/243/24396be029cb1310cf65756430f161fd.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 4, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["dropanddrop"], "genres": [], "publishers": [], "esrb_rating": null}