{"id": 566941, "slug": "the-typing-of-the-spec-by-marcos-retrobits", "name": "The Typing Of The Spec by Marco's Retrobits", "name_original": "The Typing Of The Spec by Marco's Retrobits", "description": "<p>The Typing of the Spec</p>\n<p>BASIC 10 Liner videogame for the Sinclair ZX Spectrum<br/>Play online link: https://retrobits.itch.io/typingspec</p>\n<p>by Marco Varesio (Marco's Retrobits): https://retrobits.itch.io<br/>English language blog: https://retrobits.altervista.org<br/>Italian language blog: https://somebitsofme.altervista.org<br/>YouTube channel: https://www.youtube.com/channel/UCWTxG8paNsOUEU5mPcNklXA</p>\n<p>The Typing of the Spec is an edutainment videogame for the Sinclair ZX Spectrum home computer.\u00a0<br/>The goal is to quickly type the words as they are displayed on the screen, before the time runs out.\u00a0<br/>On successful typing of a word, the remaining time is added to current score.\u00a0<br/>The player loses a life whenever he types a wrong character or the time runs out.</p>\n<p>The Typing of the Spec is my third entry to the 2021 edition of the BASIC 10Liner Contest, PUR-80 category.</p>\n<p>Game description</p>\n<p>When the program starts, it prompts you about the desired level of difficulty, by asking you to input a value between 1 (easiest) and 5 (hardest).\u00a0<br/>This value, together with the length of each word, affects the available time you have to type.<br/>After difficulty selection, the game begins.\u00a0<br/>The top line displays your current score S, the high score H and the remaining lives L. You start with 5 lives.\u00a0<br/>Below the high score, you will see the countdown timer. The word to type is displayed below, in yellow.<br/>As long as you type some characters, they will be displayed under the requested word.\u00a0<br/>The game is case insensitive, so you can type lower case letters; they will be displayed upper case.</p>\n<p>A bright beep and the green border will indicate that you have correctly typed the requested word.\u00a0<br/>In this case, the remaining time will be multiplied by 10 and added to your score.\u00a0<br/>If your score is better than the highest score, it will be displayed in cyan.\u00a0<br/>Then, the game will continue with another random word.</p>\n<p>Otherwise, if either the time runs out or you type a wrong character, the system beeps a sad tone and the border colour becomes red.<br/>In this case you will lose a life and then the game will continue with another random word.<br/>When you run out of lives, a new game will automatically start.</p>\n<p>The game requires some precision when pressing the keys, since a short tap will not be recorded by the system. On the contrary, if you hold the key for too much time, multiple keystrokes will be recorded. With a bit of practice, you will find the correct timing.<br/>For a full retro experience, it is recommended to play on a real rubber keyboard Speccy :)</p>\n<p>Program description</p>\n<p>The program randomly choses the word to type among the BASIC keywords, which actually are characters whose codes range from 165 to 255, so there is no need to store a words database.\u00a0<br/>In order to obtain a string that can be compared to the user input, the keyword character is first invisibly printed on the screen.\u00a0<br/>Then the characters composing the keyword are read back into a string, character by character, using the SCREEN$ function.\u00a0<br/>I'm sure there is a better way to convert the keyword to a string, maybe calling the tokenization routines in the ZX Spectrum ROM, but this method just works.<br/>The 2 least significant bytes of the FRAMES counter system variable are used for the countdown.</p>\n<p>Variables</p>\n<p>L : Lives left<br/>S : Score\u00a0<br/>H : High score<br/>D : Difficulty level (1..5)<br/>E : Difficulty coefficient, used to calculate the available time, based on the difficulty level D<br/>M : Initial available time (in frames, i.e. 1/50 sec.), calculated using E and A<br/>T : Time left (in frames, i.e. 1/50 sec.), initialized to M and decremented at each game loop<br/>T$: String representation of time left\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>C : Random character code of the (key)word to type\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>C$: Temporary character variable, used to read back the word from the screen to the string A<br/>A$: String corresponding to the (key)word to type\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>A : Length of the word A$\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>R : Row offset based on A; used to horizontally center the word when printing it\u00a0<br/>I : Loop iterator\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br/>B$: String made up of blank (space) characters, used to clear portions of the screen\u00a0<br/>K : Temporary character code associated to the key pressed by the player\u00a0<br/>K$: String input by the player\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p>\r\n\r\nProgram listing\r\n1 LET H=0:LET B$=\"           \":POKE 23674,0:INPUT \"LEVEL (1-5): \";D:LET E=.25*(5-D):GO TO 1+(D&gt;0)*(D&lt;6)\r\n2 RANDOMIZE:LET L=4:LET S=0:BORDER 0:PAPER 0:INK 7:CLS:PRINT \"S:0\";B$;\"H:\";H;AT 0,29;\"L:\";L\r\n3 PRINT AT 0,31;L:BORDER 0:INK 0:LET A$=\"\":LET K$=\"\":LET C=165+INT(RND*91):GO TO 4-(C&gt;198 AND C&lt;202)\r\n4 PRINT AT 6,10;B$;AT 7,10;B$;AT 21,0;CHR$ C;B$:FOR I=0TO9:LET C$=SCREEN$(21,I):IF C$&lt;&gt;\" \" THEN LET A$=A$+C$:LET A=LEN A$\r\n5 NEXT I:INK 6:LET R=11+(9-A)/2:PRINT AT 6,R;A$:POKE 23672,0:POKE 23673,0:LET M=50*(E+1.4/A+A/4):INK 7\r\n6 LET T=INT((M-PEEK 23672-256*PEEK (23673))/5)/10:LET T$=STR$(T*(T&gt;0)):PRINT AT 2,14;T$;:IF LEN T$=1 THEN PRINT \".0\"\r\n7 IF T&lt;=0 OR A$(TO LEN K$)&lt;&gt;K$ THEN BORDER 2:LET L=L-1:BEEP .5,-23:LET H=(S&gt;H)*S+(H&gt;=S)*H:GO TO 3*(L&gt;=0)+2*(L&lt;0)\r\n8 LET K=CODE INKEY$:IF K&gt;0 THEN LET K=K-32*(K&gt;96)*(K&lt;123):LET K$=K$+CHR$ K:PRINT AT 7,R;K$:BEEP 0.009,0\r\n9 IF A$=K$ THEN BORDER 4:BEEP .02,23:LET S=S+T*10:INK 7-2*(S&gt;H):PRINT AT 0,2;S:INK 7:GO TO 3\r\n10 GO TO 6: REM *** Marco's Retrobits 2021 https://retrobits.itch.io ***\r\n<p>Source code explained</p>\n<p>Line 1<br/>1 LET H=0:LET B$=\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\":POKE 23674,0:INPUT \"LEVEL (1-5): \";D:LET E=.25*(5-D):GO TO 1+(D&gt;0)*(D&lt;6)<br/>Line 1 is executed only once when the program starts.<br/>Set high score H to 0; reset most significant byte of the FRAMES counter (address 23674); prompt the user for the desired difficulty level D and initialize the difficulty coefficient E accordingly.\u00a0<br/>If the input value is not in the expected range (1..5) go back to line 1; otherwise continue to line 2.</p>\n<p>Line 2<br/>2 RANDOMIZE:LET L=4:LET S=0:BORDER 0:PAPER 0:INK 7:CLS:PRINT \"S:0\";B$;\"H:\";H;AT 0,29;\"L:\";L<br/>Line 2 is executed whenever a new game starts.<br/>Initialize the random number generator; set the remaining lives counter L to 4 and the current score S to 0; clear the screen to black BORDER, black PAPER and white INK.\u00a0<br/>Print the top line with score, high score and lives info.</p>\n<p>Line 3<br/>3 PRINT AT 0,31;L:BORDER 0:INK 0:LET A$=\"\":LET K$=\"\":LET C=165+INT(RND*91):GO TO 4-(C&gt;198 AND C&lt;202)<br/>Line 3 is where the game loop starts and where a new (key)word is picked.<br/>Print current lives counter L. The border colour is reset to black. So is the ink colour, so that the next printed will be invisible, since also the paper colour is black.\u00a0<br/>A$ and K$ are initialized to empty string. Then C, the character code of the keyword to be displayed, is assigned a random integer value between 165 (\"RND\") and 255 (\"COPY\").\u00a0<br/>Characters with codes 199 (\"&lt;=\"), 200 (\"&gt;=\") and 201 (\"&lt;&gt;\") are not words and so are not considered.</p>\n<p>Line 4<br/>4 PRINT AT 6,10;B$;AT 7,10;B$;AT 21,0;CHR$ C;B$:FOR I=0TO9:LET C$=SCREEN$(21,I):IF C$&lt;&gt;\" \" THEN LET A$=A$+C$:LET A=LEN A$<br/>Line 4 constructs the word A$ from the keyword character code C.<br/>First, delete words already on screen by overwriting them with B$, then invisibly print the keyword corresponding to character code C.\u00a0<br/>Create the A$ string by retrieving each single character composing the keyword (excluding spaces), using the SCREEN$ function in a FOR loop. Store the word length in A.</p>\n<p>Line 5<br/>5 NEXT I:INK 6:LET R=11+(9-A)/2:PRINT AT 6,R;A$:POKE 23672,0:POKE 23673,0:LET M=50*(E+1.4/A+A/4):INK 7<br/>Line 5 prints the word A$ in yellow and initializes the countdown.<br/>The NEXT statement completes the FOR loop started in line 5. Set INK colour to yellow (6) and calculate the horizontal position R of the word A$ so that it will be printed in the middle of the line.\u00a0<br/>Print the word A$. Reset the (2 least significant bytes of the) FRAMES counter. The most significant byte was already reset at the beginning of the program. Two bytes are enough for the countdown.\u00a0<br/>Initialize the countdown timer M based on word length A and difficulty coefficient E and finally set the INK colour to white (7).</p>\n<p>Line 6<br/>6 LET T=INT((M-PEEK 23672-256*PEEK (23673))/5)/10:LET T$=STR$(T*(T&gt;0)):PRINT AT 2,14;T$;:IF LEN T$=1 THEN PRINT \".0\"<br/>Line 6 is the first statement of an inner loop, in which the program calculates and updates the available time left and checks if the string typed by the player matches the word.<br/>Calculate the time left T, by subtracting the current value of the (least 2 significant bytes of the) FRAMES counter from the initial available time M and print its value on screen.</p>\n<p>Line 7<br/>7 IF T&lt;=0 OR A$(TO LEN K$)&lt;&gt;K$ THEN BORDER 2:LET L=L-1:BEEP .5,-23:LET H=(S&gt;H)*S+(H&gt;=S)*H:GO TO 3*(L&gt;=0)+2*(L&lt;0)<br/>Line 7 checks if the player has failed at typing the word.<br/>The player fails at typing the word if either the timer expires (available time T is &lt;= 0), or if the string typed so far by the player K$ is not part of the word A$.\u00a0<br/>If one of these conditions occur, the player loses a life (L is decremented by one), the BORDER colour is set to red (2) and a long low tone note is BEEPed. If current score S is greater than the high score H, the high score is updated.\u00a0<br/>Finally, if the player has still some lives left, the program jumps to the beginning of the game loop at line 3; otherwise if there are no more lives left, a new game starts by jumping to line 2.<br/>Please note that if the player has not yet typed anything, K$ would contain an empty string, which is considered a valid substring of the word in A$.</p>\n<p>Line 8<br/>8 LET K=CODE INKEY$:IF K&gt;0 THEN LET K=K-32*(K&gt;96)*(K&lt;123):LET K$=K$+CHR$ K:PRINT AT 7,R;K$:BEEP 0.009,0<br/>Line 8 handles player input.<br/>If a key is pressed, the corresponding character is converted to upper case and appended to the K$ string. The updated K$ string is printed to the screen, below the word A$.\u00a0<br/>Finally, a short tone is BEEPed to give a feedback that the key press has been recorded.</p>\n<p>Line 9<br/>9 IF A$=K$ THEN BORDER 4:BEEP .02,23:LET S=S+T*10:INK 7-2*(S&gt;H):PRINT AT 0,2;S:INK 7:GO TO 3<br/>Line 9 handles successful typing of the word.<br/>If the typed string K$ matches the requested word A$, the player has successfully typed the word within the timeout.\u00a0<br/>The BORDER is set to green (4), a bright tone is BEEPed and the remaining time is multiplied by 10 and added to the score S.\u00a0<br/>If the score S is greater than the high score, it is printed in cyan INK (5), otherwise in white (7). Finally the program jumps to the beginning of the game loop at line 3.</p>\n<p>Line 10<br/>10 GO TO 6: REM *** Marco's Retrobits 2021 https://retrobits.itch.io ***<br/>Line 10 is the end of the inner game loop.<br/>If the program flow reaches line 10, it means that the word has not been completely typed by the player, but the characters typed so far (if any) are correct and the available time has not yet expired.\u00a0<br/>So, simply jump back to the beginning of the inner loop at line 6.</p>\n<p>Program lines length proof</p>\n<p>By replacing each BASIC token with a single character and removing redundant blank spaces, each line in the resulting source code does not exceed the 80 characters limit.</p>\r\n\r\n1lH=0:lB$=\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\":o23674,0:i\"LEVEL (1-5):\";D:lE=.25*(5-D):g1+(D&gt;0)*(D&lt;6)<br/>2t:lL=4:lS=0:b0:C0:X7:v:p\"S:0\";B$;\"H:\";H;I0,29;\"L:\";L<br/>3pI0,31;L:b0:X0:lA$=\"\":lK$=\"\":lC=165+INT(T*91):g4-(C&gt;198 AND C&lt;202)<br/>4pI6,10;B$;I7,10;B$;I21,0;U C;B$:fI=0F9:lC$=K(21,I):uC$&lt;&gt;\" \" GlA$=A$+C$:lA=KA$<br/>5nI:X6:lR=11+(9-A)/2:pI6,R;A$:o23672,0:o23673,0:lM=50*(E+1.4/A+A/4):X7<br/>6lT=INT((M-O23672-256*O(23673))/5)/10:lT$=Y(T*(T&gt;0)):pI2,14;T$;:uKT$=1 Gp\".0\"<br/>7uT&lt;=0 OR A$(FKK$)&lt;&gt;K$ Gb2:lL=L-1:Z.5,-23:lH=(S&gt;H)*S+(H&gt;=S)*H:g3*(L&gt;=0)+2*(L&lt;0)<br/>8lK=IXEY$:uK&gt;0 GlK=K-32*(K&gt;96)*(K&lt;123):lK$=K$+U K:pI7,R;K$:Z0.009,0<br/>9uA$=K$ Gb4:Z.02,23:lS=S+T*10:X7-2*(S&gt;H):pI0,2;S:X7:g3<br/>10g6:e*** Marco's Retrobits 2021 https://retrobits.itch.io ***\r\n<p>Therefore, The Typing of the Spec is a suitable entry for the PUR-80 category of the BASIC 10 Liner Contest.</p>\n<p>Loading instructions</p>\n<p>The Typing of the Spec is provided in TAP tape image format, which can be easily loaded in most ZX Spectrum emulators and on the real machines, either equipped with devices such as the DivMMC or by playing it through the MIC port using tools like PlayTZX or WinTZX.<br/>The following instructions apply to the Fuse open source emulator, which is available for Unix, Linux, Windows, macOS and many other platforms.\u00a0<br/>For other emulators or devices, please refer to their specific documentation for loading TAP files.</p>\n<p>Start the Fuse emulator and select the Spectrum 48K model in \"Machine\" -&gt; \"Select...\"<br/>Make sure that automatic loading of tape image files is enabled, by checking the corresponding options in \"Options\" -&gt; \"Media...\"<br/>Open the typing.tap file, either by selecting it in \"File\"-&gt;\"Open...\" or by dragging and dropping it on the emulator window.</p>\n<p>To see the program listing, as soon as the program starts and prompts for the difficulty level, tap the A key and then tap ENTER.\u00a0<br/>The \"2 variable not found\" message will be displayed. Then press the K key, followed by the ENTER key.\u00a0<br/>Now you will see the first page of the program listing; to scroll to the next page, press any key except SPACE BAR.</p>\n<p>If your emulator of choice does not support automatic tape loading, after mounting the tape image you must manually issue the tape loading command, by pressing the J key, followed by CTRL + P twice (the SYMBOL SHIFT ZX Spectrum key is usually mapped to CTRL) and then by ENTER.<br/>If you are emulating a 128K ZX Spectrum model, to start loading simply select \"Tape Loader\" using the cursor keys in the main system menu and press ENTER.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u00a0<br/>IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>", "metacritic": null, "released": "2021-03-04", "tba": false, "updated": "2021-03-05T07:32:27", "background_image": "https://media.rawg.io/media/screenshots/02a/02a0b6bcf2065141b4eb7654b10417bd.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 7, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Educational"], "publishers": [], "esrb_rating": null}