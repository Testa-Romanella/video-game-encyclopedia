{"id": 888461, "slug": "hawaiian-checkers-ai-project", "name": "Hawaiian Checkers - AI Project", "name_original": "Hawaiian Checkers - AI Project", "description": "<p>This project is an extension of an AI course I\u00a0took in university that focused on creating an adversarial search agent for the board game Konane (Hawaiian Checkers). I decided to recreate this project in Unity so that I\u00a0could learn the development engine, improve my C# skills, and deepen my understanding of the underlying AI principles being used. For those interested, I'll detail the technical specifications and references below. Otherwise, enjoy the game! Please drop me a message with any feedback you have or any significant bugs you find (I'll list some known issues I\u00a0deemed acceptable\u00a0below).\u00a0</p>\n<p><strong>AI Details:</strong><br/></p>\n<p>My university project utilized the minimax search algorithm and was written in C. This was an unwieldy decision and lacked major optimizations that were sorely needed. This project, written in C#, utilizes the Negamax framework, which is a variation of minimax. I've included alpha/beta pruning and a move ordering system that further optimizes the search algorithm, drastically cutting down on the number of leaf nodes being evaluated. I've explored implementing a transposition table but ultimately decided against as my plan is to move on to other projects.</p>\n<p><strong>Acknowledgements:</strong><br/></p>\n<p>Up front I have to acknowledge the work of Sebastian Lague, whose excellent YouTube videos on alpha/beta pruning and chess AI were hugely helpful in my understanding of the search algorithm. His chess project significantly improved my understanding of Unity as I\u00a0studied how he generated his chess board programmatically, which was truly fascinating. After understanding the fundamentals of Unity I\u00a0was able to take off in my own direction as the rule set for Konane is very different from Chess.</p>\n<p><strong>Sebastian Lague's Chess Video</strong></p>\n<p>For those interested in AI, I also highly recommend Russell and Norvig's excellent AI textbook -\u00a0Artificial Intelligence: A Modern Approach. It covers a whole host of fascinating AI topics well beyond what is used in this small project.</p>\n<p>The chess programming wiki was also a huge help in troubleshooting and understanding board game programming concepts.</p>\n<p><strong>Chess Programming Wiki</strong><br/></p>\n<p><strong>Known Issues:</strong></p>\n<ul><li>The first opening move by the AI doesn't have a delay on deleting a piece despite being placed in a coroutine (despite my best efforts to 'pause' the game when animating a move, player actions are still allowed - if anyone knows how to solve this issue please leave a message).</li><li>Players can interact with the game board while the AI is having its move animated. Technically the AI has already chosen its move, the animation is purely for the player's benefit.</li><li>Corner squares can be selected when clicking slightly outside their bounds in some instances (Should be minimal actual impact to the game).</li><li>The move ordering algorithm I created needs to be further optimized for the AI to be more challenging. I tested higher depths but the performance cost ballooned to much. Something I\u00a0may revisit in the future.</li></ul>", "metacritic": null, "released": "2022-12-01", "tba": false, "updated": "2022-12-02T11:19:24", "background_image": "https://media.rawg.io/media/screenshots/533/533663fdde02311c7a4779d2387afaaf.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 5, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["MantaWranglar"], "genres": ["Strategy"], "publishers": [], "esrb_rating": null}