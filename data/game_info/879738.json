{"id": 879738, "slug": "sliderpuzzles", "name": "SliderPuzzles", "name_original": "SliderPuzzles", "description": "<p># SliderPuzzles with Sound</p>\n<p>## What's new:</p>\n<p>**ver 2.5.4 -- 15nov2022**</p>\n<p>* Regrouped these slider puzzles together just for retro-puzzle fans.</p>\n<p>**ver 2.5.3 -- 05nov2022**</p>\n<p>* Created &amp; enabled embedded \"live\" solvers for the annoying-sliders and panama apps.</p>\n<p>* Improved robustness of all embedded solvers.</p>\n<p>* Improved feedback messages in puzzles.</p>\n<p>* Fixed a serious error in the sliding block puzzles that caused flickering on Windows.</p>\n<p>===============================================================</p>\n<p>## Introduction</p>\n<p>SliderPuzzles is a collection of retro puzzles with sound that run in a commandline terminal on Windows, OS-X and most Linux distros.</p>\n<p>-----------------------------------------------------------</p>\n<p>Featuring</p>\n<p>\u00a0\u00a0 \u00a0* no installation</p>\n<p>\u00a0\u00a0 \u00a0* no dependencies (Ncurses not needed)</p>\n<p>\u00a0\u00a0 \u00a0* simply unzip in your Downloads directory, or any other writeable directory, and run;</p>\n<p>\u00a0\u00a0 \u00a0* or unzip onto a USB flash drive [w/same file format] and run.</p>\n<p>-----------------------------------------------------------</p>\n<p>### Details</p>\n<p>The 7zip command to extract the archive and maintain the directory structure is \"7z x filename\".</p>\n<p>* Windows versions use runtime-priority control for arcade-level response.</p>\n<p>Rebuildable using the free GNU Ada compiler, even on OSX.</p>\n<p>Includes 12 puzzle games that use ascii characters only:\u00a0 rush-hour, klotski, flat7, flatAZ, sokoban, hole-in-one, hole-in-one+4, nine, dirty-dozen, panama, annoying-sliders.</p>\n<p>See the image \"./puzzles.png\" for a visual of some of the available puzzzles.</p>\n<p>* Two of these puzzles, Flat7 &amp; FlatAZ, are my own creations. They are 2-dimensional versions of my 3D, OpenGL \"Rufas Cube\" puzzles, available at:\u00a0 https://sourceforge.net/projects/rufascube/</p>\n<p>Usable keys for all:</p>\n<p>* arrow-keys for movement; (see ~/docs/KeyboardMoves.txt)</p>\n<p>* in some games you can also use wasd, ijkl for moves.</p>\n<p>* (q)=quit</p>\n<p>* (?)=help toggle</p>\n<p>All puzzles can be called directly from the command line; e.g.</p>\n<p>* bin\\win\\csok.exe\u00a0\u00a0 \u00a0(sokoban from base dir)</p>\n<p>* csok.exe\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0(sokoban from ~\\bin\\win\\ dir)</p>\n<p>but it is more convenient to use the selector app, thusly:</p>\n<p>* winSlide.bat\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0(Win64)</p>\n<p>* macSlide.sh\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0(Mac/OSX)</p>\n<p>* gnuSlide.sh\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0(linux)</p>\n<p>Use the keyboard arrow keys to highlight the desired game, then press the (enter)-key.</p>\n<p>* Windows users note: Using linux executables under WSL [Windows Subsystem for Linux] is not supported. Instead, you should use the windows versions because extraordinary measures have been taken to achieve arcade-level response.</p>\n<p>* Similarly, linux users cannot use wine to run Windows executables, with this particular App.</p>\n<p>* Many of these 2D slider puzzles are also available in OpenGL-graphical form at: https://sourceforge.net/projects/rufasslider/</p>\n<p>* Also using OpenGL graphics, I have created some 3D slider puzzles that run on Windows, OS-X, and Linux. It is available at: https://sourceforge.net/projects/reliquarium/</p>\n<p>### For Maximal Enjoyment...</p>\n<p>Keyboard setup can be very important for playability.\u00a0 You should have a very short key-delay and fast repeat rate setting when running the arcade games. The normal settings are fine for puzzles.</p>\n<p>Screen setup is important, too. Terminal sizes required:</p>\n<p>\u00a0\u00a0 \u00a0* 60x25</p>\n<p>It is recommended to resize your terminal window, per the above table; then enlarge the font until the window just barely fits your computer screen.</p>\n<p>===========================================================================</p>\n<p>### TrafficRush (crush.adb)</p>\n<p>Colored, non-graphical Traffic-Rush puzzle game designed to run in a terminal window.</p>\n<p>Horizontal and vertical strings of letters represent cars and trucks in a crowded parking garage.\u00a0 The objective is to move them around lengthwise in order to be able to get red car \"a\" to the exit, which is either at the right or top of the garage.\u00a0 Note that the last digits in each puzzle name represents the minimum number of moves to win.</p>\n<p>A stand alone autosolver, bfsr, is provided, but now, an autosolver is embedded into this game.\u00a0 At any time you may press the (=)-key to begin stepping toward a solution.</p>\n<p>I created about 20% of these rush-puzzles (filenames that end \"my.rush\"), including the most difficult one \"zzzz_89my.rush\".</p>\n<p>### BlockSliders, DirtyDozen, AnnoyingSliders</p>\n<p>Colored, non-graphical Block Slider puzzle games designed to run in a terminal window.</p>\n<p>Colored blocks of letters can be moved horizontally or vertically wherever there is space.\u00a0 Often, the objective is to move the red block to a specified goal position. Sometimes the goal is to swap the positions of two blocks.</p>\n<p>A stand alone autosolver, bfsa, is provided, but now, a \"live\" autosolver is embedded into these games.\u00a0 At any time you may press the (=)-key to begin stepping toward a solution.</p>\n<p>In cann you must type \"0\" to restart it, since \"r\" is reserved to mean \"red\".</p>\n<p>For those times when a solution seems impossible, the more difficult puzzle families have an AutoSolver function using the (=)-key to step closer towards the solution:\u00a0 crush, cslid, cdd, and cann. \u00a0</p>\n<p>### Advice to improve puzzle-solving skills: \u00a0</p>\n<p>Remember that you can **stop** using the autosolvers at any time and try to manually solve the puzzle from a configuration that is a few steps closer to the solution. And because these solvers are \"live\", you can **resume** using the autosolvers at any time if you get stuck again. Each time you resume, you might need to wait a few seconds for the solver to complete its search.</p>\n<p>### Gameplay: crush, cslid, cann (annoying-sliders)</p>\n<p>\"?\" toggles the help screen.\u00a0 The \"+\" and \"-\" keys (next, previous) are used to cycle through the large number of predefined puzzles.\u00a0 You can reset a puzzle by typing \"r\". You can autosolve by typing \"=\". </p>\n<p>First, one selects a vehicle or block by typing its identifier letter.\u00a0 Then use the arrow keys to move it.\u00a0 Note that **manual selection is, often times, not necessary,** as there is an auto-select mechanism for those times when only one selection may move in a given direction. For example, cpana never needs a selection (and, btw, it can be solved in 26 moves!).</p>\n<p>Be aware that move counts for a given puzzle may differ according to how they are counted. Many puzzzlers count a compound move with a single piece as one move. Here, it is not.</p>\n<p>===============================================================</p>\n<p>### Seven, A2Z (c7.adb, caz.adb)</p>\n<p>c7 (flat7) is a flat representation of a 3D 2x2x2 cube with one cubelet missing that allows sliding permutations.\u00a0 There are two 2x2 layers. Here, the elements are labelled 1..7.</p>\n<p>caz (flatAZ) is a flat representation of a 3x3x3 cube with one cubelet missing that allows sliding permutations.\u00a0 Here, there are three 3x3 layers. The elements are labelled with the english alphabet.</p>\n<p>Flat7 &amp; FlatAZ, are my own creations. They are 2-dimensional versions of my 3D, OpenGL \"Rufas Cube\" puzzles, available at:\u00a0 https://sourceforge.net/projects/rufascube/</p>\n<p>Both the \"caz\" and \"c7\" puzzles work the same:</p>\n<p>* note the original order, and blank location;</p>\n<p>* mix;</p>\n<p>* then restore.</p>\n<p>A character in an adjacent row, column, or layer may be moved to the empty space using the keyboard.</p>\n<p>Pressing the (home) key on a typical keyboard produces the character 'H'.\u00a0 So assuming that (home)=&gt;'H', (end)=&gt;'F', (up)=&gt;'A', etc...</p>\n<p>the KEY MAPPING follows:</p>\n<p>* (1)..(5): mix;\u00a0 higher values are more difficult.</p>\n<p>* (up),(lf),(dn),(rt): move north, west, south, east</p>\n<p>* (i),(j),(k),(l): move north, west, south, east</p>\n<p>* (w),(a),(s),(d): move north, west, south, east</p>\n<p>* (home),(end): move up one layer, down one layer</p>\n<p>* (\\\\),(/): [backslash=]move up one layer, [forwardslash=]down one layer</p>\n<p>* (-),(+): move up one layer, down one layer</p>\n<p>* (?): help</p>\n<p>* (q): quit</p>\n<p>===============================================================</p>\n<p>### sokoban (csok.adb)</p>\n<p>There are now two character sets possible that are toggled with the (c)-key.</p>\n<p>Move the pusher ( &lt;&gt; or @ ) with the arrow keys in order to push all the boxes ( [] or $ ) onto the goals ( :: or . ) in which case they look like ( {} or asterisk ).\u00a0 Various other functions available on the help screen.\u00a0 Includes a very large family of puzzle files.</p>\n<p>Three [external] sokoban solvers named iplr3r, ibox3r, &amp; hbox4\u00a0 are available.\u00a0 The command line is \"solver-name puzzle-file-name level-number-to-solve\".\u00a0 The solvers print solution-strings to the terminal screen.</p>\n<p>There are many cases the first two solvers cannot handle, but they are pretty good at solving smaller puzzles, particularly the more dense ones. Hbox4 is the most capable.</p>\n<p>Three time-limited-to-10-second solvers are embedded into csok.\u00a0 At any time you may press the (=)-key to see if the solver #1 can help you.\u00a0 If so, you will be prompted to keep pressing that same key to proceed toward a solution.\u00a0 No prompt means either the present state is unsolvable, or merely that the embedded algorithm failed.\u00a0 Similarly, the (.)-key initiates solver #2; and the (,)-key initiates solver #3. These can give you a headstart toward a correct solution by limited use of this feature.\u00a0 Once you think you can solve it yourself, stop using the solver and proceed manually.\u00a0 This really helps when you cannot see what your next move should be.</p>\n<p>### HoleInOne (chio.adb, chio4.adb)</p>\n<p>Move the red 2x2 'a' block into the center of the four L-shaped corner pieces.</p>\n<p>### Nine (c9.adb)</p>\n<p>Reverse the order of the numbered blocks with assorted shapes. First version begins with blocks in order. Second begins with blocks in reverse order. Has solver.</p>\n<p>===============================================================</p>\n<p>## Setup &amp; Running:</p>\n<p>SliderPuzzles is a stand-alone application.</p>\n<p>Ncurses is NOT needed; there are no prerequisites.</p>\n<p>Mac users see \"osx-setup.txt\".</p>\n<p>Windows users see \"windows-setup.txt\".</p>\n<p>Unzip the archive.\u00a0 On Windows, 7z [www.7-zip.org] works well for this.</p>\n<p>The proper command to extract the archive and maintain the directory structure is \"7z x filename\".</p>\n<p>Open a commandline terminal, and cd to the game directory.</p>\n<p>Your keyboard should have a short key-delay and fast repeat rate.</p>\n<p>Minimize the size of your terminal window to 60x25...</p>\n<p>Then enlarge the Font so that the window fills your monitor.</p>\n<p>To launch the puzzle selector App, depending on your system, type:</p>\n<p>* winSlide.bat (win64)</p>\n<p>* macSlide.sh (OSX)</p>\n<p>* gnuSlide.sh (linux)</p>\n<p>Note that any individual app may still be executed from the directory appropriate to your O.S.\u00a0 For example, on Windows you can CD to bin\\win\\ and then type \"csok\" to run Sokoban.</p>\n<p>### OSX caveat</p>\n<p>The prebuilt OSX executables require version 10.13 (sep2017) or newer.</p>\n<p>===========================================================================</p>\n<p>## Compiler Scripts</p>\n<p>There are 3 scripts, winbuildall.bat for Windows, lbuildall.sh for Linux, and obuildall.sh for OS-X.\u00a0 They differ in where the executables are put.\u00a0 With so many different precompiled binaries for each OS, there would be too much clutter if they were all put into the same place, particularly since windows needs colocated DLLs.</p>\n<p>These build scripts work for GNU Ada [with its own g++].</p>\n<p>See ./alternateBuildScripts/ for more examples.</p>\n<p>The latest scripts have elliminated the need to use the \"gnatcoll\" library simply by compiling from source 3 additional tiny files, a small subset of gnatcoll, that are actually used.</p>\n<p>Final note:\u00a0 the latest OSX script does not use Xcode, only GNU Ada &amp; GNU g++.</p>\n<p>==========================================================================</p>\n<p>## Build Instructions:</p>\n<p>Remember that prebuilt executables are already included. But, if you want or need to rebuild...</p>\n<p>To get a recent Ada compiler;\u00a0 eg. GNU-Ada...try this source:</p>\n<p>https://github.com/alire-project/GNAT-FSF-builds/releases</p>\n<p>Manually install GNU Ada.\u00a0 If you don't like my key-mappings, edit the code as you like.</p>\n<p>Next, edit the scripts wincmp.bat, lcmp.sh or ocmp.sh so that the path to gnatmake is correct.\u00a0 These scripts streamline the build process by allowing auxilliary files to be neatly hidden in subdirectories.</p>\n<p>Windows users please read gnuAdaOnWindows.txt.</p>\n<p>Then type \"[win/l/o]buildall\" to create new command-line executables for your system. ( win for Windows, l for Linux, o for OSX). </p>\n<p>There are NO other 3rd party libraries or tools required to build.</p>\n<p>---------------------------------------------------------------</p>\n<p>## What is special about this project?...freedom...portability</p>\n<p>* uses the Ada programming language and the freely-available GNU compiler.</p>\n<p>* runs on Macs running OSX, or PCs running Windows or Linux;</p>\n<p>* uses only free open source software [F.O.S.S] tools &amp; libraries;</p>\n<p>* portable, transparent code, easy to modify, rebuild;</p>\n<p>* uses a cross-platform implementation of OpenAL-Audio, adaptable by any Ada application that needs sounds &amp; music-loops with a simple interface.</p>\n<p>* pure minimalism:\u00a0 no graphics, just colored ASCII characters, keyboard, &amp; sound;</p>\n<p>* Ncurses is <u>not</u> required.</p>\n<p>Open source Ada developers are welcome to help improve or extend this app.</p>\n<p>Developer or not, send comments, suggestions or questions to:</p>\n<p>fastrgv@gmail.com</p>\n<p>---------------------------------------------------------------</p>\n<p>## License:</p>\n<p>SliderPuzzles is covered by the GNU GPL v3 as indicated in the sources:</p>\n\n<p>\u00a0This program is free software: you can redistribute it and/or modify</p>\n<p>\u00a0it under the terms of the GNU General Public License as published by</p>\n<p>\u00a0the Free Software Foundation, either version 3 of the License, or</p>\n<p>\u00a0(at your option) any later version.</p>\n<p>\u00a0This program is distributed in the hope that it will be useful,</p>\n<p>\u00a0but WITHOUT ANY WARRANTY; without even the implied warranty of</p>\n<p>\u00a0MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\u00a0 See the</p>\n<p>\u00a0GNU General Public License for more details.</p>\n<p>\u00a0You may read the full text of the GNU General Public License</p>\n<p>\u00a0at <http: licenses=\"\" www.gnu.org=\"\">.</http:></p>\n<p>----------------------------------------------</p>\n<p>## Other Credits and Thanks:</p>\n<p>Serhiy Grabarchuk and Peter Grabarchuk for their \"Hole in One\", \"Hole in One plus 4\", and \"Nine\" puzzles.</p>\n<p>Nick Baxter, J.H.Conway, Jim Lewis, Bob Henderson, Gil Dogon, Ed Pegg Jr., J.I. Wiley, J.H. Fleming, C. L. Diamond, Sam Loyd, H. E. Dudeney, E. B. Escott, Nob Yoshigahara, James W. Stephens for the classic sliders.</p>\n<p>----------------------------------------------</p>\n<p>### SoundFiles (wav)</p>\n<p>Fanfare/Applause and UFO sounds are from freesound.org and are covered by the Creative Commons CC0 Public License documented in the accompanying file ./docs/creativeCommonsCC0.txt. A few have a CC-by-3.0 license and are accompanied by a text file with the attribution.</p>\n<p>The remaining sounds are public domain.</p>\n<p>See also: ./sounds/licenses-sound-data.txt.</p>\n<p>It is my intention to use media with copyrights or licenses that are compatible with GPLv3. Please notify me if you believe there is an incompatibility, and it will be removed; eg a CC-by-NC license is NOT GPL compatible.</p>\n<p>----------------------------------------------</p>\n<p>## Download Sites for all my games:</p>\n<p>* https://github.com/fastrgv?tab=repositories</p>\n<p>* https://www.indiedb.com/members/fastrgv/games</p>\n<p>* https://fastrgv.itch.io</p>\n<p>* https://sourceforge.net/u/fastrgv/profile/</p>\n<p>* https://gamejolt.com/@fastrgv/games</p>\n<p>## Video BlockSlider Autosolve:</p>\n<p>* </p>\n\n<p>--------------------------------------------------</p>\n<p>## Some Earlier Revision History:</p>\n<p>**ver 2.5.2 -- 22oct2022**</p>\n<p>* Added 16 annoying block sliders that are small, yet quite challenging.</p>\n<p>* Improved traffic-rush by presenting puzzles in order, from easy to hard;</p>\n<p>* Similarly improved Klotski-sliders by sorting puzzles from easy to hard; also added Quzzle, Quzzle-Killer puzzles near the difficult end of the scale.</p>\n<p>* Improved documentation.</p>\n<p>**ver 2.5.1 -- 26sep2022**</p>\n<p>* Simplified Win64 build; using new stand-alone GNU Ada compiler.</p>\n<p>* Removed Win32 build because embedded sokoban solvers need maximal memory.</p>\n<p>* Removed all gnatcoll libraries by compiling from source the tiny subset needed.</p>\n<p>**ver 2.5.0 -- 20sep2022**</p>\n<p>* Restored Win64 build, now using MSYS2 &amp; mingw64 on Windows.</p>\n<p>* Still deliver Win32 build, also.</p>\n<p>**ver 2.4.1 -- 16sep22**</p>\n<p>* Removed Win64 build.</p>\n<p>* Now using GNU Ada rather than defunct AdaCore compiler.</p>\n<p>**ver 2.4.0 -- 23dec21**</p>\n<p>* Updated gnatcoll libraries on OSX &amp; w32; removed unused libgpr.a.</p>\n<p>* All \"assets\", including datafiles &amp; soundfiles, now have licenses compatible with the GPLv3 license.</p>\n<p>**ver 2.3.9 -- 05nov21**</p>\n<p>* Added example script to build using Gnu/Gnat.</p>\n<p>* Refined libraries and build scripts.</p>\n<p>* Replaced libgnatcoll.a with one from GitHub.</p>\n<p>**ver 2.3.8 -- 21oct21**</p>\n<p>* Besides Win64, there is now a Win32 build, to support older platforms.</p>\n<p>* Improved adaOpenAL binding code.</p>\n<p>**ver 2.3.7 -- 18oct21**</p>\n<p>* Eliminated anomalous clutter in nexus selection app;</p>", "metacritic": null, "released": "2022-11-13", "tba": false, "updated": "2022-11-14T05:28:17", "background_image": "https://media.rawg.io/media/screenshots/a46/a464d5916fad22c2f745452bf7d7985e.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 51, "game_series_count": 0, "reviews_count": 0, "platforms": ["Linux", "macOS", "PC"], "developers": ["fastrgv"], "genres": ["Strategy", "Puzzle"], "publishers": [], "esrb_rating": null}