{"id": 748783, "slug": "food-clicker-tedman", "name": "Food Clicker (tedman)", "name_original": "Food Clicker (tedman)", "description": "<p><em>Controls:\u00a0Use your Mouse (Left Click) to click on food randomly flying onto the screen. Avoid clicking on bombs, and make sure all the foods are clicked!\u00a0<br/>Pizza = 1pt, Cookie = 2pt, Pear = 3pt. Bombs end the game.</em></p>\n<p><strong>Purpose: UI (Score, Difficulty, Restart)</strong></p>\n<ol><li>Create UI that updates the score whenever a food is clicked</li><li>Create UI that restarts the game once it is over</li><li>Create UI that features the Title and Game Over text when appropriate</li><li>Create UI that changes the difficulty of the game</li><li>Create objects that spawn at the bottom of the screen. Objects are acted with a random range of force, that spins with a random range of torque, and are from a random position at the bottom.</li></ol>\n<p><strong>Methodology:</strong></p>\n<ol><li>Unity has a <strong>OnMouseDown method</strong> that detects when a mouse is being clicked. When clicked, it uses a function (UpdateScore) that passes through a point value. A point value is assigned to each food item. This point value is then added to the current score with a<strong> += operator,</strong> and this change is reflected on the score text via <strong>.text<br/></strong></li><li>For the restart button to work, use Unity's LoadScene method that is available through<strong> UnityEngine.SceneManagement</strong>. The easiest way is to just get the current scene via <strong>GetActiveScene().name, </strong>since there is only one scene</li><li>The Title Screen and the Game Over screen is controlled by <strong>different methods</strong>. When the game starts, the Title screen deactivated. When a fail condition is reached, the Game Over method is launched which activates the restart button and the game over text.\u00a0</li><li>The difficulty is controlled by a script that determines which button was clicked via Unity's <strong>AddListener</strong> function. Depending on the button, a integer is passed as a parameter. This integer affects the spawn rate of the food through a<strong> /= operator</strong>. A difficulty of easy, passes through the integer of 1, which takes 2/1 = 2, which means 2 seconds between each food. Medium passes 2, which makes it 1 second in between spawns. </li><li>To get a random amount of Torque, Force, and position, use <strong>AddForce, AddTorque, and transform.position</strong>. pass through<strong> Random.Range</strong> in each of the values and set min and max ranges.</li></ol>\n<p><strong>Notes for the future:\u00a0</strong></p>\n<p>UI is challenging to program because the location of the text can change with different resolutions. There has to be a way to keep the size of the text and buttons to change relative to the size of the screen. <br/></p>", "metacritic": null, "released": "2022-03-04", "tba": false, "updated": "2022-03-04T05:09:09", "background_image": "https://media.rawg.io/media/screenshots/aea/aea1d4eacaaa292955457664eae22fae.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["tedman"], "genres": ["Action"], "publishers": [], "esrb_rating": null}