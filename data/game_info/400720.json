{"id": 400720, "slug": "grid-based-rpg-demo", "name": "Grid Based RPG Demo", "name_original": "Grid Based RPG Demo", "description": "<p>Not an interactable game per se; this was mostly done with the intent of making something that's easy to modify and expand on (Granted, you can't see that from the finished build.)<br/><br/>For a few months, I enjoyed the idea of Browndust (https://play.google.com/store/apps/details?id=com.neowizgames.game.browndust.srp...)'s combat system.<br/><br/>You have two grids, and you place entities that can only do 1 thing, with rules that determine how many targets that thing affects, the number of the effects, and a bunch of pre- and post- modifiers per ability.<br/><br/>The desire to make something like this was also partially derived from a previous RPG project, where feature creep was rea. The scope of an \"RPG\" was vastly underestimated, and it ended up becoming more and more hacked together than I'd have liked due to deadlines. <br/><br/>TL;DR Here: Turn based RPGs have Exponential Complexity. Every layer that goes deeper, and Every layer that gets wider, adds far more complexity than the sum of it's parts. <br/><br/>But back to the project. <br/><br/>Here I originally didn't know what Asset's I'd be using, so I opted to buy a Rigged 3D Knight entity from the asset store. <br/><br/>More often than not, I default to the AnimationEvent System for calling events during a certain frame in an animation, but I got really tired of having to open up multiple editor windows and fiddling with the tiny handles to configure an animation with effects and callbacks. So here I wrote my own system, that allows me to throw subscribe calls and normalized time triggers per animation that triggers on a given animating entity.<br/><br/>The Targeting system was something I wanted to be able to change visually, so that in the event someone jumped on and wanted to work on it and make their own OC character self insert, It'd be easy enough to configure the area an attack encompasses. It's a 2 dimensional grid, represented in the editor exactly like that. Following the rules of Browndust itself, the \"attack\" or action originates from the center of the grid, and spreads outward, checking tiles adjacent to it that are marked as True to evaluate.<br/><br/>The \"Attacks\" were something I had to think for a while on in terms of implementation. I have a habit of hyper specifying features, and not stepping back to see the bigger picture. I realized that \"Attacks\" could be generalized as \"Abilities\", which also encompassed what some people would call \"Skills/Spells\".<br/><br/>So from there, I constructed a set of customizable Abilities, that could have Effects assigned to them. Effects in this case, are a data type that takes:</p>\n\n<ul><li>The Target of the skill</li><li>\u00a0The User of the skill</li><li>The Attribute (HP/STR/DEF/WhatHaveYou) of that will be changed</li><li>The State of the Attribute (Current / Max)</li><li>The Change that will take place (Increase, Decrease,Set)</li><li>And the Formula for deriving the value to pass into it</li></ul>\n<p>This allos me to create... most standard RPG Abilities that Do Damage, Heal Damage, Buff, Debuf\u00a0by\u00a0defining\u00a0different\u00a0Change\u00a0Types\u00a0and\u00a0Formulae.<br/><br/> </p>", "metacritic": null, "released": "2019-12-20", "tba": false, "updated": "2019-12-23T03:34:46", "background_image": "https://media.rawg.io/media/screenshots/714/71414d1f394cd96c7f8c9dbd7d6f035b.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 25, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Digibunny"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}