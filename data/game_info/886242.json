{"id": 886242, "slug": "interplayer", "name": "Interplayer", "name_original": "Interplayer", "description": "One day, your doctor intentionally deletes data from our project. You, an assistant who follows the incompetent doctor, are instructed by him to try to recover the deleted data.<br/><br/>\"Interplayer\" is a game in which you write source code by moving the player around, picking up tokens and collecting them. Write source code that achieves the pairs of inputs and corresponding outputs set for each stage. For example, double the numerical value of the input and output it, convert it to an n-decimal number, etc....<br/><br/><br/>For example, output the input value multiplied by 10, etc...<br/>Inputs [3, 6, 10] =&gt; Outputs [30, 60, 100]<br/><br/>Programmers these days have been programming by tapping on their keyboards and typing whatever letters they want. But what if we add constraints? With Interplayer, you program in tokens, and the order and number of times you can write tokens is constrained. How do you achieve the expected input/output pairs within these constraints? Experience a new approach to programming with \"Interplayer\".<br/><br/><h3>Dedicated language specifically for this game</h3>The language written in the game is tolerance language, a dedicated programming language created for this game. You will need to understand this unknown language by referring to the in-game references. But don't worry! Because the tolerance language has a highly readable syntax strongly influenced by Python, with only simple functions, and it is easy for programmers to understand them (except for the stack statement!). . For example, if the tokens \"var,\" \"=,\" and \"1\" are present in a stage, you can assign <strong>1</strong> to the variable <strong>var</strong> by writing <strong>var = 1</strong>. Other complex processes can be described in the game by combining various control statements such as \"if\" and \"while\".<h3>Unique stack statement</h3>One of the unique features is the <strong>stack statement</strong> grammar, where <strong>a = 1 + 1</strong>, for example, is written as <strong>1 1 + = a</strong> in the stack statement. In other words, the stack statement complicates the order in this game, which is about the order in which tokens are picked up.", "metacritic": null, "released": "2022-11-24", "tba": false, "updated": "2022-11-28T02:45:04", "background_image": "https://media.rawg.io/media/screenshots/1ad/1ad35356add730516015058b670498e0.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 89, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Hna_machida"], "genres": ["Simulation", "Casual", "Indie"], "publishers": ["Hna_machida"], "esrb_rating": null}