{"id": 573990, "slug": "cosmic-aq", "name": "Cosmic Aq", "name_original": "Cosmic Aq", "description": "<p><em>Entry for the PUR-80 category of the <strong>2021 BASIC 10 Liner</strong>.</em></p>\n<p>(For Mattel Aquarius - MattPilz.com - @MattPilz - YouTube)</p>\n\r\nFOREWARD\r\n<p>One of my earliest memories in video gaming history was playing <strong>Cosmic Ark </strong>for the <strong>Atari 2600</strong>. The sounds and visuals of that game are still etched in my mind all these decades later.</p>\n<p>I recently became immersed in the world of\u00a0<strong>Mattel Aquarius</strong>, a decidedly underpowered discount\u00a0home computer system from 1983 that existed for mere months before being phased out. The lack of a dedicated graphics chip or programmable characters make this computer, in many ways, less programmable\u00a0than the 2600 released six years prior.<br/></p>\n<p>Despite its shortcomings, I still find charm in the system. The old adage \"limitations foster creativity\" rings especially true for this platform. There still exists a small but passionate community of like-minded individuals who are\u00a0taking the system to new levels with fresh software and hardware modifications.<br/></p>\n<p>To pay homage to the classic space shooter of my youth, while also celebrating the 10th anniversary of BASIC 10 Liner\u00a0and my newfound admiration of Aquarius, I decided to develop the aptly\u00a0titled <strong>Cosmic Aq</strong>.</p>\n<p>There are some agonizing challenges in working for this platform especially within the scope of a 10 liner. Most notably,\u00a0 each line can be a maximum of 72 characters and there is no abbreviated syntax for the commands. This gives Aquarius developers a hard limit of 720 characters instead of 800 characters allocated on other platforms in the PUR-80 category.</p>\n<p>My original high\u00a0ambitions for this project quickly diminished when I\u00a0realized that I was nearing capacity of the code limit just in\u00a0constructing the visuals for the ship and comet, which initially included a much more elegant design as well as\u00a0dust trails and explosion effects. I had to refactor the design endlessly to squeeze enough game mechanics in to consider it a completed project. It is comparable to the meteor shower mode of the original Cosmic Ark.</p>\n<p>Enjoy!</p>\n\r\nTHE CODE\r\n\r\nREM----------------EACH LINE IS 72 CHARACTERS IN LENGTH-----------------\r\n0DIMB(22):D=12747:E=12347:T=50:L=53:M=14346:N=12774:Q=22:R=N:S=243:A=160\r\n1B=1024:?CHR$(11):POKEE-59,46:FORI=0TOQ:Z=3-Z:POKEINT(960*RND(1)+E),46-Z\r\n2READX:B(Q-I)=X:D=D+X*(I&lt;13)*-1:POKED,S+Z:POKED+B,179+Z:SOUND(I,I):NEXTI\r\n3SOUND(Q,S+S*F):IFL=48THENSOUND(Q*2,S*4):?TAB(53)\"SCORE\";:?P:INPUTA$:RUN\r\n4G=INT(2*RND(1)+1)*SGN(RND(1)-0.5):U=E+460*ABS(G-1):H=40*G:K=9:F=2:V=-23\r\n5POKEE+23,L:T=T+(G&lt;=1):C=1-(T&lt;-L):IFABS(G)=2THENU=N+(6.5*ABS(G-2)):H=G/2\r\n6FORI=0TOKSTEPC:V=-V:POKEU+H*I,173+V:W=PEEK(M):O=I:IFW=B(G+2)THENF=1:O=K\r\n7FORJ=0TOT:NEXTJ:R=B(G+7)+N:IFF=01THENPOKE(R),213:POKE(R+B),54:F=0:P=P+1\r\n8POKEU+H*(I),A:I=O:NEXTI:POKE(M),A:POKE(R),A:POKE(R+B),22:IFF=2THENL=L-1\r\n9GOTO3:DATA0,37,1,1,1,1,1,1,36,1,1,39,-498,9,-67,0,133,17,44,97,0,122,46\r\nREM--10--||---20---||---30---||---40---||---50---||---60---||---70---|72\r\n\r\n\r\nMATTEL AQUARIUS\r\n<p>The Mattel Aquarius has a fixed 256 character set and no GPU. It uses early version of Microsoft BASIC\u20141.7K usable RAM. It also only supports a maximum of 72 characters per line. The screen has a 40x24 grid of tile-like characters-16 colors.</p>\r\nSTORY\r\n<p>The crew's latest interstellar effort aboard \"<strong>Aquarius '83</strong>\"\u00a0 has gone dangerously astray. Caught in a shower of deadly and\u00a0 increasingly violent meteors, the ship has already been hit. Now, it's a hard battle to the end; missiles against meteors!</p>\r\nGAMEPLAY\r\n<p>You control the tattered Aquarius spacecraft, hovering in space and with minimal protection against the meteors. By chance, the ship still has functional four-way missles and these can be fired upward, downward, to the left or right. Use this weaponry to obliterate all the incoming meteors!</p>\n<p>The game ends when you've been hit more than 5 times. At the end, your score will be shown. Press <strong>[ENTER]</strong> to start a new game, or <strong>[CTRL]+[C]</strong> to exit.<br/></p>\r\nCONTROLS\r\n<p>These are the essential controls you'll need to succeed:</p>\n<ul><li><strong>[&lt;]</strong> = FIRE LEFT<br/><strong>[&gt;]</strong> = FIRE RIGHT</li><li><strong>[A]</strong> = FIRE UP</li><li><strong>[Z]</strong> = FIRE DOWN</li><li><strong>[ENTER]</strong> = NEW GAME</li><li><strong>[CTRL]+[C]</strong> = EXIT GAME</li></ul>\r\nLAUNCH GUIDE\r\n<p>The game can be played on a real or emulated Aquarius\u00a0using the factory system base.</p>\r\nEMULATION\r\n<p>The code should work in any Aquarius emulator. The longest standing one is <strong>Virtual Aquarius 0.72a</strong>.\u00a0Others include <strong>AquaLite </strong>and <strong>AquaWX from the Mattel Aquarius Computer Group</strong><strong> on\u00a0</strong>Facebook.\u00a0These\u00a0instructions are for Virtual Aquarius, which is readily available.</p>\n<p>(<em>For any emulator, you should be able to simply insert/paste the 10 lines of source code and then type </em><strong><em>RUN</em></strong><em>.</em>)</p>\r\nVIRTUAL AQUARIUS: QUICK TYPE\r\n<p><strong>EMULATOR:</strong>\u00a0http://zophar.net/aquarius/virtual-aquarius.html\r\n</p>\n<ol><li>Launch\u00a0<strong>Virtual Aquarius</strong>\u00a0or do hard reset if already running.\r\n</li><li>Select\u00a0<strong>File \u2192 Quick Type</strong>...</li><li>Browse to \"<strong>cosmic_src.txt</strong>\" and double-click to load and run.</li></ol>\r\nVIRTUAL AQUARIUS: CASSETTE LOAD\r\n<p>\n</p>\n<ol><li>Launch\u00a0<strong>Virtual Aquarius</strong>\u00a0or do hard reset if already running.\r\n</li><li>Type:\u00a0<strong>CLOAD</strong>\u00a0and then press\u00a0<strong>[ENTER]</strong>.\u00a0\r\n</li><li>Press\u00a0<strong>[ENTER]</strong>\u00a0again to begin the cassette load operation.\u00a0\r\n</li><li>Select\u00a0<strong>File \u2192 Play Cassette File</strong>...\r\n</li><li>Browse to \"<strong>cosmic_tape.caq</strong>\" and double-click to load.\r\n</li><li>Type:\u00a0<strong>RUN\u00a0</strong>and then press\u00a0<strong>[ENTER]</strong>.\r\n</li></ol>\r\nPHYSICAL DEVICE\r\n<p>For maximum authenticity, you can run this code on a stock model of the Mattel Aquarius.\u00a0</p>\r\nDEVICE: CASSETTE LOAD\r\n<p><strong>REQUIREMENTS: </strong>Aquarius with Compatible Cassette Player &amp;\u00a0Cable.</p>\n<p><strong>Note: </strong>This process is sensitive and I only recommend it if you\u00a0 have previous experience transferring cassette data to\u00a0 Aquarius. Each sound system and output process will vary.</p>\n<ol><li>Transfer \"<strong>cosmic_tape.wav</strong>\" to cassette tape via line-out.</li><li>Place the cassette into the tape player and rewind it.</li><li>Power on the Aquarius and press <strong>[ENTER]</strong> to launch BASIC.</li><li>Type: <strong>CLOAD </strong>and then press<strong> [ENTER]</strong>.</li><li>Press <strong>[ENTER] </strong>again to begin the cassette load operation.</li><li>Press <strong>[PLAY] </strong>on the cassette player, you should see \"<strong>Found: Cosmic.</strong>\"</li><li>Once the prompt reads \"<strong>Ok</strong>\" type: <strong>RUN </strong>and then press <strong>[ENTER]</strong>.</li></ol>\r\nDEVICE: MANUAL TYPE-IN CODE\r\n<p>To experience the thrilling art of 1980s type-in coding books,\u00a0or if you just feel like an absolute madman, you can manually\u00a0enter the source code into Aquarius, letter-by-letter.</p>\n<ol><li>Power on the Aquarius and press <strong>[ENTER</strong><strong>]</strong> to launch BASIC.</li><li>Carefully type all 10 source lines from \"<strong>cosmic_src.txt</strong>\" as seen.</li><li>Type: <strong>RUN </strong>and press <strong>[ENTER]..</strong></li></ol>\r\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\r\nLINE EXPLANATION: \u00a0HIGH LEVEL\u00a0OVERVIEW\r\n<p>Below is a basic summary of what each of the 10 lines achieves. To\u00a0more fully understand each line, refer to line-by-line breakdowns\u00a0instead.</p>\n<ul><li><strong>LINE 0:</strong> Declares the main variables and array and sets defaults.</li><li><strong>LINE 1:</strong> Initializes display, generates stars &amp; begins draw loop.\u00a0</li><li><strong>LINE 2:</strong> Reads data into array and draws the on-screen spaceship.</li><li><strong>LINE 3:</strong> Starts main game loop, handles sound, game over &amp; reset.</li><li><strong>LINE 4: </strong>Calculates direction of meteor and sets base properties.</li><li><strong>LINE 5:</strong> Updates lives and sets properties for horizontal meteor.</li><li><strong>LINE 6:</strong> Handles meteor movement display and checks player input.</li><li><strong>LINE 7:</strong> Controls meteor speed and sets flag if player won round.</li><li><strong>LINE 8:</strong> Cleans up visuals for next round and handles round loss.</li><li><strong>LINE 9: </strong>Jumps to start of loop and stores values for game array.\u00a0</li></ul>\r\nLINE EXPLANATION: DETAILED EXPLANATION\r\n<p>This section contains extremely technical details of how each line\u00a0is constructed and the many intricacies required to fit it all in\u00a0720 characters of data across 10 lines. Useful for programmers,\u00a0not so much for general enthusiasts.<br/></p>\r\nLINE 0:\u00a0Variable Declarations\r\n\r\n0DIMB(22):D=12747:E=12347:T=50:L=53:M=14346:N=12774:Q=22:R=N:S=243:A=160 \r\n<ul><li>B: Array that stores 23 integers from DATA (Ship, Controls, Misc.).</li><li>D: Topmost screen location of the ship visuals (Row 10, Col 19).</li><li>E: Default screen location of incoming meteor (Row 0, Col 19).</li><li>T: Delay duration of approaching meteor; gets faster every turn.</li><li>L: Total number of lives as a character value (53=5 . . . 48=0).</li><li>M: Storage location of last pressed key for checking keyboard input.</li><li>N: Screen offset used when calculating meteor direction and display.</li><li>Q: Matches \"B\" array length, used for iteration and sound effects.</li><li>R: Calculated location for the firing edge of ship, defaults to N.</li><li>S: Base character value for drawing the ship, also used for sounds.</li><li>A: Character value for an empty tile, 32 and 160 are equivalent.</li></ul>\r\nLine 1:\u00a0\u00a0Display Initialization\r\n\r\n1B=1024:?CHR$(11):POKEE-59,46:FORI=0TOQ:Z=3-Z:POKEINT(960*RND(1)+E),46-Z \r\n<ul><li>Clears the screen, initializes data loop and draws basic HUD and bg.</li><li>The value Z is assigned an alternating value of 3 or 0 for effects.</li><li>The random starfield draws \".\" or \"+\" (46/43) to screen, based on Z.</li><li>The far top-left tile 12288 (E-59) creates border from character 46.</li><li>B: Stores 1024, the offset needed to add COLOR to POKED characters.</li><li>I: Begins the loop from 0 to 22, used to load DATA, draw ship, etc.</li></ul>\r\nLINE 2: Data Storage and Ship Generation\r\n\r\n2READX:B(Q-I)=X:D=D+X*(I&lt;13)*-1:POKED,S+Z:POKED+B,179+Z:SOUND(I,I):NEXTI\r\n<ul><li>Stores DATA values into array B for ship design, controls and more.</li><li>The array order is inversed to save a few characters on input check.</li><li>For the first 13 elements, draws to screen to construct the ship.</li><li>POKE command uses data values to draw ship from offset D (12747).</li><li>Z value is used to alternate ship char 243/246 and colors 179/182.</li><li>The result of the alternating character/color is a \"run-down\" look.</li><li>Plays a small tune while the game is initializing, repeats loop.</li></ul>\r\nLINE 3: Start of Game Loop\r\n\r\n3SOUND(Q,S+S*F):IFL=48THENSOUND(Q*2,S*4):?TAB(53)\"SCORE\";:?P:INPUTA$:RUN \r\n<ul><li>Called at end of each \"round\" when meteor reaches ship or is shot.</li><li>It plays a unique sound effect based on whether user survived round.</li><li>If the lives are 0 (character value 48), an end sequence occurs.</li><li>At game over, a final death sound is made and the score displayed.</li><li>The program then waits for user input, on [ENTER] will start over.</li><li>Pressing [CTRL]+[C] will break out of the program and exit game.</li></ul>\r\nLINE 4: Calculate Direction of Meteor\r\n\r\n4G=INT(2*RND(1)+1)*SGN(RND(1)-0.5):U=E+460*ABS(G-1):H=40*G:K=9:F=2:V=-23 \r\n<ul><li>The direction of the next meteor is determined by this unusual line.</li><li>It generates a value of -2 (RIGHT) -1 (BOTTOM) 1 (TOP) or 2 (LEFT).</li><li>In this way, the value can be passed to an array for input handling</li><li>as well as visual updates to the appropriate ship side and so forth.</li><li>The variables defined and updated on this line are given defaults</li><li>applicable for BOTTOM (-1) and TOP (1) meteor directions.</li><li>G: Direction of the next meteor, as described above (-2, -1, 1, 2).</li><li>U: Calculated vertical movement vector and location of the meteor.</li><li>H: Calculated horizontal movement vector and location of the meteor.</li><li>K: Total number of moves the meteor has before reaching the ship.\u00a0</li><li>F: Resets flag that indicates if player loses (2) or wins (1) round.</li><li>V: Offsets meteor character value to provide animated effect [O o].</li></ul>\r\nLINE 5: HUD Update and Meteor Initialization\r\n\r\n5POKEE+23,L:T=T+(G&lt;=1):C=1-(T&lt;-L):IFABS(G)=2THENU=N+(6.5*ABS(G-2)):H=G/2 \r\n<ul><li>Updates the total number of lives and space ship icon for HUD.</li><li>75% chance of decreasing\u00a0the meteor delay T by 1 so it progresses in speed.</li><li>If the user is extraordinary and gets 73+, it will double the step (hyper speed).</li><li>Checks to see if the meteor direction is LEFT or RIGHT (2, -2).</li><li>If so, updates the variables to support horizontal movement instead.</li><li>The position is recalculated so it can accommodates both directions.</li></ul>\r\nLINE 6: Meteor Movement and User Input\r\n\r\n6FORI=0TOKSTEPC:V=-V:POKEU+H*I,173+V:W=PEEK(M):O=I:IFW=B(G+2)THENF=1:O=K \r\n<ul><li>Creates a loop based on defined meteor direction properties.</li><li>Draws the meteor to screen based on the current loop index and data.</li><li>16|-16 is added to the character base of 95 to animate meteor look.</li><li>Data cell containing last pressed key is read and compared.</li><li>If the pressed key matches the meteor direction, player wins round.</li><li>I: Iterator that traverses the meteor from edge of screen to ship.</li><li>C: Step value for loop/speed. If alive after 100 turns, is set to 2 (hyperspeed!).</li><li>W: Stores the last pressed user key to compare input.</li><li>F: Flag is set to 1 to indicate the user has won the round.</li><li>O: If user has won, sets value to end of for loop for an early exit.</li></ul>\r\nLINE 7: Time Delay and Round Win\u00a0\r\n\r\n7FORJ=0TOT:NEXTJ:R=B(G+7)+N:IFF=01THENPOKE(R),213:POKE(R+B),54:F=0:P=P+1 \r\n<ul><li>In Aquarius, delays are created using simple loops like CPU cycles.</li><li>An empty loop is iterated based on duration value to slow meteors.</li><li>Each successful attack against a meteor reduces the delay 1 cycle.</li><li>If the user fires in same direction as meteor, it displays gunshot.</li><li>A point is awarded for a successful hit against the meteor.</li><li>The win flag gets set to 0 specifically for sound reasons in line 3.</li></ul>\r\nLINE 8: Cleanup and Round Loss\u00a0\r\n\r\n8POKEU+H*(I),A:I=O:NEXTI:POKE(M),A:POKE(R),A:POKE(R+B),22:IFF=2THENL=L-1 \r\n<ul><li>Overwrites last meteor and gunshot locations to clear the graphics.</li><li>Resets input value so it doesn't match any of the four directions.</li><li>Sets the color of the ship edge area to red (for visual collisions).</li><li>If the round has been lost, decrease player lives by one.</li></ul>\r\nLINE 9: Loop End and Data Structure\u00a0\r\n\r\n9GOTO3:DATA0,37,1,1,1,1,1,1,36,1,1,39,-498,9,-67,0,133,17,44,97,0,122,46 \r\n<p>Sends the program back to line 3 to begin the next round.\u00a0Contains 23 different data elements used throughout the program. The\u00a0data is stored in the array in REVERSE-ORDER for some reductions.</p>\n<p><strong>[0-4] : 46,122,0,97,44</strong></p>\n<ul><li>Stores the character codes that correspond to input.</li><li>46 = FIRE RIGHT (-2), 122 = FIRE DOWN (-1)</li><li>97 = FIRE UP (1), 44 = FIRE LEFT (2)</li><li>The middle value 0 is the base point referenced in game.</li><li>To its index gets added the direction value (-2,-1,1,2).</li><li>This allows condensed checking if user has shot meteor.</li><li>The middle value is arbitrary and is not actively used.</li></ul>\n<p><strong>[5-9] : 17,133,0,-67,9</strong></p>\n<ul><li>Stores the values of the ship edges as offsets from N.</li><li>Used to alter colors/designs on fire or collision.</li><li>The middle value 0 is the base point referenced in game.</li><li>To its index gets added the direction value (-2,-1,1,2).</li><li>The middle value is arbitrary and is not actively used.</li></ul>\n<p><strong>[10] : -498</strong></p>\n<ul><li>\u00a0Traverses back to top of screen during ship generation.</li><li>This is to override the default black cursor at the top.</li><li>In the game, this tile gets replaced with the lives icon.</li></ul>\n<p><strong>\u00a0[11-22] : 39,1,1,36,1,1,1,1,1,1,37,0</strong></p>\n<ul><li>Stores offsets from D-12747 for the ship's construction.</li><li>The ship is built as data is read &amp; stored as part of it.</li><li>Could be useful in-game to make parts of ship destruct.</li><li>Not actively called in-game due to no coding space left!</li></ul>", "metacritic": null, "released": "2021-03-17", "tba": false, "updated": "2021-03-19T07:26:20", "background_image": "https://media.rawg.io/media/screenshots/03f/03f6fc4026697b80f76bfc558d725b39.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 53, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Matt Pilz"], "genres": ["Action"], "publishers": [], "esrb_rating": null}