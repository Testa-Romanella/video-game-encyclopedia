{"id": 147380, "slug": "sokoban-puzzle", "name": "Sokoban Puzzle", "name_original": "Sokoban Puzzle", "description": "<p><strong>Jeu de sokoban/ puzzle sur quatre niveaux de difficult\u00e9.</strong><br/><strong>Commandes : </strong>touches directionnelles pour se d\u00e9placer, touche C pour recommencer un niveau.</p>\n\n<p><strong>- El\u00e8ve Premium de Gamecodeur \u00a0: </strong>depuis le 16/09/2017<br/><strong>- Langage et Framework utilis\u00e9 : </strong>Lua/ Pico8<strong>- Code / Musique et sons par : </strong>Jumborat<strong> <br/></strong><strong>- Graphismes : </strong>trouv\u00e9s sur Internet\u00a0 <strong>- Utilisation de librairies et codes externes : </strong>non<strong>- Temps pass\u00e9 :\u00a0 </strong>environ 30 h<br/><strong>- Comment as-tu (ou pas) abord\u00e9 la contrainte du th\u00e8me (PUR CODE !) : </strong>j'aurais bien fait un jeu utilisant des fonctions math\u00e9matiques pour l'affichage mais les math ne sont pas mon fort alors j'ai pr\u00e9f\u00e9r\u00e9 exploiter la solution de map de pixels propos\u00e9e par David. <strong>- Petit postmortem (avis sur le langage/framework utilis\u00e9s, difficult\u00e9s, succ\u00e8s, choix, bilan personnel rapide, etc...) : </strong>j'avais commenc\u00e9 \u00e0 faire les d\u00e9placements pixel par pixel mais pour la jouabilit\u00e9 \u00e7a ne fonctionnait pas du tout, j'ai repris le code pour faire les d\u00e9placements case par case. </p>", "metacritic": null, "released": "2017-11-29", "tba": false, "updated": "2019-01-09T12:41:06", "background_image": "https://media.rawg.io/media/screenshots/a5a/a5a4260d6aa70da362ab49980bdd20fa.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 6, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["Jumborat"], "genres": ["Puzzle"], "publishers": [], "esrb_rating": null}