{"id": 440966, "slug": "560dodger", "name": "560Dodger", "name_original": "560Dodger", "description": "<p>My submission for Tweet Tweet Jam 4, where the goal is to make a game that fits within two tweets (560 character maximum).\u00a0</p>\n<p>Controls:\u00a0</p>\n<p>W = up</p>\n<p>S = down</p>\n<p>R = reset</p>\n\n<p>Made with p5.js.\u00a0</p>\n<p>**************** Minified (554 characters): *****************</p>\n<p>let s,i,u,k,m,p,f,t,x=0,y=0,c=180,g=!0,l=250,z=50;function setup(){createCanvas(800,500),noStroke()}function draw(){if(background(c),k=keyIsPressed,t=x,g)t=x+\". hit R\",k&amp;&amp;\"r\"==key&amp;&amp;(g=!g,x=0,y=0,s=random(c));else{for(k&amp;&amp;(\"s\"==key&amp;&amp;(y+=6),\"w\"==key&amp;&amp;(y-=6)),y+=2,x+=7,i=0;i&lt;8;i++)m=i*c-x%c,p=x/l,u=floor((-x-1)/c),f=q(2),fill(0,z),rect(m,f,c,350-p),6-i<x c&&(fill(c),rect(m,f+2*q(1),9+p,.7*q(0)+p));for(fill(\"#c338\"),ellipse(l,y+l,z,z),loadpixels(),i=\"0;i&lt;16e5;i+=4)pixels[i]\">c+1&amp;&amp;(g=!0)}fill(z),text(t,z,z)}function q(e){return noiseSeed(s+e),noise(i-u)*c}<br/><br/></x></p>\n\n<p>****************\u00a0Uncompressed &amp; commented:\u00a0*****************<br/></p>\n<p>l</p><p>let x=0;\u00a0 // obstacles x displacement<br/>let y=0; // player y coordinate<br/>let c=180; // distance between obstacles, and also just the value 180<br/>let s; // noise seed<br/>let g = true; // game over<br/>let i; // a variable for my for() loops<br/>let l=250; // half canvas height... but also just the value 250<br/>let z=50; // ellipse radius<br/>let u; // noise index relative to player's displacement<br/>let k; // key is pressed<br/>let m; // screen section x coordinate<br/>let p; // scaling factor<br/>let f; // cave ceiling<br/>let t; // score text<br/>// setup()<br/>// creates drawing area<br/>function setup(){<br/>\u00a0 createCanvas(800,500);<br/>\u00a0 noStroke();<br/>}</p>\n<p>// draw()<br/>// is the game loop<br/>function draw(){</p>\n<p>\u00a0 // draw background<br/>\u00a0 background(c);<br/>\u00a0 k=keyIsPressed; // this is better than writing keyIsPressed twice<br/>\u00a0 t=x; // score text = displacement<br/>\u00a0\u00a0<br/>\u00a0 // if game is running<br/>\u00a0 if(!g){</p>\n<p>\u00a0 \u00a0 // ********* player update:</p>\n<p>\u00a0 \u00a0 // check key inputs<br/>\u00a0 \u00a0 if(k){<br/>\u00a0 \u00a0 \u00a0 if(key=='s') y+=6;<br/>\u00a0 \u00a0 \u00a0 if(key=='w') y-=6;<br/>\u00a0 \u00a0 }<br/>\u00a0 \u00a0 // make player fall<br/>\u00a0 \u00a0 y+=2;</p>\n<p>\u00a0 \u00a0 // ********* platforms &amp; background update:</p>\n<p>\u00a0 \u00a0 // move everything over to the left<br/>\u00a0 \u00a0 x+=7;</p>\n<p>\u00a0 \u00a0 // divide screen width into 8 sections<br/>\u00a0 \u00a0 for(i=0; i&lt;8; i++){</p>\n<p>\u00a0 \u00a0 \u00a0 m=i*c-x%c;\u00a0 // section X coordinate<br/>\u00a0 \u00a0 \u00a0 p=x/l; // scaling factor (platforms get larger and cave gets more narrow)<br/>\u00a0 \u00a0 \u00a0 u=floor((-x-1)/c); // u gives me the noise index for this part of the screen when subtracted from i<br/>\u00a0 \u00a0 \u00a0 f=q(2); // cave insides' distance from the top of the canvas</p>\n<p>\u00a0 \u00a0 \u00a0 // ********* draw cave inside:<br/>\u00a0 \u00a0 \u00a0 fill(0,z);<br/>\u00a0 \u00a0 \u00a0 // ( cave gets smaller as the game unfolds )<br/>\u00a0 \u00a0 \u00a0 rect( m, f, c, 350-p );</p>\n<p>\u00a0 \u00a0 \u00a0 // ********* draw platform:</p>\n<p>\u00a0 \u00a0 \u00a0 // if this is one of the first 6 platforms, don't draw the friggen platform<br/>\u00a0 \u00a0 \u00a0 if(6-i<x c){<br=\"\"></x>\u00a0 \u00a0 \u00a0 \u00a0 fill(c);<br/>\u00a0 \u00a0 \u00a0 \u00a0 rect(m,f+q(1)*2,9+p,q(0)*0.7+p);<br/>\u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 }</p>\n<p>\u00a0 \u00a0 // ********* draw player<br/>\u00a0 \u00a0 fill(\"#c338\");<br/>\u00a0 \u00a0 ellipse(l,y+l,z,z);</p>\n<p>\u00a0 \u00a0 // ********* check for game over:</p>\n<p>\u00a0 \u00a0 // load pixels<br/>\u00a0 \u00a0 loadPixels();</p>\n<p>\u00a0 \u00a0 for(i=0; i&lt;1600000; i+=4)<br/>\u00a0 \u00a0 // if we find a red value anywhere that exceeds the background color,<br/>\u00a0 \u00a0 // then the player overlapped something and game is over.<br/>\u00a0 \u00a0 if(pixels[i]&gt;c+1) g = true;</p>\n<p>\u00a0 }</p>\n<p>\u00a0 // ********* while game isn't running:<br/>\u00a0 else{</p>\n<p>\u00a0 \u00a0 // add reset instructions to score text<br/>\u00a0 \u00a0 t=x+\". hit R\";</p>\n<p>\u00a0 \u00a0 // reset game on key press<br/>\u00a0 \u00a0 if(k&amp;&amp;key=='r'){<br/>\u00a0 \u00a0 \u00a0 g = !g; // gameover is false<br/>\u00a0 \u00a0 \u00a0 x=0; // reset obstacle spawn offset<br/>\u00a0 \u00a0 \u00a0 y=0; // reset player position<br/>\u00a0 \u00a0 \u00a0 s=random(c); // pick a new noise seed to start from<br/>\u00a0 \u00a0 }<br/>\u00a0 }</p>\n<p>\u00a0 // ********* display score || reset text (running or not)<br/>\u00a0 fill(z);<br/>\u00a0 text(t,z,z);<br/>}</p>\n<p>// q()<br/>//<br/>// set the noise seed and returns the noise value at a previously specified index<br/>function q(h){<br/>\u00a0 noiseSeed(s+h);<br/>\u00a0 return noise(i-u)*c;<br/>}</p>", "metacritic": null, "released": "2020-05-05", "tba": false, "updated": "2020-05-08T06:07:21", "background_image": "https://media.rawg.io/media/screenshots/e1b/e1bbafcf69629b9c06c3a22234719ec0.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 3, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["sampc"], "genres": [], "publishers": [], "esrb_rating": null}