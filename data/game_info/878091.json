{"id": 878091, "slug": "2d-platformer-generator", "name": "2D Platformer Generator", "name_original": "2D Platformer Generator", "description": "<p>2D Platform Generator is a prototype I\u2019m building using the Unity engine\u00a0for my master\u2019s dissertation on the generation and\u00a0evaluation of platform games using rules.\u00a0The purpose of this project is to build levels for a 2D platformer using a set of grammatical rules and to determine whether the levels are playable.</p>\n\r\nList of controls:\r\n\n<ul><li>You can move using the WASD keys or the\u00a0arrow keys;</li><li>Jump and double jump using the space key;</li><li>You can wall slide by pressing the move key in the\u00a0direction of the wall;</li><li>You can jump while wall sliding.</li></ul>\r\n\r\nStudy instructions:\r\n<p>If you want to participate in my study please follow the next steps:</p>\n<ul><li>Download the prototype and run it as instructed below;</li><li>In the game click \u201cChoose Levels\u201d and play through all the levels;</li><li>Everytime you finish a level your progress is saved and you can see this progress in the Level Selection menu;</li><li>Once you completed all the levels please fill the following form: https://forms.gle/Yvw3mBLaBURTHiAy9</li></ul>\n<p>Note: If one of the levels is too difficult or impossible to complete, please skip it by going back to the Level Selection menu and selecting another level.</p>\r\n\r\nSummary of the generation process:\r\n<p>The generation beginnings with a set of graph grammar rules, below is an example of what this rules look like:</p>\n\n<em>Example of a Grammar rule system</em>\n<p>The rules are then used to create a mission map by evolving and mutating a graph called host, this process evolves finding subgraphs in the host that match the left side pater of the rule, and the replace said subgraphs with the pattern on the right of the rule.<br/></p>\n<p>The mission map serves as a template for the level's fundamental structure, including details like where the next platform should be placed in relation to the one before it, what kind of platform it is, how often enemies or coins should appear, etc.</p>\n\n<em>Example of a complete mission map</em>\n<p>After that, the mission map is utilized to create a space blueprint, during which the mission nodes are transformed into prototype structures like specific kinds of platforms or terrains. Taking into account the player size and movement\u00a0validations are made in order to find the best position to place these structures.<br/></p>\n<p>Finally, the best space map is transformed into the actual level by turning the structure prototypes into the game object that make up the level. </p>\n\r\nMessing around with the rules:\r\n<p>If you would like to explore more and change the grammar rule system for generating mission maps and get different results when generating a level in the application, please bear in mind the following guidelines:</p>\n<p>Locate the \u201c2D Platformer Generator_Data \\ StreamingAssets\u201d folder in the game's root folder.</p>\n<p>This folder contains two grammar json files, \"MissionGrammar\" and \"MissionClosingGrammar\". The first one is used to build the mission map normally, while the second one is used to finish the generation by converting any non-terminal symbols in the graph to terminal symbols.</p>\n<p><strong>Json file rules:</strong></p>\n<ol><li>Json hold an object called \"Items\" that is a list of all rules;</li><li>Each rule is composed of an id, a left side graph and a list of right side graphs;<ol><li>The rule Id is important because its used to reference the rule in the field AssociatedRules ( 2.c.ii. );</li><li>The rule Left is a graph that contains a list of vertices( 3. )\u00a0and edges( 4. );</li><li>The rule right sides or mutations are composed of a priority value, a list of AssociatedRules (\u00a02.c.ii.\u00a0), a list of vertices( 3. )\u00a0and a list of edges( 4. );<ol><li>The Priority is a percentage\u00a0of how likely this mutation should be picked over the other rights, represented with a float from 0 to 1.<br/>\n<strong>IMPORTANT:\u00a0 </strong>The sum of all right sides' priorities must be 1;</li><li>The AssociatedRules is a list of rule ids, this list is used by the application to more easily pick the next rule to apply.<br/>\n<strong>NOTE:</strong> If this list is empty the application will still check to see if it can use this rule;</li></ol></li></ol></li><li>Each vertex has a type and an alias;<ol><li>\u00a0Type is a string used in finding matching nodes to appliy rules,\u00a0</li><li>A vertex's type can be either terminal or non-terminal. Non-terminal types are just used for match finding and can be of any kind. However, the host graph must be finished with terminal nodes that are used to convert the mission map nodes into the space map prototype structures. At the moment, they must be one of the following: \"coins,\" \"enemy,\" and \"platform\";</li></ol></li><li>Each edge has reference to a vertex \"Source\" and another \"Target\", it also has a type and a slope;<ol><li>The edge type is not used right now, all edges are normal, but it will be used to associate a vertex\u00a0to another with special link, for example a lock to a key;</li><li>The slope of a edge determines the elevation of the target vertice compared to the source vertice, if the value is 1 the target vertice will be placed northeast\u00a0of the source, if the value is -1 it will be placed southeast, if the value is 0 it will be placed directly east of the source vertice;</li><li>The source and target are references to the alias of a vertice.<br/><strong>IMPORTANT:\u00a0 </strong>When replacing nodes edges coming in to the pattern are associated with the lowest alias and edges going out are associated with highest alias number.</li></ol></li></ol>\r\n\r\nCredits:\r\n<p><strong>Game Engine used:</strong> Unity;</p>\n<p><strong>Player art and script behavior:</strong> The fantastic Metroidvania Controller by Aisukaze Studio.\u00a0<br/>https://assetstore.unity.com/packages/2d/characters/metroidvania-controller-1667...<br/>\u00a0With\u00a0the attack, shoot, and dash\u00a0features turned off;</p>\n<p><strong>Coins and Enemy art: </strong>Modified version of the cute sprites in Simple 2D Platformer Assets Pack by\u00a0Goldmetal<strong>.</strong><br/>https://assetstore.unity.com/packages/2d/characters/simple-2d-platformer-assets-...<strong>;</strong></p>\n<p><strong>Trees art: </strong>Simple Trees by\u00a0Jestan.<br/>https://opengameart.org/content/pixel-art-simple-trees;</p>\n<p><strong>Rocks art:\u00a0</strong>Nature pixel art base assets FREE by\u00a0Blackspire.<br/>https://assetstore.unity.com/packages/2d/environments/nature-pixel-art-base-asse...\r\n</p>\n<p><strong>Sound\u00a0Effects:\u00a0https://mixkit.co/free-sound-effects/</strong></p>\n<p><strong>Music:\u00a0\u00a0</strong>Adventure by Alexander Nakarada | https://www.serpentsoundstudios.com\u00a0<br/>Music promoted by https://www.chosic.com/free-music/all/\u00a0<br/>Attribution 4.0 International (CC BY 4.0)\u00a0<br/>https://creativecommons.org/licenses/by/4.0/</p>\n<p><strong>Inspired by the paper:\u00a0</strong>Joris Dormans. 2010. Adventures in level design: generating missions\u00a0and spaces for action adventure games. In Proceedings of the 2010\u00a0workshop on procedural content generation in games. 1\u20138.</p>\n<p><strong>Generation engine and prototype building:</strong> Diogo Soares (me)</p>\r\n\r\nThank you so much for your participation and\u00a0feedback !", "metacritic": null, "released": "2022-11-10", "tba": false, "updated": "2022-11-11T05:55:21", "background_image": "https://media.rawg.io/media/screenshots/c45/c45bd2d095066ac6d8e7ca439205e429.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 27, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["JackGoggles"], "genres": ["Platformer"], "publishers": [], "esrb_rating": null}