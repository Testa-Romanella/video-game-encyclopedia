{"id": 751081, "slug": "harry-dotter-by-ian-king", "name": "Harry Dotter by Ian King", "name_original": "Harry Dotter by Ian King", "description": "<p>BASIC 10 Liner Contest</p>\n<p>Harry Dotter by Ian King (120 PUR Category)</p>\n<p>*******************************************</p>\n<p>Character counter, a=10,b=20..l=120</p>\r\n\r\n123456789a123456789b123456789c123456789d123456789e123456789f123456789g123456789h123456789i123456789j123456789k123456789l\r\n0d=0:V=1:W=3:Z=240:K=0:H=-1:V.23,Z,H;H;H;H;:REM0-=(((888((5((((X(((*)9*(H;8H-=(H;8H*)9*((((X(((5(((888((-=(@5EEIIMQQUYaa\r\n1DEFFNt(x,y,c):SO.1,-12*d,200,6*d:=((x&gt;c)+((x&lt;c)*-1))*-(((PO.x-64,y)&lt;4)A.(x&gt;c))OR((PO.x+64,y)&lt;4) A.(x&lt;c)))\r\n2DEFFNu(x,y,c):V.4:P.TAB(0,18);K:V.5:=((y&gt;c)+((y&lt;c)*-1))*-(((PO.x,y-32)&lt;4)A.(y&gt;c))OR((PO.x,y+32)&lt;4) A.(y&lt;c)))\r\n3B=241:V.23,B,60,126,219,147,219,-1,189,152:D=PA.+47:F.y=1TO59:D?y=D?y+40*H:N.:H=0:D?0=Z:D?60=Z:GOS.8:V.5:MOVEj,k:GC.3,5\r\n4V.B:MOVEl,m:GC.3,5:V.B:REP.:MOVEX,Y:GC.0,3:P.\"H\":n=j:o=k:p=l:q=m:IFPO.X+32,Y-26)=V K=K+1:MOVEX,Y:GC.0,0:V.Z:SO.0,-9,2,1\r\n5F=RND(12):e=-(F&lt;V+1):j=j+FNt(j,k,X)*64*e:l=l+FNt(l,m,X)*64*e:k=k+FNu(j,k,Y)*32*e:m=m+FNu(l,m,Y)*32*e:MOVEn,o:GC.3,5:V.B\r\n6IFK=V*99 OR d=1 V=V+1-d:G.3:EL.MOVEp,q:GC.3,5:V.B:MOVEj,k:GC.3,5:V.B:MOVEl,m:GC.3,5:V.B:r=X:s=Y:IFPO.X+32,Y)=5 d=1\r\n7X=X+64*FNt(X,Y,X+INKEY(-98)-INKEY(-67)):Y=Y+32*FNu(X,Y,Y+INKEY(-102)-INKEY(-71)):MOVEr,s:GC.0,0:V.Z:IFW=0 END:EL. U.0\r\n8MO.2:X=452:Y=670:l=388:m=862:j=772:k=m:V.4:C=0:S=0:F.L=1TO15:REP.:A=D?S:S=S+1:F.I=0TOA/16:C.4:V.Z;:C=C+1:N.:K=V*99-99\r\n9F.I=0TOA A.15:C.V:V.46*-(C&lt;16);:C=C+1:N.:U.C=17:P.:C=0:N.:F.E=61TO72:SO.1,-12,D?E,2:N.:W=W-d:P.TAB(7,18);V;W:V.5:d=0:R.\r\n\n<p>Harry Dotter Game Play</p>\n<p>**********************</p>\n<p>Guide Harry around the Maze using the following Keys to collect the Jello shot dots.</p>\n<p>Z: Left</p>\n<p>X: Right</p>\n<p>K: Up</p>\n<p>M: Down</p>\n<p>Beware of the pink jelly monsters, Harry will lose one of his 3 lives if he bumps into either of them.</p>\n<p>If Harry gets caught, the level will start again and you he will lose all the Jello shots he has collected in that level.</p>\n<p>The aim is to collect 99 jello shots dotted along the corridors after which, Harry will move to the next level.</p>\n<p>As the level increases, the monsters will advance towards Harry more quickly to stop him eating their jello.</p>\n<p>The game ends when all the 3 lives have been played.</p>\n<p>The game must be reloaded to play again.</p>\n\n<p>Line Count</p>\n<p>**********</p>\n<p>0 = 120 Chars</p>\n<p>1 = 106 Chars</p>\n<p>2 = 109 Chars</p>\n<p>3 = 120 Chars</p>\n<p>4 = 120 Chars</p>\n<p>5 = 120 Chars</p>\n<p>6 = 115 Chars</p>\n<p>7 = 118 Chars</p>\n<p>8 = 118 Chars</p>\n<p>9 = 120 Chars</p>\n\n<p>Line Comments</p>\n<p>*************</p>\n<p>Line0 Initialise Variables and Constants. Provide Maze and Sound data in REM statement</p>\n<p>Line1 The Xfunction(t) calculates the next x position for Harry and the monsters. Make high pitched scream sound if life lost</p>\n<p>Line2 The Yfunction(u) calculates the next y position for Harry and the monsters. Print the score</p>\n<p>Line3 Initialise and define the Jelly Monster UDG AND GOSUB the Maze Subroutine. This line is the entry point for new level or new life.\u00a0</p>\n<p>Line4 Print the monsters and H to the screen. Store last x and y positions. Detect if Harry has eaten a jello dot and increment the score and make a sound.</p>\n<p>Line5 Create a random number and moves the monsters if number is less than level+1 to make monsters move progressivley faster. Get new monster positions.</p>\n<p>Line6 Redraw the Maze if Score=99 or a monster catches Harry. Redraw monsters in new positions. If a monster catches Harry then lose a life.</p>\n<p>Line7 Detect key control for Harry and delete dot at current position.If lives=0 then END else repeat back to line 4.</p>\n<p>Line8 Initialise positions for new maze. Extract high nibble maze data from byte.Reset score to level*99 if life lost.</p>\n<p>Line9 Extract low nibble maze data from byte. Draw Maze which is run length encoded, high nibble blocks, low nibble dots. Sound the intro tune. Return from subroutine.</p>\n\n<p>Constants</p>\n<p>*********</p>\n<p>Z, 240, VDU Character Solid Block</p>\n<p>H, -1, decimal definition of 0xFF and first pass flag so offset only subtracted from REM data once.</p>\n<p>B, 241 VDU Character number for the Jelly Monster.</p>\n\n<p>Variables</p>\n<p>*********</p>\n<p>D, Data Pointer to the REM Statement data, init=PAGE+47</p>\n<p>V, Level number which increments when all dots have been eaten, init=1</p>\n<p>W, Number of Lives, init=3</p>\n<p>K, Score, init=0</p>\n<p>y, REM data counter within FOR LOOP during subtraction routine, init=1, end=59</p>\n<p>j, Monster1 current x position, init=772</p>\n<p>k, Monster1 current y position, init=862</p>\n<p>l, Monster2 current x position, init=388</p>\n<p>m, Monster2 current y position, init=862</p>\n<p>n, Monster1 last x position</p>\n<p>o, Monster1 last y position</p>\n<p>p, Monster2 last x position</p>\n<p>q, Monster2 last y position</p>\n<p>X, Harry's current x position, init=452</p>\n<p>Y, Harry's current y position, init=670</p>\n<p>r, Harry's last x position</p>\n<p>s, Harry's last y position</p>\n<p>A, Maze data read from the REM statement</p>\n<p>L, Line Counter for the Maze data within FOR LOOP, init=1, end=15</p>\n<p>C, Line Length Counter for the maze used to not print final dot, init=0</p>\n<p>S, Maze data counter, init=0</p>\n<p>I, Block and Dot FOR LOOPS to decode run length coding, init=0</p>\n<p>E, Intro Tune FOR LOOP to play the sound in sequence, init=61</p>\n<p>F, Random number generated to increase chance that the jelly monsters will be moved in each pass based on current level number.</p>\n\n<p>Flags</p>\n<p>*****</p>\n<p>d, lose a life flag which if set will restart the level and level score, init=0</p>\n<p>H, First pass flag set to 0 on line 3 after subtraction routine for Maze data.</p>\n<p>e, Allows the monsters to move if TRUE. Based on random number F and Level.</p>\n\n<p>Functions</p>\n<p>*********</p>\n<p>t(x,y,c), Passed x,y data for Monster1, Monster2 or H and a comparison x position. Returns x value as -1, 0 or +1 depending on c value and relative blue block positions.</p>\n<p>u(x,y,c), Passed x,y data for Monster1, Monster2 or H and a comparison y position. Returns y value as -1, 0 or +1 depending on c value and relative blue block position.</p>\n\n<p>\"It's not a bug, it's a feature\"</p>\n<p>********************************</p>\n<p>If the monsters move into the same position, the collision detection becomes ineffective. You can clean up the level.</p>\n<p>**.EOF IK 02_MARCH_22</p>", "metacritic": null, "released": "2022-03-05", "tba": false, "updated": "2022-03-07T06:31:40", "background_image": "https://media.rawg.io/media/screenshots/e86/e8673ccd90993bf229dd89b5d8c899e8.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 14, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}