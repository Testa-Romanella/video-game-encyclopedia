{"id": 872992, "slug": "toy-cpu-simulator", "name": "Toy CPU Simulator", "name_original": "Toy CPU Simulator", "description": "<p><strong>This is a DOS game. Download toy.exe to play\u00a0it on FreeDOS or DOSBox or any other DOS system.</strong> Compile the source code using OpenWatcom.</p>\n<p>I teach university courses part-time, and one course that I teach is MIS 100, where students learn how technology works. For our section on \"programming,\" I usually talk about programming in very abstract terms, because these are not Computer Science students. But this year, I wanted to try something new.</p>\n<p>I hoped to start the \"programming\" discussion by walking my students through a history of programming, so they could see the next step and how that worked. I tried to find a simple hobby \"educational\" computer, similar to the Altair 8800, where you input a series of program instructions in \"machine language\" (binary opcodes) using switches and LEDs. I wanted the instructions to be simple enough that my students could write a few simple programs, like\u00a0A+B=C, and use that as a starting point to write the same program in Assembly, and in C, and ... you get the idea.\r\n</p>\n<p>But I couldn't find a suitable \"Altair-like\" SBC for less than $100. There are \"Altair\" software emulators out there, but they faithfully reproduce the Altair 8800, and that was too much overhead for my needs.\r\n</p>\n<p>So I decided to write my own hobby \"educational\" computer. I call it the Toy CPU.\r\n</p>\n<p>I wrote a rough prototype on DOS using character mode, but you couldn't enter a program on the \"front panel.\" Instead, you had to hard-code a program into memory, and recompile to run that. It was very primitive, but enough to know that it worked.\r\n</p>\n<p>Later, I completely rewrote the Toy CPU using Linux ncurses. This was still a prototype, but this time you could enter a program on the \"front panel\" by \"flipping bits.\" It looked okay in ncurses, but I really wanted a graphical program.\r\n</p>\n<p>Open Jam 2022 came up at the right time! I decided to completely rewrite the Toy from scratch, using FreeDOS and other open source tools. I don't use graphical assets per se; instead, the Toy draws the interface elements using basic graphical functions from OpenWatcom (open source). If you're curious: I used FED (open source) as my editor. I ran FreeDOS inside VirtualBox (open source) running on top of Fedora Linux (open source). Everything in the pipeline was open source.\r\n</p>\n\n<p>The theme for Open Jam 2022 is \"Light in the Darkness,\" which is a perfect fit for the Toy CPU, because of all the blinkenlights!\r\n</p>\r\nMore information, including opcodes and sample programs you can try out are on my GitHub project.", "metacritic": null, "released": "2022-10-30", "tba": false, "updated": "2022-10-31T04:47:38", "background_image": "https://media.rawg.io/media/screenshots/61f/61ff5148df86f12517b3220e89e5821a.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 22, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["jimhall"], "genres": ["Simulation"], "publishers": [], "esrb_rating": null}