{"id": 584039, "slug": "life-raft-rescue-teaser-art-by-dd8", "name": "Life Raft Rescue Teaser Art by DD8", "name_original": "Life Raft Rescue Teaser Art by DD8", "description": "<p>LIFE RAFT RESCUE TEASER ART</p>\n<p>Roman Werner submitted a game called Life Raft Rescue to the 2021 10 Liner\u00a0competition. On February 4th, 2021 he tweeted a full screen teaser image\u00a0https://twitter.com/romwer/status/1357430676396646407 to \u201cgive the feeling for the\u00a0setting of the game.\u201d I replied asking if he was planning on trying to also make the\u00a0image into a 10 line submission to the contest. He said he had not considered it, but\u00a0thought maybe it was worth a try.</p>\n<p>For some reason I kept thinking about it and due to the number of characters and colors\u00a0thought maybe some loops and compressed data could work. I tried many different\u00a0methods and kept coming up 150-200 bytes too long for an 80 character/line entry. After\u00a0much frustration I thought maybe I could break the image into different types of routines;</p>\n<p>repetitive characters and detailed petscii. The sky and water was the bulk of the image\u00a0and used very few characters and very few colors. This could be done with compressed\u00a0data and a couple loops and then maybe there would be space to print petscii color and\u00a0graphics for the ship, helicopter and life raft.</p>\n<p>This concept ended up working for this image. I printed screen code characters as\u00a0compressed data, then read it back into arrays. I then uncompressed and poked the\u00a0data in a couple loops to draw the sky and sea. There was just enough space remaining\u00a0to print the ship, helicopter and life raft.</p>\n\n<p>COMPRESSION</p>\n<p>Each byte of data for sky and sea is split into 4 bit pieces. The high nibble represents\u00a0the character and the low nibble is the number of iterations of the character, so 16\u00a0possible characters and 16 possible iterations. Character 0 is reserved as color flags, so\u00a0any number under 16 will change the color variable and then read the next byte of data.</p>\n<p>It took 254 bytes to encode the sky and sea. I printed this data as petcsii to the screen\u00a0and then ran a loop to read the data into an array. I chose the most used characters of\u00a0the sky and sea to be in the character array which was 15 characters plus the empty\u00a0slot for the color flag.</p>\n<p>Thanks to Roman for the wonderful image with some historical meaning (check his\u00a0game info page, Life Raft Rescue, for a link to the history) and for giving me his blessing\u00a0to submit this in the competition in the LOOK category.</p>\n\n<p>GENERAL CODE DESCRIPTION</p>\n<p>Lines 0-3 - printed petscii data</p>\n<p>Line 4 - end of petscii data, dimension arrays and load data into arrays</p>\n<p>Line 5 - Main loop start, check color flag, petscii for ship as data statement</p>\n<p>Line 6 - Iteration loop, poke color and character to screen, check for end of data flag</p>\n<p>Line 7 - Read ship data as strings and print, print helicopter blades and upper section</p>\n<p>Line 8 - Print most of the rest of the helicopter</p>\n<p>Line 9 - Print last of helicopter and then life raft, wait for keyboard input, clear screen</p>\n\n<p>DETAILED CODE DESCRIPTION</p>\r\n\r\nLines 0-3 - Print data\r\nLine 4 Print last few data characters\r\ndId(254),h(254) - Dimension data and character arrays\r\ns=1023 - screen location variable minus 1\r\nfOi=1to254 - loop to read data from screen\r\nd(i)=pE(s+i) - data array from first 254 characters on screen\r\nh(i)=pE(1277+i) - character array from 16 characters on screen\r\nnE - end of loop\r\n?\u201d{clr} - clear screen (don\u2019t need end quote if last thing on line)\r\nLine 5 a=a+1 - counter for pulling data from data array\r\nifd(a)&lt;16tHc=d(a) - color flag - changes the color variable if data is less than 16\r\ngO5 - go back and increment the counter to get next data if color flag occurred\r\ndA\u201d...\u201d - ship data strings\r\nLine 6 fOj=1to1+(d(a)aN15) - loop for iterations based on low nibble of data (AND15)\r\ns=s+1 - increment screen location variable\r\npO54272+s,c - poke color into screen ram\r\npOs,h(d(a)/16+1) - poke character to screen (upper nibble, decimals ignored)\r\nnE - end of iteration loop\r\non-(d(a+1)&lt;&gt;2)gO5 - check for end of data flag and go back if not 2\r\nLine 7 rEa$,b$ - read in ship strings\r\n?sP33)a$sP26)b$ - print ship strings\r\n?sP5)\u201d...\u201d - print helicopter blade\r\n?\u201d...\u201d - print helicopter tail\r\nLine 8 print rest of helicopter and life raft\r\nLine 9 More helicopter and life raft\r\nwA198,1 - wait for key press before continuing\r\n?\u201d{clr}{lt blue}\u201d - clear screen and change cursor to light blue", "metacritic": null, "released": "2021-04-06", "tba": false, "updated": "2021-04-13T02:07:50", "background_image": "https://media.rawg.io/media/screenshots/ca4/ca46f85fdc4110fd3709b536e7852d2c.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 43, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": [], "publishers": [], "esrb_rating": null}