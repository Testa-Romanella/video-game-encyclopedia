{"id": 759424, "slug": "give-him-the-hook-10-by-commocore", "name": "Give him the Hook 10 by Commocore", "name_original": "Give him the Hook 10 by Commocore", "description": "<p>Give Him The Hook</p>\n<p>============</p>\n<p>This is my third ever 10-liner written in BASIC for Commodore 64.</p>\n<p>This game has been submitted to the Basic 10-Liner Contest 2022 in PUR-80 category.</p>\n<p>Inspired by the Polish poster from the 70s entitled \"Klowni\" by Jan M\u0142odo\u017ceniec for \"The Clowns\" movie directed by Federico Fellini.</p>\n\n<p>Plot</p>\n<p>----</p>\n<p>This is the first game in The Trick Triptych series. A promising clown (although that was what they said about him 20 years ago),\u00a0got a little bit funky while sipping some suspicious potion from a flask during the circus show. As his performance could at best be described\u00a0as dull, uncreative and blurpy, people started to yell, and some unidentified flying objects (UFOs) started to fly here and there.</p>\n<p>The only thing left to do was to remove the clown from the stage...</p>\n<p>Thankfully, you have just the right tool for the job: a Vaudeville hook. Be aware that this is part of the tradition to use the hook if necessary!</p>\n<p>As the Art &amp; Tricks &amp; Juggling &amp; Acrobatics &amp; Keep The Animals Happy director of the circus, you know exactly what you should do.</p>\n<p>Try to pull away the clown from the stage: \"Give him the hook!\", the audience is screaming.</p>\n<p>He's a stubborn fellow though, so don't be surprised when he tries to get back on stage. And when he does, you'll have to start with this comedy all over again!</p>\n\n<p>Screen</p>\n<p>-------</p>\n<p>In the top-left corner you can see the current level. As you progress, the distance of the hook increases.</p>\n\n<p>Controls</p>\n<p>--------</p>\n<p>Use joystick in port 2. To control the position of the hook, move the joystick to the left or right. To release the hook, press the fire button.</p>\n\n<p>Tips &amp; Tricks</p>\n<p>--------</p>\n<p>Try to aim at the clown's back foot.</p>\n\n\n<p>Code description</p>\n<p>----------------</p>\n<p>The great challenge about this 10-liner was that I had no place for IF statements (as in such a case, no further code can be executed after). It made me think</p>\n<p>to write all conditions in states, where each state is a combination of mathematical expressions where one part might be excluded or included based on the</p>\n<p>multiplication of a condition. It's always interesting to look at things in another way, and this is what I loved about this challenge. For example,</p>\n<p>determining the next game level in a single condition was a pretty neat thing to do:</p>\n<p>```</p>\n<p>V=-(G=-1)*(V*-(G=-1))+1</p>\n<p>```</p>\n<p>In case G is 0, the level will be reset to 0. In case it's -1, the level will increase by 1.</p>\n<p>It's so funny I fell victim to zero-based counting. When I thought that the game was finished, I realised that there were not</p>\n<p>10 but 11 lines, starting from 0! So I needed to reduce one full line of BASIC code. Because of that I wasn't able to add any sounds,</p>\n<p>something I wished to have initially. Neverthless, I hope that this game is still fun to play!</p>\n\n<p>Line by line code overview</p>\n<p>-------------------------</p>\n<p>- Line 0:</p>\n<p> - Building the hook using a FOR loop, also the string used during the animation when moving the hook up, initialisation of the starting level</p>\n<p> - Storing the top part of the clown (in A$) that is stored in DATA (line 9)</p>\n<p> - Defining the string used to control hook's vertical position (in U$)</p>\n<p> - Setting the screen memory address (in S)</p>\n<p>- Line 1:</p>\n<p> - Setting up the middle part of the clown (in B$)</p>\n<p>- Line 2:</p>\n<p> - Setting up the bottom part of the clown in normal state (in C$(0))</p>\n<p> - Setting up few variables (described in the variables overview below)</p>\n<p>- Line 3:</p>\n<p> - Setting up the bottom part of the clown in jump state (in C$(1))</p>\n<p> - Setting up few variables (described in the variables overview below)</p>\n<p> - Clearing the screen</p>\n<p> - Displaying the current level</p>\n<p>- Line 4:</p>\n<p> - The loop of the game starts here</p>\n<p> - Setting up the bottom part of the clown in pulled from the stage state (in C$(2))</p>\n<p> - Reading the joystick in port 2</p>\n<p> - Setting up the colour of the screen background and border (there was no room left to put it before the game loop)</p>\n<p>- Line 5:</p>\n<p> - Reading the joystick port 2 address</p>\n<p> - Setting the horizontal position of the hook (in L), it also includes the limit and that the hook cannot be moved after releasing it (if M is -1 then the fire button has been pressed)</p>\n<p> - For the E variable (vertical position of the hook), if the fire button was pressed this value will decrease so hook will move up until it reaches E = 0</p>\n<p>- Line 6:</p>\n<p> - In case E = 0, it means that the hook was already released and it reached the top so the horizontal position will be adjusted as well to play the animation of moving the hook to the right</p>\n<p> - Displaying the clown in the right position on the screen</p>\n<p> - Displaying the hook</p>\n<p>- Line 7:</p>\n<p> - Randomising the next position of the clown</p>\n<p> - Adjust the next position of the clown only if it fulfills a) horizontal position limits (X &gt; 5 and X &lt; 20) b) that no jump is performed (variable U) c) that the hook didn't reach the top (variable E)</p>\n<p> - Keeping the state in G variable if the hook caught clown's foot (when X = L)</p>\n<p>- Line 8:</p>\n<p> - Clearing the next line of the hook in case the animation of moving hook up is performed</p>\n<p> - In case G is set, clown will be pulled together with the hook (X will increase)</p>\n<p> - U contains the state if the clown jumps (when the hook was close to the clown horizontally (ABS(X-L)&lt;5) and the hook is already on the top (E=0))</p>\n<p> - Calculate the state of which bottom part of the clown should be displayed (depends on the U for clown's jump and G for clown's being pulled)</p>\n<p>- Line 9:</p>\n<p> - In case the hook still didn't reach the top or that the hook horizontal position is in the range, continue the loop by going to line 4</p>\n<p> - Otherwise, calculate the next level (if the clown was pulled, level will increase, otherwise it will be resetted to 1), go to line 2 to initialise the level</p>\n<p> - At the end, DATA containing the top part of the clown that is read in line 0</p>\n<p>Variables overview and some tricks used</p>\n<p>---------------------------------------</p>\n<p>- P$ - string with the hook</p>\n<p>- G$ - string that clears the old hook position</p>\n<p>- V - starting level</p>\n<p>- A$ - the top part of the clown</p>\n<p>- U$ - string used for the vertical position of the hook</p>\n<p>- S - screen memory address, used for POKEs</p>\n<p>- B$ - the middle part of the clown</p>\n<p>- C$(0-2) - graphics for the bottom part of the clown for each state (see: variable A for states description)</p>\n<p>- A - animation state for the bottom part of the clown: 0 - normal, 1 - clown jumps, 2 - clown pulled from the stage</p>\n<p>- E - vertical position of the hook, also the current level, setting up depending on the result from line 9</p>\n<p>- G - keeps the state if clown is pulled from the stage</p>\n<p>- L - hook horizontal position</p>\n<p>- M - keeps the state if the joystick fire button was pressed</p>\n<p>- X - clown horizontal position</p>\n<p>- J - reading the joystick port 2 address (56320)</p>\n<p>- K - used for determining the next position of the hook, also re-used for randomising the next horizontal position of the clown (-1, 0 or 1)</p>\n<p>- U - keeps the state if clown jumps</p>", "metacritic": null, "released": "2022-03-22", "tba": false, "updated": "2022-03-25T10:48:38", "background_image": "https://media.rawg.io/media/screenshots/8c0/8c04555e5eef155a45e497aecc7835de.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 4, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}