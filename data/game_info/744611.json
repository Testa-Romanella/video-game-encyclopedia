{"id": 744611, "slug": "runny-cone-prototype", "name": "Runny Cone Prototype", "name_original": "Runny Cone Prototype", "description": "<p><em>Controls: [SPACE] to jump / evade the incoming cone</em></p>\n<p><strong>Purpose: Animations, particle effects, and sounds<br/></strong></p>\n<ul><li>Create a background that loops seamlessly, with endless obstacles, but stops when the player dies</li><li>Player should feature a jumping animation and a death animation</li><li>When running, dirt particles are emitted from the player</li><li>When dying, smoke particles are emitted from the player</li><li>Music is heard throughout the game</li></ul>\n<p><strong>Methodology: </strong><br/></p>\n<ul><li>C# Scripting in Visual Studio:\r\n<ul><li>To get the character to jump, use <strong>AddForce</strong> on the rigid body.<strong> ForceMode.Impulse</strong> will send force immediately. Tweak using <strong>Physics.gravity,</strong> which will help you adjust Unity's gravity.</li></ul><ul><li>Use an <strong>If Statement</strong> to see when the background is halfway from its starting position, then have it go back to the starting position</li></ul><ul><li>Use a <strong>boolean </strong>to determine whether the game is over or not. Include this boolean in the If statements (using a <strong>&amp;&amp; operator</strong> or<strong> == operators</strong>) to prevent the player to jump when game is over, to stop the background from moving, and to stop the cones from spawning</li></ul><ul><li>To animate, reference the <strong>Animator </strong>class, get the component, and call on the specific state you want to activate, like jump or death</li></ul><ul><li>To add particles, reference the<strong> Particle System</strong> class, and use its Play and Stop functions to determine when the system should be activated / deactivated. Ex: If the player is running, dirt comes off of their feet, but not when they are in the air. </li></ul><ul><li>For the explosion and jumping sound, reference the <strong>Audio</strong>\u00a0<strong>Clip</strong> class as well as the <strong>Audio Source </strong>class, get the <strong>Audio Source </strong>component in start, then use your Audio Source variable and the\u00a0<strong>Play One Shot</strong> ability to play the appropriate clip.</li></ul></li></ul>\n<ul><li>Unity:<ul><li>Adjust the parameters in the Animator to use different states, like selecting the starting state, and the speed of the states. </li></ul><ul><li>To get sound, add an Audio Source component to the player for the jumping / exploding sound. Add an Audio Source component to the main camera to get music throughout the game</li></ul></li></ul>\n<p><strong>Plans for Future improvement:</strong></p>\n<ul><li>Create a UI system that features a stopwatch. The timer will stop when the player hits an obstacle. Ideally the player's best time is saved for that session.</li><li>Create objects for the player to collect and stack up on points.</li><li>Obstacles should variate in size and at random distances to make them more unpredictable </li></ul>", "metacritic": null, "released": "2022-02-22", "tba": false, "updated": "2022-02-25T08:56:40", "background_image": "https://media.rawg.io/media/screenshots/c93/c934135488f9ae0b60af207429dd2ffe.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 69, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["tedman"], "genres": ["Platformer"], "publishers": [], "esrb_rating": null}