{"id": 802577, "slug": "bonkd-audio-visualizer", "name": "Bonk'd Audio Visualizer", "name_original": "Bonk'd Audio Visualizer", "description": "<h3>Features</h3>The Bonk'd Audio Visualizer is a 3D audio visualizer written in C/C++ with Vulkan, designed for Linux first, Windows second. It is designed to be lightweight, fast, and low latency. Future planned features include:<br/><br/>-Desktop background rendering<br/>-Customizable colors<br/>-Customizable speed (can be customized with command line options right now)<br/>-Customizable wave heights/sample rate/sample size (also customizable via command line options right now)<br/><br/>Stretch goals depending on reception:<br/><br/>-VR<br/>-Control of viewport<br/>-Gamification of some sort<h3>Notes</h3>If you're running on Linux by default the application uses PipeWire, an option to use straight ALSA is available with -alsa in the launch options, it presently connects to the mic instead of the default output device, a fix is in the works. Testing was completed on Fedora 36, but any linux with Pipewire and proper Vulkan drivers should work with the default settings just fine.<br/><br/>Many features are available through launch parameters, customization of the rendering, swapping starting monitors, switching audio interface, and forcing usage of integrated or dedicated GPUs are just a few of the available options through launch parameters. These features are being moved into a config file, and then later into a GUI application, but have been provided as launch options to give access to them as early as possible. <br/><br/>For convenience, the launch parameters are listed below, and are included in the Manual.txt in the software installation.<br/><br/>Available options:<br/><br/>Option syntax &gt;&gt;&gt;&gt; description<br/>-wh (integer)  &gt;&gt;&gt;&gt;&gt; set wave height, default is 25<br/>-a (real number)  &gt;&gt;&gt;&gt;&gt; set alpha (transparency) default 0.25<br/>-mt (integer)  &gt;&gt;&gt;&gt; set move time default 6<br/>-alsa &gt;&gt;&gt;&gt;&gt; use ALSA instead of PipeWire (linux only)<br/>-window\t&gt;&gt;&gt;&gt;&gt; run windowed instead of fullscreen<br/>-fi &gt;&gt;&gt;&gt;&gt; force use of integrated GPU*<br/>-fd &gt;&gt;&gt;&gt;&gt; force use of dedicated GPU*<br/>-debug &gt;&gt;&gt;&gt;&gt;&gt; print debug output to bav_log.log<br/>-display &gt;&gt;&gt;&gt;&gt; set which display to render to (fullscreen only)<br/><br/><br/><br/>*Steam appears to \"hide\" GPUs from Vulkan when multiple GPUs are present on a machine. You can run the program from command line/terminal with the force parameters and they will function as expected, but through Steam you may run into trouble with them. There may be ways to circumvent this with environment variables or how you run steam, but I've not found a surefire way to do so, ymmv.<br/><br/>Trailer music graciously provided by NCS, link to song: https://www.youtube.com/watch?v=K4DyBUG242c", "metacritic": null, "released": "2022-06-16", "tba": false, "updated": "2022-06-17T09:35:27", "background_image": "https://media.rawg.io/media/screenshots/83b/83b9c6b043ea62db8eac0c6e074fbc80.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 69, "game_series_count": 0, "reviews_count": 0, "platforms": ["Linux", "PC"], "developers": ["Bonk'd Industries"], "genres": ["Casual", "Indie"], "publishers": ["Bonk'd Industries"], "esrb_rating": null}