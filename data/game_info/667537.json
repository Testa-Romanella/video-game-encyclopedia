{"id": 667537, "slug": "simple-ecs-implementation", "name": "Simple ECS implementation", "name_original": "Simple ECS implementation", "description": "<p>A small entity-component-system project was made as a demo for my upcoming game. Important things to note:<br/></p>\n<ul><li>Entity: simple unique ID which is an integer.</li><li>Component: sets of data grouped together.\r\n</li><li>System: process logic based on entities' components information.\r\n</li><li>All of these properties have manager classes. They are grouped by a thin wrapper at the end, which functions as a minimal engine.</li><li>Event: ways for systems to communicate. For eg. an entity touched the ground, Collision system would process and send 'touchGround' event message\u00a0to Gravity system, so player's double jump is reset. This is similar to the Observer pattern but easier.</li></ul>\n<p>I only implemented Rigid Body, Input, Collision and Health systems.\r\n</p>\n<p>But I think it can be extended for further developments if wanted.\r\n</p>\n<p>The project uses SFML for graphics and player's events and inputs listener.</p>\n<p>The project is really boring regarding playable aspects. More than hopping around, all you can do is edit the configuration file to define your map.\u00a0But source code\u00a0has advanced collisions detection and resolve, a simple and efficient ECS concept, and that is what I want to share.\u00a0</p>", "metacritic": null, "released": "2021-09-17", "tba": false, "updated": "2021-09-20T07:12:42", "background_image": "https://media.rawg.io/media/screenshots/cfa/cfabde992b6483b7defa17551623a1cb.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 9, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Ryu"], "genres": [], "publishers": [], "esrb_rating": null}