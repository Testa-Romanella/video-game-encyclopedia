{"id": 300443, "slug": "mass-destruction-itch", "name": "Mass Destruction (itch)", "name_original": "Mass Destruction (itch)", "description": "<p>Version 1.1 : l\u00e9g\u00e8re refonte de la physique des particules.\r\n</p>\n<p>D\u00e9placements avec fl\u00e8ches directionnelles et tir <strong>charg\u00e9</strong> avec barre espace.</p>\n<p>-----------\r\n</p>\n<p>- El\u00e8ve Premium de Gamecodeur \u00a0: 1 an et quelques mois\r\n</p>\n<p>- Langage et Framework utilis\u00e9 : Monogame C#\r\n</p>\n<p>-Graphismes : banque de sprites de Metal Slug 2 sur www.spriters-resource.com\r\n</p>\n<p>- Musique :</p>\n<ul><li>Menu : Hollywood Heights (Mitch Murder)</li><li>Phase gameplay : Bloodline (Scattle)</li></ul>\n<p>- Sons : trouv\u00e9s sur SoundBible et retravaill\u00e9s (bruit de gatling faites avec un son d\u2019aspirateur + fusil d\u2019assaut )\r\n</p>\n<p>- Utilisation de librairies et codes externes : Non</p>\n<p>- Temps pass\u00e9 : 60 heures environ\r\n</p>\n\n<p>Salut,<br/></p>\n<p>J'ai post\u00e9 un devblog qui parle des nouvelles probl\u00e9matiques abord\u00e9es dans cette GameJam, soit les effets et physique de particules et la modification de textures.<br/></p>\n<p>\u00a0https://www.gamecodeur.fr/devlogs/57840/</p>\n<p>Pour un jeu de tank, c'\u00e9tait l'occasion parfaite d'int\u00e9grer un environnement destructible. L'id\u00e9e de d\u00e9part \u00e9tait de faire un jeu type Worms avec pourquoi pas, armes multiples en tours par tours contre des ia.</p>\n<p>Mais comme c'est pas un genre de jeu tr\u00e8s amusant \u00e0 jouer tout seul, je suis parti sur un side scroller.</p>\n\n<p>J'ai cr\u00e9\u00e9 un syst\u00e8me de g\u00e9n\u00e9ration de particules pour les explosions et le vent de sable, puis j'ai commenc\u00e9 \u00e0 r\u00e9fl\u00e9chir \u00e0 la physique d'un explosion et j'en suis arriv\u00e9 au r\u00e9sultat qui est dans le jeu.<br/></p><p>Basiquement une animation se lance au point d'impact, suivi d'une alt\u00e9ration de la texture du sol et une g\u00e9n\u00e9ration de particules qui est expliqu\u00e9e dans mon devblog avec de \"tr\u00e8s jolis\" sch\u00e9mas.<br/></p>\n<p>Alors un obus ne fait pas un joli trou bien semi circulaire quand il explose, mais c'est la solution la plus simple que j'ai trouv\u00e9. Une autre piste un peu bidouille serait peut d'utiliser un gabarit ovo\u00efde avec rotation en rapport avec l'angle de p\u00e9n\u00e9tration du projectile. <br/></p>\n<p>Ou alors encore mieux d'utiliser les shaders pour g\u00e9rer une vraie physique du d\u00e9placement du sol lors de l'impact.<br/></p>\n<p>\n</p>\n<p>\n</p>\n<p>Bref, le sujet m'a vraiment passionn\u00e9.</p>\n<p>Sinon, la gestion des collisions avec tout ce qui touche le sol est g\u00e9r\u00e9e au pixel pr\u00e8s, via des tableaux de couleurs impl\u00e9ment\u00e9es via la m\u00e9thode getData des textures (dessin\u00e9es \u00e0 la main en utilisant une texture de sol trouv\u00e9e sur itchio)</p>\n<p>Nouveau pour moi aussi, les formules de math qui permettent de calculer un angle entre des vecteurs, arc tangente, et la formule qui permet de r\u00e9cup\u00e9rer un vecteur via un angle. \u00c7a m'a servi pour la g\u00e9n\u00e9ration de particules avec un angle de dispersion ainsi que pour positionner le canon du tank, l'origine des projectiles et les flammes qui sortent du canon.<br/></p>\n<p>Bon jeu a+</p>", "metacritic": null, "released": "2019-03-04", "tba": false, "updated": "2019-03-08T04:44:18", "background_image": "https://media.rawg.io/media/screenshots/7e0/7e02ba17836263239e371b5557aa48b8.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 26, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["dreyves"], "genres": ["Action", "Shooter"], "publishers": [], "esrb_rating": null}