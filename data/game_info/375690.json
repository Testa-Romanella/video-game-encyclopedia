{"id": 375690, "slug": "eae6320_assignment4_writeup", "name": "EAE6320_Assignment4_WriteUP", "name_original": "EAE6320_Assignment4_WriteUP", "description": "<p><strong>Details of Assignment:</strong>\n</p>\n<ul><li>The main part of the assignment was to pass data from game to graphics using threads and reference count the data so that it is not override by new data\r\n</li></ul>\n<p><strong>Running Part of Assignment:</strong>\n</p>\n<ul><li>There are 4 different changes that occurs in the game\r\n  </li><li>2 of them are based on user Inputs and other 2 are based on time\r\n  </li><li>Space-bar is used to remove the bottom triangle object\r\n  </li><li>Tab is used to use a different effect on the top square\r\n  Based on time a third object will be visible, while the object is visible the bottom triangle will have 1 effect and, the bottom triangle will have different effect when the third object is not visible</li></ul>\n\n<p><em>Fig 1. Default state of background</em>\n</p>\n\n<p><em>Fig 2. Lower object not visible when space is pressed</em>\n</p>\n\n<p><em>Fig 3. Square has different effect when tab is pressed</em>\n</p>\n\n<p><strong>How I reach at this Point:</strong>\n</p>\n<ul><li>The biggest challenge I faced doing the assignment is know where the data need to be initialized in the game code\r\n  </li><li>After words I had to try many ways to make the data pass because of a silly mistake I did to create my new object effect pair structure\r\n  </li><li>I also faced few difficulties while cleaning my data, as I was not cleaning the thread cache data on graphics cleanup\r\n  Finally, to reduce my size of object I did few changes to my cache data</li><li>Also, for passing my object-effect pair I have create a new struct with pointers to object and effect, I am creating an object array and a graphics array through which I create different pairs of object and effect and pass their reference to object-effect pair\u00a0\u00a0</li></ul>\n\n<p><em>Fig 4. Submitting my back-buffer color to graphics for caching</em>\n</p>\n\n\n<p><em>Fig 5. Passing reference to the object-effect pair\u2019s object\u00a0</em></p>\n\n<p><em>Fig 6. Passing the object-effect pair structure array to graphics for caching it</em>\n</p>\n<ul><li>Threads are used for doing multiple tasks at the same time, there by utilizing both application and engine to maximum potential.\r\n  </li><li>But, both engine and application share the same data between them there by each have to wait for other to do their work.\r\n  </li><li>By caching we are actually making the application to make data for current frame cache it and start working on the next frame, while at the engine side it will start using the cache data without waiting for application to pass the data.\r\n  </li><li>Doing do actually leads to latency so having more cache data will increase the amount of latency in the game.\r\n  </li></ul>\n<p>\u00a0\r\n  </p>\n<ul><li>My effect class object takes <strong>20 bytes of data in OpenGL</strong> and <strong>16 bytes of data in Direct 3D</strong>.\r\n  </li><li>For both Direct 3D and Open GL there are 4 common variables which holds the shader data (vertex shader, fragment shader, rendering state and reference count), each being 4 Byte, while Open GL has extra 4 bytes for program ID which hold data for your program and links your shaders to it.\r\n  </li><li>My Graphics class object takes <strong>20 bytes of data in OpenGL</strong> and <strong>32 bytes of data in Direct 3D</strong>.\r\n  </li><li>My Geometry class has 4 variables for both Direct 3D and Open GL, 2 common and 3 separates.   </li><li>The common variable is the length for index buffer and reference count which are 4 Bytes each.   </li><li>The need for index count is because we need to know how many objects are created which can be easily know by length of index buffer as that many vertices needs to be drawn on the screen.\u00a0   </li><li>Open GL has 3, 4 Byte variable, each for storing ID for index buffer, vertex buffer and vertex array.   </li><li>On the other hand, Direct 3D have 2 pointers to the buffers (index and vertex buffers) which are 8 Bytes each and a 4 Bytes vertex format and 4 bytes are wasted extra because the buffer size becomes a block of 8 Bytes each there by 28 bytes used and 4 bytes wasted.\r\n  </li><li>My cache data was <strong>originally 360(180*2) bytes for Open GL and 416(208*2) Bytes for Direct 3D</strong>, but I reduce them to <strong>320(160*2) and 356(176*2) bytes respectively</strong>.\r\n  </li><li>My cache data was storing 3 float variables which were 4 bytes each, and separate pointer arrays for graphics and effects which were 8 (for Direct 3D) or 4 (for Open GL) X size of array, in my case 24 bytes and 12 bytes respectively, and a 144 bytes frame data\r\n  </li><li>To reduce them I change the 3 color float variables to a color class pointer which reduced the size by 8 bytes in Open GL and 4 Bytes in direct 3D\r\n  </li><li>Then, I change separate effects and object pointer arrays to a single object-effect pair pointer array which reduce 12 Bytes in Open GL and 24 Bytes in Direct 3D.   </li><li>Also, these values don\u2019t include the actually memory used by pointers as the as the object will store only the 8/4 bytes data as that much memory is needed for object to get all the data.   </li></ul>\n<p>\u00a0\r\n  </p>\n<p><strong>Optional Challenge:</strong>\n</p>\n<ul><li>For animating the background, I am actually using the GetElapsedSecondCount_Simulation function from cbApplication and using sin functions I am creating new values for color each frame.\r\n  </li><li>For changing the object or effect based on time, I am getting the simulation time and making the object render for 1 second and then make it not render for another second\r\n</li></ul>", "metacritic": null, "released": "2019-09-19", "tba": false, "updated": "2019-09-20T06:10:15", "background_image": "https://media.rawg.io/media/screenshots/19e/19e44de99bf71a910220e3220ea19462.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 2, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["M17D05"], "genres": [], "publishers": [], "esrb_rating": null}