{"id": 596627, "slug": "defi-battles", "name": "DeFi-Battles \u2694\ufe0f", "name_original": "DeFi-Battles \u2694\ufe0f", "description": "<p>NOTE : <br/>1:\u00a0\u00a0DeFi Battles is deployed on Rinkeby testnet.\u00a0<br/>2. Generating a Verifiably random NFT takes 2 mins of time and 2 transactions<br/>3. The game is a WIP and deployed on IPFS. We are also storing all NFT data on IPFS using nft.storage<br/><br/>GitHub repo :\u00a0DeFi-Battles (github.com)<br/>On IPFS :\u00a0React App (fleek.co)<br/>IPFS CID :\u00a0QmTWSQCaKrniX6RTBdYkVhrUyvMdCJ9sUaLCt7ZdVEKpqT<br/><br/>DeFi-Battles introduces a gaming aspect of the NFTs. Instead of having them as a collectible sitting in your wallet, now they can be used to battle other players' NFTs and earn rewards \u2728</p>\n<p>Much of the world is yet to be introduced to cryptocurrencies, DeFi and NFTs. Our aim with this project is to onboard them to the world of crypto with unique characters, introduce them to DeFi, deposit yields &amp; staking in battles.\r\n</p>\n<p>All the NFT characters on DeFi-Battles are rare and unique. All the monster characters are generated from a DNA that's uniquely generated by the Chainlink VRF. The DNA also gives them a type such as fire, water, grass etc. These characters are minted as an ERC721 token and the tokenURI is stored on IPFS. These NFTs can then be made to battle other players' NFTs by staking ETH in a winner-takes-all battle bet!\r\n</p>\n<p>We also introduced various interesting aspects in this platform such as :\r\n</p>\n<ol><li>Player VS Player battles - In which players battle other players' NFTs and earns rewards (Operational)\r\n</li><li>Player VS Boss Battles - in this mode the boss is an NFT sponsored by advertisers and other players Battle and earn rewards based on contribution (WIP)\r\n</li><li>The money deposited to purchase NFTs goes into an Aave pool and generates interest, hence appreciating the NFT value (WIP)\r\n</li></ol>\n<p>DeFi-Battles aims to be the \"Top Shots\" of NFTs for the Pokemon card nerds of the world. We aim to introduce them to DeFi with multipurpose NFTs and make them crypto natives. With the platform shaped as a game, we intend to gamify DeFi and make it intuitive to Gen Z and millenials.\r\n</p>\n<p><strong>Challenges we ran into</strong><br/></p>\n<p>We faced various challenges while working on this project.\r\n</p>\n<ol><li>Initially deciding what type of NFT should we have, first was unique crypto NFT which were unique based on the date of minting and value of that crypto asset. Later we moved to monster NFTs as they were much cooler, and these monsters are of different types like fire, water, grass. etc and have attacks based on that.\r\n</li><li>The next challenge was how would we dynamically generate this NFT we solved it with Remotion it's a library to generate videos with the code written in React, the NFTs are in CSS and react and are generated on the server itself.\r\n</li><li>Deciding the traits and character meta data generation part, the traits and meta data are based on the DNA which is generated from Chainlink VRF and all those data is stored in ifps using nft.storage.\r\n</li><li>Deploying the NFT generation server, was slightly complex because we had to set up HTTPS, and also while working we encountered that Remotion doesn't work with 1gb VPS and it was solved by upgrading it to a 4gb one. We learned about Nginx, pm2 and HTTPS setup during this part.\r\n</li><li>Building the flow for Token URI to be set for a newly created token was particularly hard. The token first had to be created on the ERC721 contract, an event listener picked up the DNA of the token, called an async request to the NFT generation server to generate the video for the NFT, which when generated, pushed it to IPFS and sent the hash back, which then had to make a call to the contract again to set it. All of the elements here were async and the whole flow fails if one step fails. Making this flow foolproof was hard. It still needs improvement.\r\n</li><li>The real-time battle arena and battle contract needed real time communication b/w both participants and Web3 event listeners were too slow to notify users when their opponent has made their move. We used socket.io to solve this. With the battle contract, we used commit-reveal system to ensure security of a users' battle strategy.\r\n</li></ol>", "metacritic": null, "released": "2021-04-26", "tba": false, "updated": "2021-04-30T19:17:21", "background_image": "https://media.rawg.io/media/screenshots/32f/32fe7fc234c9ed3b0f24e2e95fe6936e.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 89, "game_series_count": 0, "reviews_count": 0, "platforms": ["Web"], "developers": ["shreykeny"], "genres": ["Action", "RPG"], "publishers": [], "esrb_rating": null}