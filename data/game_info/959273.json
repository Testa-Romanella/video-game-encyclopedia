{"id": 959273, "slug": "wip-tower-defence-roguelite", "name": "[WIP] Tower Defence Roguelite", "name_original": "[WIP] Tower Defence Roguelite", "description": "<p><em>Project Source:\u00a0GitHub</em><br/></p>\n\n<p><em>\r\nA first-person tower-defence roguelite, where you strategically place defences to fend off waves of increasingly challenging robots.</em>\n</p>\n<p><em>The objective of the game is to survive for as many waves as possible.\r\nRestarting is inevitable.</em>\n</p>\n<p>\n</p>\n\r\nGame Management\r\n<p>The bulk of the gameplay is contained within the GameMode. It's within the GameMode that gameplay states are contained and managed,\u00a0</p>\n<p>Much global data such as the player's balance is also stored with the GameMode, the reason for this is easy access. The GameMode is a singleton class and this game is single-player only and so storing unique data as such is not an issue.</p>\n\r\nInteraction System\r\n<p>Both the Interactor and Interactable are ActorComponents and provide the functionality you'd expect.\u00a0</p>\n<p>Interactable is built with the intent to support\u00a0multiple types of interaction actions which will be interactable through a radial UI widget.</p>\n<p>These systems are implemented as ActorComponents as opposed to, say, Interfaces so that implementation is easy and intuitive. Any Interactable which has a visible mesh will function as expected.\u00a0<br/></p>\n\r\nHealth Component\r\n<p>The Health Component is of type ActorCompoent and provides health-related functionality to Actors. It allows for the handling of health values and instantiating\u00a0appropriate actions such as death effects.</p>\n\r\nExample: AHealthComponent used for UI\u00a0\r\n\r\nvoid ATowerDefenceGameMode::UpdateTowerHealthBar()\r\n{\r\n   if (UUW_TowerDefenceHUD* TowerDefenceHUD = GetHUD())\r\n   {\r\n      float TotalTowerHealthPercentage = 0.0f;\r\n      for (int i = 0; i &lt; Towers.Num(); ++i)\r\n      {\r\n         TotalTowerHealthPercentage += Towers[i]-&gt;GetHealthComponent()-&gt;GetHealthPercentage();\r\n      }\r\n      TowerDefenceHUD-&gt;UpdateTowerHealthBar(TotalTowerHealthPercentage / Towers.Num());\r\n   }\r\n}\r\n\r\n<p><em>The HealthComponent used to get the total health percentage of all Towers in the level within ATowerDefenceGameMode.cpp.</em></p>\n\r\n\r\nfloat GetHealthPercentage() const {return (Health / MaxHealth) * 100;}\r\n<p><em>The GetHealthPercentage implementation within AHealthComponent.h.</em></p>\n\r\nAI\r\n<p>The game uses behaviour trees for the Enemy and Turret AI, allowing them to make decisions and adapt to different situations.\r\n</p>\n\r\nShop &amp; Items\r\n<p>The shop updates its stock every five rounds, providing new items to help players fend off the increasingly difficult waves.\r\n</p>\n\r\nDonation Machine\r\n<p>The donation machine offers a way for the player to donate currency from their current play session to get permanent upgrades\u00a0which last between restarts.\r\n</p>\n\r\nUI\r\n<p>The User Interface is completely implemented through C++, besides from the Interaction menu which is a store asset implemented through blueprints.</p>", "metacritic": null, "released": null, "tba": false, "updated": "2023-04-17T23:58:24", "background_image": "https://media.rawg.io/media/screenshots/eb7/eb733fdda623eb1e4ea90448496e9446.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 67, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["Joshua Simpson"], "genres": ["Adventure"], "publishers": [], "esrb_rating": null}