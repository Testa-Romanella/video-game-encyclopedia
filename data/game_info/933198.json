{"id": 933198, "slug": "sabotage-amstrad-cpc-by-copper-france", "name": "Sabotage (Amstrad CPC) by Copper France", "name_original": "Sabotage (Amstrad CPC) by Copper France", "description": "<p>SABOTAGE</p>\n<p>Sabotage is the Amstrad CPC version of the game of the same name released on ZX81 (written by Don Priestley and published by Macronics 1982). In this version you play the saboteur only.</p>\n<p>Keyboard arrows are used to move the saboteur and space to put a charge. You need to put 10 charges and destroy a maximum of ammunitions represented with blue cylinders. (Video inverse X in the original version)</p>\n<p>You need to avoid the guard because if he is in front of you he shot you instantly and the game will be over.</p>\n\n<p>TECHNICAL PART</p>\n<p>The game works on all Amstrad CPC (using only BASIC 1.0) but for CPC 464 there is another version because POKE&amp;B7C3,<v> needs to be replaced by POKE&amp;B1C8,<v></v></v></p>\n<p>There is a difference using this POKE because CPC 464 is using PEN 1 instead of PEN 3 on other machines... That's why I swapped INK 1 &amp; 3 and changed SYMBOLs in the 464 version.</p>\n<p>1) Control Characters</p>\n<p>The game use a lot of control characters to replace MODE, PAPER, BORDER, INK, SYMBOL in only one PRINT in the first line :</p>\n<p>MODE is CHR$(4)+\"2\" FOR MODE 2</p>\n<p>PAPER is CHR$(14)+\"0\" FOR PAPER 0</p>\n<p>BORDER is CHR$(29)+CHR$(64+0)+CHR$(64+0) for BORDER 0,0</p>\n<p>INK is CHR$(18)+CHR$(64+v)+CHR$(64+v) for INK v,v</p>\n<p>SYMBOL is CHR$(25)+CHR$(i)+CHR$(a)+CHR$(b)+CHR$(c)+CHR$(d)+CHR$(e)+CHR$(f)+CHR$(g)+CHR$(h) for SYMBOL i,a,b,c,d,e,f,g,h</p>\n<p>CHR$(8) is also used in the tiles's strings to avoid -1 for all LOCATE 2*<x>,<y> when PRINTing 2 characters in MODE 2 for the saboteur, the guard, charge</y></x></p>\n<p>2) CALL &amp;BD1C</p>\n<p>The BASIC use MODE 2 but a CALL &amp;BD1C,1 (one parameter (value not important) is needed to have 1 in Z80's A register) is doing a MODE 1 without clearing the screen.</p>\n<p>With this trick you can have 4 colors tiles with a simple PRINT of two characters in MODE 2.</p>\n<p>Each characters print 4 pixels in 4 colors and are encoding using the MODE 1 video memory scheme :</p>\n\n<p>I used famous tool ConvImgCpc for encoding SYMBOLs converting it's asm file to DATAs.</p>\n<p>3) POKE &amp;B7C3,<v> (POKE &amp;B1C8,<v> on CPC 464)</v></v></p>\n<p>When you use CALL &amp;BD1C,1 you can't print normal text except if you use POKE &amp;B7C3,1 so PRINT is working in MODE 1 again. I use it to PRINT the final score and the explosion square to speed it up a little.</p>\n<p>When I want to have 4 colors tiles again I restore previous state with POKE &amp;B7C3,2 (PRINT is working in MODE 2)</p>\n<p>4) Explosion / guard AI</p>\n<p>The original game was disassembled for studying explosion and AI algorithm of the guard and finding other useful information.</p>\n<p>For example, the guard is starting at the center of the map (if center if not free using first free spot to the right)</p>\n<p>The saboteur is starting near a wall (left, right, top or bottom)</p>\n<p>Explosion is propagated to all 9-neighbours arround. New ammunitions position are stored in a buffer of 50 positions max to be propagated until buffer is full or empty.</p>\n<p>The guard try to reduce difference in x or y randomly except if the saboteur is near. If he is near or can't reduce difference he try a random position arround not used before.</p>\n<p>If all position arround were already used he try one used only one time. If all positions arround were used twice all positions already used are cleared (reset)</p>\n<p>5) Listing description</p>\n<p>Line 1: Graphics initialization in one PRINT / Variables initializations</p>\n<p>Line 2: Variables initializations / Magic switch in MODE 1 / RNG initialization</p>\n<p>Line 3: Wall arround map initialization and display / Calling ammuntion random add sub routine in 10 / Guard starting position / Saboteur starting position</p>\n<p>Line 4: Player (saboteur) moves and putting charge action</p>\n<p>Line 5: Guard move (AI)</p>\n<p>Line 6: Charge display / Guard shot tests</p>\n<p>Line 7: Saboteur and guard display / Animated shot display (vertical or horizontal)</p>\n<p>Line 8: Animated charge (or shot) explosion</p>\n<p>Line 9: Bomb guard and saboteur hit checks (and end of charge animation) / Scoring / Game Over Final Score Display / Next Round</p>\n<p>Line 10 : Ammunitions Random Add / Guard move (Update and display) / DATA for tiles's strings</p>\n<p>6) Variables</p>\n<p>z$\u00a0 \u00a0 \u00a0 \u00a0: CHR$(0)</p>\n<p>u(),v()\u00a0 : Guard moves offsets</p>\n<p>m\u00a0 \u00a0 \u00a0 \u00a0 : Timer before guard starts to move</p>\n<p>n\u00a0 \u00a0 \u00a0 \u00a0 : Number of random ammunitions to add</p>\n<p>o\u00a0 \u00a0 \u00a0 \u00a0 : Number of charges remaining</p>\n<p>b(,)\u00a0 \u00a0 \u00a0: Map</p>\n<p>q(),r()\u00a0 : Buffer for explosion</p>\n<p>m$\u00a0 \u00a0 \u00a0 \u00a0: Wall tile</p>\n<p>x$\u00a0 \u00a0 \u00a0 \u00a0: Ammunition tile</p>\n<p>g$\u00a0 \u00a0 \u00a0 \u00a0: Guard tile</p>\n<p>s$\u00a0 \u00a0 \u00a0 \u00a0: Saboteur current tile</p>\n<p>s$(,)\u00a0 \u00a0 : Saboteur tiles for each direction</p>\n<p>b$\u00a0 \u00a0 \u00a0 \u00a0: Charge tile</p>\n<p>h$,i$\u00a0 \u00a0 : Horizontal shot tile (2 frames)</p>\n<p>v$,w$\u00a0 \u00a0 : Vertical shot tile (2 frames)</p>\n<p>e$\u00a0 \u00a0 \u00a0 \u00a0: Empty tile</p>\n<p>h$(),v$(): Horizontal and vertical shot tiles animations (10 frames)</p>\n<p>t$\u00a0 \u00a0 \u00a0 \u00a0: Top and bottom horizontal wall</p>\n<p>g,h\u00a0 \u00a0 \u00a0 : Guard position</p>\n<p>s,t\u00a0 \u00a0 \u00a0 : Saboteur position</p>\n<p>u,v\u00a0 \u00a0 \u00a0 : Saboteur move offset / Offset between guard and saboteur</p>\n<p>w\u00a0 \u00a0 \u00a0 \u00a0 : Random Number used to randomize AI moves horizontaly or verticaly / Shot direction</p>\n<p>q,r\u00a0 \u00a0 \u00a0 : Charge position</p>\n<p>k\u00a0 \u00a0 \u00a0 \u00a0 : Temp variable also set when saboteur is shoted</p>\n<p>p\u00a0 \u00a0 \u00a0 \u00a0 : Used to check used position / used twice position</p>\n<p>i,j\u00a0 \u00a0 \u00a0 : Used for loops</p>\n<p>w,z\u00a0 \u00a0 \u00a0 : Guard move offset</p>\n<p>x\u00a0 \u00a0 \u00a0 \u00a0 : Map content</p>\n<p>f\u00a0 \u00a0 \u00a0 \u00a0 : Flag to simulate markers reset</p>\n<p>b\u00a0 \u00a0 \u00a0 \u00a0 : Timer before charge explode</p>\n<p>c\u00a0 \u00a0 \u00a0 \u00a0 : Saboteur hit by explostion</p>\n<p>d\u00a0 \u00a0 \u00a0 \u00a0 : Guard hit\u00a0 by explostion</p>\n<p>e\u00a0 \u00a0 \u00a0 \u00a0 : Explosion buffer index</p>\n<p>a$\u00a0 \u00a0 \u00a0 \u00a0: Explostion tile</p>\n<p>a\u00a0 \u00a0 \u00a0 \u00a0 : Score</p>\n<p>x,y\u00a0 \u00a0 \u00a0 : Random Position (Line 10)</p>", "metacritic": null, "released": "2023-02-26", "tba": false, "updated": "2023-02-27T07:58:44", "background_image": "https://media.rawg.io/media/screenshots/fe9/fe98e93ee312e1ca62aef19ecfb48b26.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 20, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}