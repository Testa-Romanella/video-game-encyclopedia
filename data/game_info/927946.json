{"id": 927946, "slug": "snake-zx-spectrum-by-mcphail", "name": "Snake! (ZX Spectrum) by mcphail", "name_original": "Snake! (ZX Spectrum) by mcphail", "description": "1 INK 8: LET a=22528: LET h=22826: LET t=h-1: LET s=-10: FOR d=20 TO 2 STEP -1\r\n\u00a02 PRINT PAPER 0;AT d,1,\"\u00a0 \u00a0 \": NEXT d: PRINT INK 6; PAPER 6;AT 9,9;\"Q \"\r\n\u00a03 LET p=INT (RND*19)+2: LET c=INT (RND*19)+1: IF PEEK (a+32*p+c) THEN GO TO 3\r\n\u00a04 PAPER 8: PRINT INK 7;AT p,c;\"*\": LET s=s+10: PRINT AT 0,0;\"Score=\";s,\"QAOP\"\r\n\u00a05 LET k$=INKEY$: LET o=(32*(k$=\"a\"))-(32*(k$=\"q\"))-(k$=\"o\")+(k$=\"p\")\r\n\u00a06 LET f=INT ((h-a)/32): LET e=h-a-f*32: IF (d+o) AND o THEN LET d=o\r\n\u00a07 PRINT AT f,e;CHR$ (d+80): LET h=h+d: LET z=PEEK h: PRINT AT 0,21;\"to move\"\r\n\u00a08 POKE h,54: GO TO 9*(z=0)+3*(z=7)+9999*(z&gt;7)\r\n\u00a09 LET w=INT ((t-a)/32): LET u=t-a-w*32: LET v=CODE SCREEN$ (w,u)-80\r\n10 POKE t,0: LET t=t+v: PRINT PAPER 5;AT 10,23;\" SNAKE! \": GO TO 5\r\n\n<p># SNAKE! , a 10 line BASIC game for the ZX Spectrum</p>\n<p># By mcphail (btl-AT-mcphail.uk)</p>\n<p># This is the source code for my \"Snake\" entry to the PUR-80 section of the</p>\n<p># 2023 BASIC 10Liner Contest</p>\n<p># It can be parsed with zmakebas (https://github.com/z00m128/zmakebas)</p>\n<p>#</p>\n<p># zmakebas -l -i 1 -s 1 -n SNAKE -o snake.tap README.txt</p>\n<p># the resulting .tap file is a standard ZX Spectrum tape file which can be</p>\n<p># loaded on an emulator such as FUSE. Once loaded, run the program by\u00a0</p>\n<p># pressing R then ENTER</p>\n<p>#</p>\n<p># The program can be LISTed by pressing K then ENTER</p>\n<p># It will be seen the program is in standard Sinclair BASIC and that no line\u00a0</p>\n<p># is greater than 80 characters, including line numbers</p>\n<p># For convenience, complete listing in Sinclair BASIC is included in listing.txt</p>\n<p># Control the snake with the Q,A,O and P keys. Eat the food to grow longer</p>\n<p># and score points</p>\n<p># CODE BELOW...</p>\n<p># Set up some initial values and draw the main play area</p>\n<p># Ink is made transparent so we don't stomp on attributes</p>\n<p># It would be nice to do the same with Paper but there's insufficient space here</p>\n<p># Attributes are important as they're used for collision detection</p>\n<p># \"a\" is a constant pointing to the start of the screen attributes</p>\n<p># \"h\" is the head and \"t\" the tip of the tail of the snake's attribute address</p>\n<p># \"s\" is score. \"d\" is reused to save space, and becomes the direction indicator</p>\n<p># The tail and head are then printed in yellow. The letter 'Q' is character</p>\n<p># number 81. This is decoded by subtracting 80. The resulting '1' means that</p>\n<p># the next section of the snake is at attribute position +1 (one square to the</p>\n<p># right). All body segments of the snake will be coded this way so the tail can</p>\n<p># be cleared in order as the snake moves. The characters aren't visible as they're</p>\n<p># printed yellow on yellow</p>\n<p>\u00a0 ink 8: let a=22528: let h=22826: let t=h-1: let s=-10: for d=20 to 2 step -1</p>\n<p>\u00a0 print paper 0; at d,1,\"\u00a0 \u00a0 \": next d: print ink 6; paper 6; at 9,9;\"Q \"</p>\n<p># This routine creates a new food spot and increments the score.</p>\n<p># We take the opportunity to set Paper transparent, which we couldn't do above</p>\n<p># The score and some help text is printed</p>\n<p>@newspot:</p>\n<p>\u00a0 let p=int (rnd*19)+2: let c=int (rnd*19)+1: if peek(a+32*p+c) then goto @newspot</p>\n<p>\u00a0 paper 8: print ink 7; at p,c;\"*\": let s=s+10: print at 0,0;\"Score=\";s,\"QAOP\"</p>\n<p># This reads the keyboard for a valid direction key and prevents any 180 degree turns</p>\n<p># the default is to continue in the same direction</p>\n<p># The direction is coded onto the body segment as above</p>\n<p># 'h' is updated based on the new direction</p>\n<p># if the new head square is black on black, we're still in the play area and play continues</p>\n<p># with the snake tail square being culled to move it along</p>\n<p># White on black means we've eaten a spot. We jump back to the \"newspot\" routine and don't</p>\n<p># cull the tail, which makes the snake grow one square</p>\n<p># Anything else means we've crashed</p>\n<p># the new head is shown by poking a yellow on yellow box at the attribute address</p>\n<p>@getkey:</p>\n<p>\u00a0 let k$=inkey$: let o=(32*(k$=\"a\"))-(32*(k$=\"q\"))-(k$=\"o\")+(k$=\"p\")</p>\n<p>\u00a0 let f=int ((h-a)/32): let e=h-a-f*32: if (d+o) and o then let d=o</p>\n<p>\u00a0 print at f,e;chr$ (d+80): let h=h+d: let z=peek h: print at 0,21;\"to move\"</p>\n<p>\u00a0 poke h,54: goto @losetail *(z=0)+@newspot *(z=7)+9999*(z&gt;7)</p>\n<p># The character at the tail tip is read and decoded, then painted black on black to remove</p>\n<p># The 't' variable is updated based on the coding to point to the new tip</p>\n<p># There is some spare space here for a bit of decoration</p>\n<p>@losetail:</p>\n<p>\u00a0 let w=int ((t-a)/32): let u=t-a-w*32: let v=code screen$ (w,u)-80</p>\n<p>\u00a0 poke t,0: let t=t+v: print paper 5; at 10,23;\" SNAKE! \": goto @getkey</p>", "metacritic": null, "released": "2023-02-14", "tba": false, "updated": "2023-02-17T18:48:55", "background_image": "https://media.rawg.io/media/screenshots/68a/68ad79aea88d024f970c6d0c3db0f4e1.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 2, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}