{"id": 930330, "slug": "squash-trainer-zx81-by-marcos-retrobits", "name": "Squash Trainer (ZX81) by Marco's Retrobits", "name_original": "Squash Trainer (ZX81) by Marco's Retrobits", "description": "<p>SQUASH TRAINER</p>\n<p>BASIC 10-Liner videogame for the Sinclair ZX81</p>\n<p>by Marco's Retrobits: https://retrobits.itch.io</p>\n<p>English language blog: https://retrobits.altervista.org</p>\n<p>Italian language blog: https://somebitsofme.altervista.org</p>\n<p>YouTube channel: https://youtube.com/@marcosretrobits</p>\n<p>Play Online/Download: https://retrobits.itch.io/squashtrainer</p>\n<p>Gameplay video: </p>\n\n<p>Squash Trainer is an action game for the Sinclair ZX81 8-bit home computer.</p>\n<p>It is my (first?) entry to the 12th edition (2023) of the BASIC 10 Liner Contest, PUR-80 category.</p>\n<p>The game has been entirely coded in BASIC language and the program is 10 lines long.</p>\n<p>Since the ZX81 BASIC allows only one statement per line, the program consists of only 10 statements.</p>\n<p>You love playing squash, but let's face it, you're not so good at it. [1] But don't worry, with the right training you'll become an ace!</p>\n<p>So... let's start!</p>\n<p>Move your racket by tapping \"O\" (left) or \"P\" (right).</p>\n<p>Every time you hit the ball, it will bounce with a random direction (I told you you are not so good at Squash!) and you will score one point.</p>\n<p>If you score 99 points, your training is over.</p>\n<p>If the ball falls beyond your racket, the game is over and you can start again by pressing \"R\" (RUN) and then \"Enter\".</p>\n<p>Your current score is displayed in the top-left corner of the screen.</p>\n<p>[1]: I'm just kidding, I'm sure you're a great player; I just needed something for the game introduction.</p>\n\n<p>Program description</p>\n<p>Squash Trainer is my entry to the PUR-80 category of the BASIC 10 Liner Contest; this means the program is 10 lines long and each line is made up of 80 characters to the upmost.</p>\n<p>Since the Sinclair ZX81 BASIC allows only one statement per line, the program consists of only 10 statements.\u00a0</p>\n<p>The program uses a string (M$) to encode multiple variables; with this technique, it is possible to alter their values with just one statement.</p>\n<p>At each game tick, the ball moves either horizontally and vertically by 2 character positions, so horizontal and vertical velocities values can be either -2 or 2.\u00a0</p>\n<p>Since velocities are encoded as characters in a string (the variable value is the character code), they cannot assume negative values, so their values are displaced by adding 2.</p>\n<p>The ball coordinates and the horizontal position of the left end of the bat are stored as characters as well, while the score is stored as the string representation of the numeric value.</p>\n<p>The movements are a bit jerky (if played on an emulator, by increasing the speed the game becomes more enjoyable). Rather than an actual videogame, Squash Trainer can be seen as a proof of concept that a 1 player PONG-like game can be coded in BASIC with just 10 statements.</p>\n\n<p>Variables</p>\n<p>M$(1): Ball vertical position y</p>\n<p>M$(2): Ball horizontal position x</p>\n<p>M$(3): Key pressed</p>\n<p>M$(4): Ball vertical velocity</p>\n<p>M$(5): Ball horizontal velocity</p>\n<p>M$(6 TO 7): Score</p>\n<p>M$(8): Racket X (horizontal position of the left end of the racket)</p>\n<p>C: Collision flag</p>\n\n<p>Listing</p>\n<p>The following listing can be used with the ZXText2P tool to make a \".P\" file suitable for loading into ZX81 emulators.</p>\n<p>Block graphic characters have been replaced with the corresponding escape sequences.</p>\r\n\r\n1LET M$=\"?(X \"+CHR$(4*(RND&lt;.5))+\"0 ?\"\r\n2LET C=(M$(1)=\"$\")*(M$(2)&gt;=M$(8))*(CODE M$(2)-CODE M$(8)&lt;3)\r\n3IF C THEN LET M$(4 TO 7)=\" \"+CHR$((RND&lt;.5)*4)+STR$(1+VAL M$(6 TO 7))\r\n4LET M$(4)=CHR$((M$(1)&gt;\"\\''\")*CODE M$(4)+4*(M$(1)=\"\\''\"))\r\n5LET M$(5)=CHR$((M$(2)&gt;\" \")*(M$(2)&lt;\"0\")*CODE M$(5)+4*(M$(2)=\" \"))\r\n6PRINT AT CODE M$(1),CODE M$(2);\" \";AT14,CODE M$(8);\"   \"\r\n7LET M$(TO3)=CHR$(CODE M$(1)+CODE M$(4)-2)+CHR$(CODE M$(2)+CODE M$(5)-2)+INKEY$\r\n8LET M$(8)=CHR$(CODE M$(8)+3*(M$(3)=\"P\")*(M$(8)&lt;\".\")-3*(M$(3)=\"O\")*(M$(8)&gt;\" \"))\r\n9PRINT AT0,0;M$(6TO7);AT CODE M$(1),CODE M$(2);\"\\::\";AT14,CODE M$(8);\"\\~~\\~~\\~~\"\r\n10GOTO 2*(M$(1)&lt;\"?\")+20*((M$(1)=\"?\")+(M$(6TO7)=\"99\")&gt;0)\r\n<p>Source code explained line by line</p>\n<p>1. Initialize all variables in M$: ball y M$(1) = 15 (\"?\"), ball x M$(2) = 16 (\"(\"); currently pressed key M$(3) = \"X\", ball velocity y M$(4) = 0 - UP, ball velocity x M$(5) = either 0 - LEFT or 4 - RIGHT randomly, score M$(6 to 7) = 0 (\"00\"), racket x M$(8) = 15 (\"?\").</p>\n<p>2. Begin of the game loop. Collision detection: set flag C if the racket hits the ball, i.e. if the ball is above the racket (ball y M$(1) = 13) and ball x M$(2) &gt;= racket x M$(8) and ball x M$(2) &lt; racket x M$(8) + 3.</p>\n<p>3. If the collision flag C is set, set the ball y velocity M$(4) to UP and x velocity M$(5) to LEFT or RIGHT randomly; increment the score by one.</p>\n<p>4. Update ball vertical velocity: if the ball hits the top wall (ball y = 3), set ball vertical velocity M$(4) to 4 - DOWN.</p>\n<p>5. Update ball horizontal velocity: if the ball hits the right wall (ball x = 0), set ball horizontal velocity M$(5) to RIGHT; if the ball hits the right wall (ball x M$(2) = 28), set ball horizontal velocity M$(5) to LEFT.</p>\n<p>6. Erase ball and racket, by printing space characters.</p>\n<p>7. Update ball y M$(1) and x M$(2) by adding vertical and horizontal velocities subtracted by 2 (since velocities values are displaced by 2); save the character corresponding to currently pressed key in M$(3).</p>\n<p>8. Update racket x M$(8) by adding 3 (thus moving right) if the \"P\" key is pressed and by subtracting 3 (thus moving left) if the \"O\" key is pressed.</p>\n<p>9. Print the score in the top left corner of the screen; print the ball at line M$(1), column M$(2) and then print the racket at line 14, starting at column M$(8).</p>\n<p>10. If the ball is still within the playing field (ball y &lt; 15), jump to line 2 and continue the game.\u00a0</p>\n<p>\u00a0 \u00a0 Otherwise, if either the ball passed the racket without being hit (ball y = 15) or the training is over (score = 99), the game is over. End the game by jumping to non-existing line 20.</p>\n\n\n<p>Credits</p>\n<p>PIXELGLIDER (Dr. Beep's entry to the 2022 edition of the contest) has been the source of inspiration on how to use a single string to encode several variables.</p>\n<p>https://bunsen.itch.io/plotglider-by-dr-beep</p>\n<p>Squash Trainer picture adapted from the Squash Man Clip Art from clker.com: http://www.clker.com/clipart-squash-man-.html</p>", "metacritic": null, "released": "2023-02-17", "tba": false, "updated": "2023-02-20T17:16:47", "background_image": "https://media.rawg.io/media/screenshots/89d/89dc578f6b5eec1aa5f13274103dd387.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 5, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": [], "publishers": [], "esrb_rating": null}