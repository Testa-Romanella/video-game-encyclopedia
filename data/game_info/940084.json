{"id": 940084, "slug": "rings-of-saturn-c64-by-sander-alsema", "name": "Rings of Saturn (C64) by Sander Alsema", "name_original": "Rings of Saturn (C64) by Sander Alsema", "description": "<p>--- Rings Of Saturn ---</p>\n<p>Written by Sander Alsema for the 10-liner competition 2023.</p>\n<p>Language: Commodore 64 Basic v2</p>\n<p>Category: PUR-80</p>\n\n\n<p>--- Description &amp; Instructions ---</p>\n<p>Space Exploration can be a tricky business. Having finally reached</p>\n<p>Saturn, you discover that this planet has more rings than previously</p>\n<p>known. In order to continue your mission, you have no choice but to</p>\n<p>manoeuvre straight through them.</p>\n<p>Luckily your craft is equipped with a state-of-the-art 8-bit computer</p>\n<p>system. (Well, it was state-of-the-art back in the eighties, when you</p>\n<p>took off from earth...) With this ingenious device, dodging boulders of</p>\n<p>various sizes will be no problem, right? Not quite. Due to code size\u00a0</p>\n<p>limitations, that particular automated feature was never actually</p>\n<p>implemented. So it's up to you to do this manually.</p>\n<p>Every time you scrape you craft against a boulder, it loses some of its</p>\n<p>shield power. To indicate this, it turns from green to yellow to orange</p>\n<p>to red. When you run out of shield power, the game is over. But if you</p>\n<p>manage to travel a thousand starmiles, you win!</p>\n\n<p>Controls:</p>\n<p>Press '&lt;' to move left.</p>\n<p>Press '&gt;' to move right.</p>\n\n<p>--- Code Explanation ---</p>\n<p>Line 0: Read the text strings of the boulders from elsewhere in the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 code, and store them in an array for easy access. Also, read</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 the text string that contains the encoded data for the</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 spacecraft sprite.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 In a loop, decode this data and store it in memory.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set the shield power variable.</p>\n<p>Line 1: Clear the screen and move a few lines down.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set background colour to black.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set a variable to the first register of the VIC-II chip.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Access the sprite image data stored in memory.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Turn on sprite number 1.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set the vertical position of this sprite.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set the horizontal position indicator variable.</p>\n<p>Line 2: Pick a random number and use it to place a boulder on the screen</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 at a certain horizontal position.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set a string variable with the victory text.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set a variable with encoded colour information.</p>\n<p>Line 3: Start a loop depending on distance travelled.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Use the keypressed variable to determine whether '&lt;' or '&gt;' was</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 pressed, and adapt the horizontal position indicator variable.</p>\n<p>Line 4: Set the Most Significant Bit of the sprite horizontal position,</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 if necessary.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Set the rest of the sprite horizontal position.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Increase the distance travelled.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 When a thousand starmiles have been travelled, set the final text</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 string to the victory text string.</p>\n<p>Line 5: Move one line down.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Read the keyboard.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 If the sprite collides with a character, decrease the shield</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 power variable.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 This line also contains data for a text string.</p>\n<p>Line 6: As long as there is shield power, set the colour of the sprite by</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 decoding the colour information variable.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Come out of the loop.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Pick a random number to indicate which boulder image is displayed</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 next.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 As long as the maximum distance hasn't been travelled, jump to</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 line 2.</p>\n<p>Line 7: Clear the screen and display \"GAME OVER\", the travelled distance</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 and the final text string.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 Clear the keyboard buffer.</p>\n<p>Line 8: Wait for a key to be pressed.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 This line also contains data for text strings.</p>\n<p>Line 9: Restart the game.</p>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 This line also contains data for a text string.</p>\n<p>---</p>", "metacritic": null, "released": "2023-03-12", "tba": false, "updated": "2023-03-13T06:17:00", "background_image": "https://media.rawg.io/media/screenshots/46d/46d7d539ff2ca752a67ecd03457179b9.jpg", "website": "", "rating": 0.0, "rating_top": 0, "added_by_status": null, "playtime": 0, "achievements_count": 0, "ratings_count": 0, "suggestions_count": 16, "game_series_count": 0, "reviews_count": 0, "platforms": ["PC"], "developers": ["BASIC 10Liner"], "genres": ["Action"], "publishers": [], "esrb_rating": null}